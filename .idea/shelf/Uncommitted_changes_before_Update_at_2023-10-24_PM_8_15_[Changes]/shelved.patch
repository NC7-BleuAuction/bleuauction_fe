Index: node_modules/.cache/.eslintcache
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[{\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\index.js\":\"1\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\App.js\":\"2\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\reportWebVitals.js\":\"3\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Auth\\\\UserContext.js\":\"4\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Auth\\\\LoginPage.js\":\"5\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Auth\\\\RegisterPage.js\":\"6\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Menu\\\\MenuList.js\":\"7\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Common\\\\SideBar.js\":\"8\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Common\\\\Header.js\":\"9\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Test\\\\Test.js\":\"10\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\routes\\\\Home.js\":\"11\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Common\\\\Footer.js\":\"12\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Menu\\\\MenuRegisterationForm.js\":\"13\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\TabBar.js\":\"14\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\StoreList.js\":\"15\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\MarketDetailPage.js\":\"16\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\StoreMyPage.js\":\"17\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\StoreItemRegister.js\":\"18\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\UserEditPage.js\":\"19\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\StoreRegisterPage.js\":\"20\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\MyPage.js\":\"21\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\MyOrder.js\":\"22\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\StoreItemDailyPrice\\\\StoreItemDailyPrice.js\":\"23\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\utility\\\\common.js\":\"24\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Pay\\\\Pay.js\":\"25\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Test\\\\test2.jsx\":\"26\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Review\\\\ReviewForm.js\":\"27\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\StoreHome.js\":\"28\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\StoreListItem.js\":\"29\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Menu\\\\MenuItem.js\":\"30\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\InputField.js\":\"31\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\StoreInfo.js\":\"32\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MainPage\\\\Category.js\":\"33\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\MyOrderContent.js\":\"34\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MainPage\\\\Announce.js\":\"35\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MainPage\\\\Button.js\":\"36\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\StoreHomeItem.js\":\"37\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Review\\\\ReviewList.js\":\"38\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Coupon\\\\Coupon.js\":\"39\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\StoreItemDailyPrice\\\\StoreItemAdd.js\":\"40\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\routes\\\\StoreList.js\":\"41\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Chat\\\\Chat.js\":\"42\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Notice\\\\NoticeDetail.js\":\"43\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Notice\\\\NoticeList.js\":\"44\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Notice\\\\NoticeListItem.js\":\"45\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\OrderModal.js\":\"46\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Admin\\\\AdminNoticeList.js\":\"47\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Admin\\\\AdminNoticeDetail.js\":\"48\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Admin\\\\NoticeRegisterationForm.js\":\"49\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Admin\\\\AdminNoticeListItem.js\":\"50\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\OrderItem.js\":\"51\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\OrderMenuList.js\":\"52\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\StoreOrder.js\":\"53\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\StoreEdit.js\":\"54\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\OS\\\\OS.js\":\"55\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\StoreInfoDetail.js\":\"56\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\MenuDetail.js\":\"57\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\MenuEdit.js\":\"58\"},{\"size\":661,\"mtime\":1697978277777,\"results\":\"59\",\"hashOfConfig\":\"60\"},{\"size\":6218,\"mtime\":1698144517010,\"results\":\"61\",\"hashOfConfig\":\"60\"},{\"size\":375,\"mtime\":1696236038543,\"results\":\"62\",\"hashOfConfig\":\"60\"},{\"size\":1736,\"mtime\":1698143852517,\"results\":\"63\",\"hashOfConfig\":\"60\"},{\"size\":5571,\"mtime\":1698144517012,\"results\":\"64\",\"hashOfConfig\":\"60\"},{\"size\":6672,\"mtime\":1697693754234,\"results\":\"65\",\"hashOfConfig\":\"60\"},{\"size\":1074,\"mtime\":1698143316555,\"results\":\"66\",\"hashOfConfig\":\"60\"},{\"size\":1670,\"mtime\":1698144517014,\"results\":\"67\",\"hashOfConfig\":\"60\"},{\"size\":3321,\"mtime\":1698143316537,\"results\":\"68\",\"hashOfConfig\":\"60\"},{\"size\":1115,\"mtime\":1696943521784,\"results\":\"69\",\"hashOfConfig\":\"60\"},{\"size\":2483,\"mtime\":1698144517029,\"results\":\"70\",\"hashOfConfig\":\"60\"},{\"size\":285,\"mtime\":1697521231622,\"results\":\"71\",\"hashOfConfig\":\"60\"},{\"size\":5861,\"mtime\":1698143316556,\"results\":\"72\",\"hashOfConfig\":\"60\"},{\"size\":1388,\"mtime\":1697097424814,\"results\":\"73\",\"hashOfConfig\":\"60\"},{\"size\":2621,\"mtime\":1698038999200,\"results\":\"74\",\"hashOfConfig\":\"60\"},{\"size\":4028,\"mtime\":1698143713017,\"results\":\"75\",\"hashOfConfig\":\"60\"},{\"size\":0,\"mtime\":1697691593162,\"results\":\"76\",\"hashOfConfig\":\"77\"},{\"size\":8651,\"mtime\":1698143316569,\"results\":\"78\",\"hashOfConfig\":\"60\"},{\"size\":6428,\"mtime\":1698038999208,\"results\":\"79\",\"hashOfConfig\":\"60\"},{\"size\":7165,\"mtime\":1697776613319,\"results\":\"80\",\"hashOfConfig\":\"60\"},{\"size\":5083,\"mtime\":1698144743582,\"results\":\"81\",\"hashOfConfig\":\"60\"},{\"size\":2335,\"mtime\":1697521308636,\"results\":\"82\",\"hashOfConfig\":\"60\"},{\"size\":9792,\"mtime\":1698143316581,\"results\":\"83\",\"hashOfConfig\":\"60\"},{\"size\":6871,\"mtime\":1698144517026,\"results\":\"84\",\"hashOfConfig\":\"60\"},{\"size\":4473,\"mtime\":1697713109592,\"results\":\"85\",\"hashOfConfig\":\"60\"},{\"size\":470,\"mtime\":1696943521785,\"results\":\"86\",\"hashOfConfig\":\"60\"},{\"size\":28674,\"mtime\":1698143316577,\"results\":\"87\",\"hashOfConfig\":\"60\"},{\"size\":479,\"mtime\":1698144517019,\"results\":\"88\",\"hashOfConfig\":\"60\"},{\"size\":1713,\"mtime\":1698143735814,\"results\":\"89\",\"hashOfConfig\":\"60\"},{\"size\":2090,\"mtime\":1697691593156,\"results\":\"90\",\"hashOfConfig\":\"91\"},{\"size\":381,\"mtime\":1698038999204,\"results\":\"92\",\"hashOfConfig\":\"60\"},{\"size\":3782,\"mtime\":1698143316547,\"results\":\"93\",\"hashOfConfig\":\"60\"},{\"size\":642,\"mtime\":1697097424806,\"results\":\"94\",\"hashOfConfig\":\"60\"},{\"size\":2332,\"mtime\":1698052575881,\"results\":\"95\",\"hashOfConfig\":\"60\"},{\"size\":1633,\"mtime\":1698144517017,\"results\":\"96\",\"hashOfConfig\":\"60\"},{\"size\":436,\"mtime\":1697097424804,\"results\":\"97\",\"hashOfConfig\":\"60\"},{\"size\":2417,\"mtime\":1697624654909,\"results\":\"98\",\"hashOfConfig\":\"60\"},{\"size\":1326,\"mtime\":1697097424829,\"results\":\"99\",\"hashOfConfig\":\"60\"},{\"size\":1441,\"mtime\":1697097424799,\"results\":\"100\",\"hashOfConfig\":\"60\"},{\"size\":5903,\"mtime\":1698144517024,\"results\":\"101\",\"hashOfConfig\":\"60\"},{\"size\":1055,\"mtime\":1697691593170,\"results\":\"102\",\"hashOfConfig\":\"77\"},{\"size\":6453,\"mtime\":1697691593146,\"results\":\"103\",\"hashOfConfig\":\"60\"},{\"size\":1078,\"mtime\":1697691593165,\"results\":\"104\",\"hashOfConfig\":\"60\"},{\"size\":691,\"mtime\":1697691593167,\"results\":\"105\",\"hashOfConfig\":\"60\"},{\"size\":1438,\"mtime\":1697691593168,\"results\":\"106\",\"hashOfConfig\":\"60\"},{\"size\":6687,\"mtime\":1698033743056,\"results\":\"107\",\"hashOfConfig\":\"60\"},{\"size\":728,\"mtime\":1697792750306,\"results\":\"108\",\"hashOfConfig\":\"60\"},{\"size\":2560,\"mtime\":1697792750304,\"results\":\"109\",\"hashOfConfig\":\"60\"},{\"size\":2666,\"mtime\":1698143316532,\"results\":\"110\",\"hashOfConfig\":\"60\"},{\"size\":2545,\"mtime\":1697792750307,\"results\":\"111\",\"hashOfConfig\":\"60\"},{\"size\":1650,\"mtime\":1698059373024,\"results\":\"112\",\"hashOfConfig\":\"60\"},{\"size\":3032,\"mtime\":1698038717405,\"results\":\"113\",\"hashOfConfig\":\"60\"},{\"size\":1926,\"mtime\":1698038717406,\"results\":\"114\",\"hashOfConfig\":\"60\"},{\"size\":6825,\"mtime\":1698139006960,\"results\":\"115\",\"hashOfConfig\":\"60\"},{\"size\":2236,\"mtime\":1698143316573,\"results\":\"116\",\"hashOfConfig\":\"60\"},{\"size\":2455,\"mtime\":1698143316549,\"results\":\"117\",\"hashOfConfig\":\"60\"},{\"size\":3798,\"mtime\":1698143316561,\"results\":\"118\",\"hashOfConfig\":\"60\"},{\"size\":4955,\"mtime\":1698143316564,\"results\":\"119\",\"hashOfConfig\":\"60\"},{\"filePath\":\"120\",\"messages\":\"121\",\"suppressedMessages\":\"122\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},\"1okf9q7\",{\"filePath\":\"123\",\"messages\":\"124\",\"suppressedMessages\":\"125\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":8,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"126\"},{\"filePath\":\"127\",\"messages\":\"128\",\"suppressedMessages\":\"129\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"130\",\"messages\":\"131\",\"suppressedMessages\":\"132\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":2,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"133\"},{\"filePath\":\"134\",\"messages\":\"135\",\"suppressedMessages\":\"136\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":6,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"137\"},{\"filePath\":\"138\",\"messages\":\"139\",\"suppressedMessages\":\"140\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":3,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"141\"},{\"filePath\":\"142\",\"messages\":\"143\",\"suppressedMessages\":\"144\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"145\",\"messages\":\"146\",\"suppressedMessages\":\"147\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":1,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"148\"},{\"filePath\":\"149\",\"messages\":\"150\",\"suppressedMessages\":\"151\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":7,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"152\"},{\"filePath\":\"153\",\"messages\":\"154\",\"suppressedMessages\":\"155\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"156\",\"messages\":\"157\",\"suppressedMessages\":\"158\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":10,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"159\"},{\"filePath\":\"160\",\"messages\":\"161\",\"suppressedMessages\":\"162\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":4,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"163\"},{\"filePath\":\"164\",\"messages\":\"165\",\"suppressedMessages\":\"166\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":5,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"167\"},{\"filePath\":\"168\",\"messages\":\"169\",\"suppressedMessages\":\"170\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"171\",\"messages\":\"172\",\"suppressedMessages\":\"173\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":12,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"174\"},{\"filePath\":\"175\",\"messages\":\"176\",\"suppressedMessages\":\"177\",\"errorCount\":1,\"fatalErrorCount\":0,\"warningCount\":4,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"178\"},{\"filePath\":\"179\",\"messages\":\"180\",\"suppressedMessages\":\"181\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},\"131ovsd\",{\"filePath\":\"182\",\"messages\":\"183\",\"suppressedMessages\":\"184\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":11,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"185\"},{\"filePath\":\"186\",\"messages\":\"187\",\"suppressedMessages\":\"188\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":3,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"189\"},{\"filePath\":\"190\",\"messages\":\"191\",\"suppressedMessages\":\"192\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":2,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"193\"},{\"filePath\":\"194\",\"messages\":\"195\",\"suppressedMessages\":\"196\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":6,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"197\"},{\"filePath\":\"198\",\"messages\":\"199\",\"suppressedMessages\":\"200\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":1,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"201\"},{\"filePath\":\"202\",\"messages\":\"203\",\"suppressedMessages\":\"204\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":10,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"205\"},{\"filePath\":\"206\",\"messages\":\"207\",\"suppressedMessages\":\"208\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":1,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"209\"},{\"filePath\":\"210\",\"messages\":\"211\",\"suppressedMessages\":\"212\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":4,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"213\"},{\"filePath\":\"214\",\"messages\":\"215\",\"suppressedMessages\":\"216\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":3,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"217\"},{\"filePath\":\"218\",\"messages\":\"219\",\"suppressedMessages\":\"220\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":32,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"221\"},{\"filePath\":\"222\",\"messages\":\"223\",\"suppressedMessages\":\"224\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"225\",\"messages\":\"226\",\"suppressedMessages\":\"227\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":9,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"228\"},{\"filePath\":\"229\",\"messages\":\"230\",\"suppressedMessages\":\"231\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":3,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":null},\"1u8wuzz\",{\"filePath\":\"232\",\"messages\":\"233\",\"suppressedMessages\":\"234\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"235\",\"messages\":\"236\",\"suppressedMessages\":\"237\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":1,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"238\"},{\"filePath\":\"239\",\"messages\":\"240\",\"suppressedMessages\":\"241\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":3,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"242\"},{\"filePath\":\"243\",\"messages\":\"244\",\"suppressedMessages\":\"245\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":4,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"246\"},{\"filePath\":\"247\",\"messages\":\"248\",\"suppressedMessages\":\"249\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":3,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"250\"},{\"filePath\":\"251\",\"messages\":\"252\",\"suppressedMessages\":\"253\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"254\",\"messages\":\"255\",\"suppressedMessages\":\"256\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":12,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"257\"},{\"filePath\":\"258\",\"messages\":\"259\",\"suppressedMessages\":\"260\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"261\",\"messages\":\"262\",\"suppressedMessages\":\"263\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"264\",\"messages\":\"265\",\"suppressedMessages\":\"266\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":4,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"267\"},{\"filePath\":\"268\",\"messages\":\"269\",\"suppressedMessages\":\"270\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":5,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":null},{\"filePath\":\"271\",\"messages\":\"272\",\"suppressedMessages\":\"273\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":2,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"274\"},{\"filePath\":\"275\",\"messages\":\"276\",\"suppressedMessages\":\"277\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":1,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"278\"},{\"filePath\":\"279\",\"messages\":\"280\",\"suppressedMessages\":\"281\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":2,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"282\"},{\"filePath\":\"283\",\"messages\":\"284\",\"suppressedMessages\":\"285\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"286\",\"messages\":\"287\",\"suppressedMessages\":\"288\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":8,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"289\"},{\"filePath\":\"290\",\"messages\":\"291\",\"suppressedMessages\":\"292\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":2,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"293\"},{\"filePath\":\"294\",\"messages\":\"295\",\"suppressedMessages\":\"296\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"297\",\"messages\":\"298\",\"suppressedMessages\":\"299\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":1,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"300\"},{\"filePath\":\"301\",\"messages\":\"302\",\"suppressedMessages\":\"303\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"304\",\"messages\":\"305\",\"suppressedMessages\":\"306\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":2,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"307\"},{\"filePath\":\"308\",\"messages\":\"309\",\"suppressedMessages\":\"310\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"311\",\"messages\":\"312\",\"suppressedMessages\":\"313\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":3,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"314\"},{\"filePath\":\"315\",\"messages\":\"316\",\"suppressedMessages\":\"317\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":7,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"318\"},{\"filePath\":\"319\",\"messages\":\"320\",\"suppressedMessages\":\"321\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":0,\"fixableErrorCount\":0,\"fixableWarningCount\":0},{\"filePath\":\"322\",\"messages\":\"323\",\"suppressedMessages\":\"324\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":1,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"325\"},{\"filePath\":\"326\",\"messages\":\"327\",\"suppressedMessages\":\"328\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":1,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"329\"},{\"filePath\":\"330\",\"messages\":\"331\",\"suppressedMessages\":\"332\",\"errorCount\":0,\"fatalErrorCount\":0,\"warningCount\":10,\"fixableErrorCount\":0,\"fixableWarningCount\":0,\"source\":\"333\"},\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\index.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\App.js\",[\"334\",\"335\",\"336\",\"337\",\"338\",\"339\",\"340\",\"341\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport axios, { formToJSON } from 'axios';\\r\\nimport './App.css';\\r\\nimport Header from './components/Common/Header';\\r\\nimport Footer from './components/Common/Footer';\\r\\nimport Home from './routes/Home';\\r\\nimport SideBar from './components/Common/SideBar';\\r\\nimport { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\\r\\nimport Test from './components/Test/Test';\\r\\nimport Test2 from './components/Test/test2';\\r\\nimport LoginPage from './components/Auth/LoginPage';\\r\\nimport RegisterPage from './components/Auth/RegisterPage';\\r\\nimport MenuList from './components/Menu/MenuList';\\r\\nimport MenuRegisterationForm from './components/Menu/MenuRegisterationForm';\\r\\nimport StoreList from './components/Market/StoreList';\\r\\nimport MarketDetailPage from './components/Market/MarketDetailPage';\\r\\nimport StoreInfoDetail from './components/Market/StoreInfoDetail';\\r\\nimport ReviewForm from './components/Review/ReviewForm';\\r\\nimport MyPage from './components/MyPage/MyPage';\\r\\nimport UserEditPage from './components/MyPage/UserEditPage';\\r\\nimport MyOrder from './components/MyPage/MyOrder';\\r\\nimport StoreItemDailyPrice from './components/StoreItemDailyPrice/StoreItemDailyPrice';\\r\\nimport UserProvider from './components/Auth/UserContext';\\r\\nimport StoreItemRegister from './components/MyPage/StoreItemRegister'\\r\\nimport Payment from './components/Pay/Pay';\\r\\nimport StoreRegisterPage from './components/MyPage/StoreRegisterPage';\\r\\n// import AdminPage from './components/MyPage/AdminPage';\\r\\nimport MenuEdit from './components/MyPage/MenuEdit';\\r\\nimport NoticeList from './components/Notice/NoticeList';\\r\\nimport NoticeDetail from './components/Notice/NoticeDetail';\\r\\nimport { useUser } from './components/Auth/UserContext';\\r\\nimport StoreMyPage from './components/MyPage/StoreItemRegister'; // StoreMyPage 컴포넌트 파일의 경로에 따라 수정\\r\\nimport { sendAxiosRequest } from './components/utility/common';\\r\\nimport StoreItemAdd from  './components/StoreItemDailyPrice/StoreItemAdd';\\r\\nimport NoticeRegisterationForm from  './components/Admin/NoticeRegisterationForm';\\r\\nimport AdminNoticeList from  './components/Admin/AdminNoticeList';\\r\\nimport AdminNoticeDetail from  './components/Admin/AdminNoticeDetail';\\r\\nimport OrderMenuList from './components/MyPage/OrderMenuList';\\r\\nimport StoreOrder from './components/MyPage/StoreOrder';\\r\\nimport MenuDetail from './components/MyPage/MenuDetail';\\r\\nimport StoreEditPage from './components/MyPage/StoreEdit';\\r\\n\\r\\n\\r\\nfunction App() {\\r\\n\\r\\n  const { user, login } = useUser();\\r\\n\\r\\n\\r\\n  // useEffect(() => {\\r\\n  // if (localStorage.getItem('memberEmail') !== null) {\\r\\n  // const saveUser = {\\r\\n  //   'memberEmail': localStorage.getItem('memberEmail'),\\r\\n  //   'memberPwd': localStorage.getItem('memberPwd')\\r\\n  // };\\r\\n\\r\\n  //   if (saveUser !== null) {\\r\\n  //     sendAxiosRequest(\\\"/api/member/login\\\", 'POST', formToJSON(saveUser), response => {\\r\\n  //       //   //   console.log(response.data);\\r\\n  //       console.log(localStorage.getItem('memberEmail'));\\r\\n  //       console.log(localStorage.getItem('memberPwd'));\\r\\n  //       // if (response.data.loginUser !== null) {\\r\\n  //         login(response.data.loginUser)\\r\\n  //       // }\\r\\n  //       // login(saveUser);\\r\\n  //       //     login(localStorage.getItem('data'));\\r\\n  //       //     // console.log(user);\\r\\n  //       //   // }, error => {\\r\\n  //         //     // console.log(error);\\r\\n  //       });\\r\\n  //     }\\r\\n  //   }\\r\\n  //   }, []);\\r\\n\\r\\n\\r\\n\\r\\n  return (\\r\\n    <Router>\\r\\n      <div className='App'>\\r\\n        {/* <div>{hello}</div> */}\\r\\n        <RoutingComponent />\\r\\n      </div>\\r\\n    </Router>\\r\\n  );\\r\\n\\r\\n}\\r\\n\\r\\nfunction RoutingComponent() {\\r\\n  const location = useLocation();\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      {location.pathname !== \\\"/login\\\" && location.pathname !== \\\"/register\\\" && <Header />}\\r\\n      <Routes>\\r\\n        <Route path=\\\"/login\\\" element={<LoginPage />} />\\r\\n        <Route path=\\\"/register\\\" element={<RegisterPage />} />\\r\\n        <Route path=\\\"/\\\" exact={true} element={<Home />} />\\r\\n        <Route path=\\\"/store/list\\\" element={<StoreList />} />\\r\\n        <Route path=\\\"/api/test\\\" element={<Test />} />\\r\\n        <Route path=\\\"/api/test2\\\" element={<Test2 />} />\\r\\n        <Route path=\\\"/menulist\\\" element={<MenuList />} />\\r\\n        <Route path=\\\"/reviewregister\\\" element={<ReviewForm />} />\\r\\n        <Route path=\\\"/market/detail\\\" element={<MarketDetailPage />} />\\r\\n        <Route path=\\\"/mypage\\\" element={<MyPage />} />\\r\\n        <Route path=\\\"/mypage/store/edit\\\" element={<StoreEditPage />} />\\r\\n        <Route path=\\\"/storeRegister\\\" element={<StoreRegisterPage />} />\\r\\n        <Route path=\\\"/useredit\\\" element={<UserEditPage />} />\\r\\n        <Route path=\\\"/menuEdit\\\" element={<MenuEdit />} />\\r\\n        <Route path=\\\"/my-orders\\\" element={<MyOrder />} />\\r\\n        <Route path=\\\"/StoreItemDailyPrice\\\" element={<StoreItemDailyPrice />} />\\r\\n        <Route path=\\\"/MenuRegisterationForm\\\" element={<MenuRegisterationForm />} />\\r\\n        <Route path=\\\"/notice/list\\\" element={<NoticeList />} />\\r\\n        <Route path=\\\"/notice/detail/:noticeNo\\\" element={<NoticeDetail />} />\\r\\n        <Route path=\\\"/storemypage\\\" element={<StoreMyPage />} />\\r\\n        <Route path=\\\"/storeItemRegister\\\" element={<StoreItemRegister />} />\\r\\n        <Route path=\\\"/StoreItemAdd\\\" element={<StoreItemAdd />} />\\r\\n        <Route path=\\\"/pay\\\" element={<Payment />} />\\r\\n        <Route path=\\\"/StoreInfoDetail\\\" element={<StoreInfoDetail />} />\\r\\n        <Route path=\\\"/menuDetail\\\" element={<MenuDetail />} />\\r\\n        <Route path=\\\"/admin/notice/register\\\" element={<NoticeRegisterationForm />} />\\r\\n        <Route path=\\\"/admin/notice/list\\\" element={<AdminNoticeList />} />\\r\\n        <Route path=\\\"/admin/notice/detail/:noticeNo\\\" element={<AdminNoticeDetail />} />\\r\\n        <Route path=\\\"/mypage/ordermenu/detail/:orderNo\\\" element={<OrderMenuList />} />\\r\\n        <Route path=\\\"/order/detail/:orderNo\\\" element={<OrderMenuList />} />\\r\\n        <Route path=\\\"/order-confirmation\\\" element={<StoreOrder />} />\\r\\n      </Routes>\\r\\n      {location.pathname !== \\\"/login\\\" && location.pathname !== \\\"/register\\\" && <SideBar />}\\r\\n      {location.pathname !== \\\"/login\\\" && location.pathname !== \\\"/register\\\" && <Footer />}\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\reportWebVitals.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Auth\\\\UserContext.js\",[\"342\",\"343\"],[],\"import { createContext, useContext, useState } from \\\"react\\\";\\r\\nimport { getAccessToken } from \\\"../utility/common\\\";\\r\\nimport jwtDecode from 'jwt-decode';\\r\\n\\r\\nconst UserContext = createContext();\\r\\n\\r\\nexport const useUser = () => {\\r\\n  return useContext(UserContext);\\r\\n};\\r\\n\\r\\nexport default function UserProvider({ children }) {\\r\\n  const [user, setUser] = useState(null);\\r\\n\\r\\n  const login = (userData) => {\\r\\n    // 로그인 로직을 구현\\r\\n    setUser(userData);\\r\\n  };\\r\\n\\r\\n  const logout = () => {\\r\\n    // 로그아웃 로직을 구현\\r\\n    setUser(null);\\r\\n  };\\r\\n\\r\\n\\r\\n  return (\\r\\n    <UserContext.Provider value={{ user, login, logout }}>\\r\\n      {children}\\r\\n    </UserContext.Provider>\\r\\n  );\\r\\n}\\r\\n\\r\\n\\r\\n// const Context = createContext({\\r\\n//     loggedUser: {\\r\\n//         username: '',\\r\\n//         email: '',\\r\\n//         first_name: '',\\r\\n//     },\\r\\n//     loggedIn: false,\\r\\n//     setLoggedUser: () => {},\\r\\n//     setLoggedIn: () => {}\\r\\n// });\\r\\n\\r\\n// export default Context;\\r\\n\\r\\n// const ContextProvider = ({children}) => {\\r\\n\\r\\n//   const setLoggedUser = (data) => {\\r\\n//       setState(prevState => (\\r\\n//           {\\r\\n//               ...prevState,\\r\\n//               loggedUser: data\\r\\n//           }\\r\\n//       ))\\r\\n//   }\\r\\n\\r\\n//   const setLoggedIn = () => {\\r\\n//       setState(prevState => (\\r\\n//           {\\r\\n//               ...prevState, \\r\\n//               loggedIn: !prevState.loggedIn\\r\\n//           }\\r\\n//       ))\\r\\n//   }\\r\\n\\r\\n//   const initialState = {\\r\\n//       loggedUser: {},\\r\\n//       loggedIn: false,\\r\\n//       setLoggedUser,\\r\\n//       setLoggedIn\\r\\n//   }\\r\\n\\r\\n//   const [state, setState] = useState(initialState);\\r\\n\\r\\n//   return (\\r\\n//       <Context.Provider value={state}>\\r\\n//           {children}\\r\\n//       </Context.Provider>\\r\\n//   )\\r\\n// }\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Auth\\\\LoginPage.js\",[\"344\",\"345\",\"346\",\"347\",\"348\",\"349\"],[],\"import * as React from 'react';\\r\\nimport Button from '@mui/material/Button';\\r\\nimport CssBaseline from '@mui/material/CssBaseline';\\r\\nimport TextField from '@mui/material/TextField';\\r\\nimport Box from '@mui/material/Box';\\r\\nimport Link from '@mui/material/Link';\\r\\nimport Paper from '@mui/material/Paper';\\r\\nimport Grid from '@mui/material/Grid';\\r\\nimport Typography from '@mui/material/Typography';\\r\\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\\r\\nimport { useNavigate } from 'react-router-dom';\\r\\nimport { formToJSON } from 'axios';\\r\\nimport { useState, useContext } from 'react';\\r\\nimport { useUser } from './UserContext';\\r\\nimport { isOpenNow, sendAxiosRequest, isTokenExpired } from '../utility/common';\\r\\nimport axios from 'axios';\\r\\nimport jwtDecode from 'jwt-decode';\\r\\n\\r\\n\\r\\n\\r\\nconst defaultTheme = createTheme();\\r\\n\\r\\nfunction LoginPage() {\\r\\n  const navigate = useNavigate();\\r\\n  const {user, login} = useUser();\\r\\n\\r\\n  const handleSubmit = (event) => {\\r\\n    event.preventDefault();\\r\\n    const data = new FormData(event.currentTarget);\\r\\n\\r\\n    const loginRequest = {\\r\\n      memberEmail: data.get('memberEmail'),\\r\\n      memberPwd: data.get('memberPwd')\\r\\n    };\\r\\n\\r\\n    sendAxiosRequest('/api/member/login', 'POST', loginRequest, response => {\\r\\n      const repDataList = response.data;\\r\\n      console.log('repDataList',repDataList);\\r\\n\\r\\n      if (repDataList) {\\r\\n        const accessToken = response.data.accessToken;\\r\\n        const refreshToken = response.data.refreshToken;\\r\\n        const loginUser = response.data.loginUser;\\r\\n        login(loginUser);\\r\\n        if (!isTokenExpired(accessToken) && !isTokenExpired(refreshToken)) {\\r\\n          sessionStorage.setItem('accessToken', accessToken);\\r\\n          localStorage.setItem('refreshToken', refreshToken);\\r\\n\\r\\n          const decodedAccessToken = jwtDecode(accessToken);\\r\\n          alert(\\\"'\\\" + decodedAccessToken.memberName + \\\"' 회원님 BLEU AUCTION에 오신 것을 환영합니다!\\\");\\r\\n          navigate('/');\\r\\n        }\\r\\n      }\\r\\n\\r\\n    }, error => console.log(error), 'application/json');\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <ThemeProvider theme={defaultTheme}>\\r\\n      <Grid container component=\\\"main\\\" sx={{ height: '100vh' }}>\\r\\n        <CssBaseline />\\r\\n        <Grid\\r\\n          item\\r\\n          xs={false}\\r\\n          sm={4}\\r\\n          md={7}\\r\\n          sx={{\\r\\n            backgroundImage: 'url(/images/login.png)',\\r\\n            backgroundRepeat: 'no-repeat',\\r\\n            backgroundColor: (t) =>\\r\\n              t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\\r\\n            backgroundSize: 'cover',\\r\\n            backgroundPosition: 'center',\\r\\n          }}\\r\\n        />\\r\\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\\r\\n          <Box\\r\\n            sx={{\\r\\n              my: 27,\\r\\n              mx: 4,\\r\\n              display: 'flex',\\r\\n              flexDirection: 'column',\\r\\n              alignItems: 'center',\\r\\n            }}\\r\\n          >\\r\\n\\r\\n            <Typography component=\\\"h1\\\" variant=\\\"h5\\\">\\r\\n              안녕하세요 블루옥션입니다.\\r\\n            </Typography>\\r\\n            <Box component=\\\"form\\\" sx={{ mt: 1 }} noValidate onSubmit={handleSubmit}>\\r\\n              <TextField\\r\\n                margin=\\\"normal\\\"\\r\\n                required\\r\\n                fullWidth\\r\\n                id=\\\"email\\\"\\r\\n                label=\\\"Email Address\\\"\\r\\n                name=\\\"memberEmail\\\"\\r\\n\\r\\n                autoComplete=\\\"email\\\"\\r\\n                autoFocus\\r\\n                InputProps={{ style: { borderRadius: '30px' } }}\\r\\n              />\\r\\n              <TextField\\r\\n                margin=\\\"normal\\\"\\r\\n                required\\r\\n                fullWidth\\r\\n                name=\\\"memberPwd\\\"\\r\\n\\r\\n                label=\\\"Password\\\"\\r\\n                type=\\\"password\\\"\\r\\n                id=\\\"password\\\"\\r\\n                autoComplete=\\\"current-password\\\"\\r\\n                InputProps={{ style: { borderRadius: '30px' } }}\\r\\n              />\\r\\n              <Button\\r\\n                type=\\\"submit\\\"\\r\\n                fullWidth\\r\\n                variant=\\\"contained\\\"\\r\\n                sx={{ mt: 3, mb: 2, borderRadius: '30px' }} // borderRadius 추가\\r\\n              >\\r\\n                Login\\r\\n              </Button>\\r\\n              <Button\\r\\n                type=\\\"submit\\\"\\r\\n                fullWidth\\r\\n                variant=\\\"contained\\\"\\r\\n                sx={{\\r\\n                  mt: 3,\\r\\n                  mb: 2,\\r\\n                  height: '40px', // 원하는 높이로 설정\\r\\n                  width: '100%', // LOGIN 버튼과 동일한 너비로 설정\\r\\n                  borderRadius: '30px',\\r\\n                  backgroundColor: '#FFEB00', // 카카오 노란색\\r\\n                  '&:hover': {\\r\\n                    backgroundColor: '#FFD600', // 노란색의 어두운 톤으로 hover 효과 추가\\r\\n                  },\\r\\n                }}\\r\\n              >\\r\\n                <img\\r\\n                  src=\\\"/images/kakao_login_medium_wide.png\\\" // 이미지 경로 수정\\r\\n                  alt=\\\"kakao-login\\\"\\r\\n                  style={{ height: '150%', width: '150%', objectFit: 'contain' }} // objectFit 속성 추가\\r\\n                />\\r\\n               </Button>\\r\\n                  <Grid container sx={{ mt: 2, justifyContent: 'flex-end' }}>\\r\\n                    <Grid item xs={6}>\\r\\n                      <Link href=\\\"/register\\\" variant=\\\"body2\\\">\\r\\n                        {\\\"회원가입\\\"}\\r\\n                      </Link>\\r\\n                    </Grid>\\r\\n                  </Grid>\\r\\n                </Box>\\r\\n              </Box>\\r\\n        </Grid>\\r\\n      </Grid>\\r\\n    </ThemeProvider>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default LoginPage;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Auth\\\\RegisterPage.js\",[\"350\",\"351\",\"352\"],[],\"import React, { useState } from 'react';\\r\\nimport { useNavigate } from 'react-router-dom';\\r\\nimport axios, { formToJSON } from 'axios';\\r\\nimport { isOpenNow, sendAxiosRequest } from '../utility/common';\\r\\n\\r\\n// import DaumPostcode from 'react-daum-postcode';\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nfunction RegisterPage() {\\r\\n\\r\\n  // const [showPostcode, setShowPostcode] = useState(false);\\r\\n\\r\\n  //   const handleAddress = (data) => {\\r\\n  //     handleChange({\\r\\n  //         target: {\\r\\n  //             name: \\\"zip\\\",\\r\\n  //             value: data.zonecode\\r\\n  //         }\\r\\n  //     });\\r\\n  //     handleChange({\\r\\n  //         target: {\\r\\n  //             name: \\\"address\\\",\\r\\n  //             value: data.address\\r\\n  //         }\\r\\n  //     });\\r\\n  //     setShowPostcode(false); // 주소 선택 후, 우편번호 찾기 창을 닫습니다.\\r\\n  // };\\r\\n\\r\\n  const useForm = (initialValues) => {\\r\\n    const [values, setValues] = useState(initialValues);  // values는 폼 컨트롤의 상태를 나타냄, initialValues로 초기 설정\\r\\n    const handleChange = (e) => {   //폼 컨트롤의 onChange 이벤트 핸들러\\r\\n      const { name, value } = e.target;\\r\\n      setValues({\\r\\n        ...values,\\r\\n        [name]: value,\\r\\n      });\\r\\n    };\\r\\n    return [values, handleChange];\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  // const [values, handleChange] = useForm({ //useForm은 초기 값 initialValues를 인수로 받음,  그 상태와 상태를 변경하는 함수를 반환하는 useForm 훅을 호출\\r\\n  //   email: '',\\r\\n  //   password: '',\\r\\n  //   name: '',\\r\\n  //   phone: '',\\r\\n  //   zip: '',\\r\\n  //   address: '',\\r\\n  //   detailAddress: '',\\r\\n  //   bank: '',\\r\\n  //   accountNumber: '',\\r\\n  //   accountType: '',\\r\\n  // });\\r\\n\\r\\n  const navigate = useNavigate();\\r\\n\\r\\n  // const requestData = { //객체는 폼에서 사용자가 입력한 데이터를 서버로 전송하기 위해 준비되는 데이터 구조\\r\\n  //   memberCategory: values.accountType,\\r\\n  //   memberEmail: values.email,      //values 객체의 email 속성 값을 requestData 객체의 email 속성에 할당\\r\\n  //   memberPwd: values.password,\\r\\n  //   memberName: values.name,\\r\\n  //   memberPhone: values.phone,\\r\\n  //   memberZipcode: values.zip,\\r\\n  //   memberAddr: values.address,\\r\\n  //   memberDetailAddr: values.detailAddress,\\r\\n  //   memberBank: values.bank,\\r\\n  //   memberAccount: values.accountNumber,\\r\\n  // };\\r\\n\\r\\n\\r\\n  const handleSubmit = async (e) => {\\r\\n    e.preventDefault();\\r\\n\\r\\n    let formData = new FormData(e.target);\\r\\n    let formObj = formToJSON(formData);\\r\\n    sendAxiosRequest('/api/member/signup', 'POST', formObj, response => {\\r\\n      console.log('응답값:', response.data);\\r\\n      alert('회원가입에 성공하셨습니다!');\\r\\n      navigate('/');\\r\\n    },\\r\\n      error => {\\r\\n        console.error('API 호출 중 에러 발생: ', error);\\r\\n        alert('회원가입에 실패하셨습니다!');\\r\\n      }\\r\\n    )\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div style={styles.background}>\\r\\n      <div style={styles.logoContainer}>\\r\\n        <img src=\\\"/images/logo.png\\\" alt=\\\"BLEU AUCTION\\\" style={styles.logo} />\\r\\n      </div>\\r\\n      <div style={styles.container}>\\r\\n        <form onSubmit={handleSubmit} style={styles.form}>\\r\\n          <input style={styles.input} type=\\\"text\\\" name=\\\"memberName\\\" placeholder=\\\"이름\\\" />\\r\\n          <input style={styles.input} type=\\\"email\\\" name=\\\"memberEmail\\\" placeholder=\\\"이메일\\\" />\\r\\n          <input style={styles.input} type=\\\"password\\\" name=\\\"memberPwd\\\" placeholder=\\\"비밀번호\\\" />\\r\\n          <input style={styles.input} type=\\\"text\\\" name=\\\"memberPhone\\\" placeholder=\\\"전화번호\\\" />\\r\\n          {/* {showPostcode && (\\r\\n                <DaumPostcode\\r\\n                    onComplete={handleAddress}\\r\\n                    autoClose={true}\\r\\n                />\\r\\n            )} */}\\r\\n          <input style={styles.input} type=\\\"text\\\" name=\\\"memberZipcode\\\" placeholder=\\\"우편번호\\\" />\\r\\n          {/* <button onClick={() => setShowPostcode(true)} style={{...styles.button, marginBottom: '10px'}}>우편번호 찾기</button> */}\\r\\n          <input style={styles.input} type=\\\"text\\\" name=\\\"memberAddr\\\" placeholder=\\\"기본주소\\\" />\\r\\n          <input style={styles.input} type=\\\"text\\\" name=\\\"memberDetailAddr\\\" placeholder=\\\"상세주소\\\" />\\r\\n          <input style={styles.input} type=\\\"text\\\" name=\\\"memberBacnk\\\" placeholder=\\\"은행\\\" />\\r\\n          <input style={styles.input} type=\\\"text\\\" name=\\\"memberAccount\\\" placeholder=\\\"계좌번호\\\" />\\r\\n          <div style={styles.accountTypeContainer}>\\r\\n            <label style={styles.accountTypeLabel}>\\r\\n              <input\\r\\n                type=\\\"radio\\\"\\r\\n                name=\\\"memberCategory\\\"\\r\\n                value=\\\"M\\\"\\r\\n                style={styles.accountTypeInput}\\r\\n              />\\r\\n              개인\\r\\n            </label>\\r\\n            <label style={styles.accountTypeLabel}>\\r\\n              <input\\r\\n                type=\\\"radio\\\"\\r\\n                name=\\\"memberCategory\\\"\\r\\n                value=\\\"S\\\"\\r\\n                style={styles.accountTypeInput}\\r\\n              />\\r\\n              기업\\r\\n            </label>\\r\\n          </div>\\r\\n          <button type=\\\"submit\\\" style={styles.submitButton}>회원 가입</button>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst styles = {\\r\\n  background: {\\r\\n    display: 'flex',\\r\\n    flexDirection: 'column',\\r\\n    justifyContent: 'center',\\r\\n    alignItems: 'center',\\r\\n    height: '100vh',\\r\\n    background: 'var(--Blue, linear-gradient(180deg, #0575E6 0%, #02298A 84.79%, #021B79 100%))',\\r\\n  },\\r\\n  logoContainer: {\\r\\n    marginBottom: '10px',\\r\\n  },\\r\\n  logo: {\\r\\n    width: '200px',\\r\\n  },\\r\\n  container: {\\r\\n    background: 'white',\\r\\n    padding: '20px',\\r\\n    borderRadius: '8px',\\r\\n    width: '400px',\\r\\n  },\\r\\n  form: {\\r\\n    display: 'flex',\\r\\n    flexDirection: 'column',\\r\\n  },\\r\\n  toggleButtons: {\\r\\n    display: 'flex',\\r\\n    justifyContent: 'center',\\r\\n    marginBottom: '20px',\\r\\n    borderRadius: '8px',\\r\\n  },\\r\\n  button: {\\r\\n    padding: '10px 20px',\\r\\n    cursor: 'pointer',\\r\\n    border: 'none',\\r\\n    backgroundColor: 'white',\\r\\n    borderRadius: '10px',\\r\\n  },\\r\\n  activeButton: {\\r\\n    padding: '10px 20px',\\r\\n    cursor: 'pointer',\\r\\n    border: 'none',\\r\\n    backgroundColor: 'lightgray',\\r\\n    borderRadius: '10px',\\r\\n  },\\r\\n  input: {\\r\\n    padding: '10px',\\r\\n    margin: '5px 0',\\r\\n    borderRadius: '8px',\\r\\n    border: '1px solid #ccc',\\r\\n    outline: 'none',\\r\\n  },\\r\\n  submitButton: {\\r\\n    padding: '10px 20px',\\r\\n    cursor: 'pointer',\\r\\n    backgroundColor: '#0575E6',\\r\\n    border: 'none',\\r\\n    borderRadius: '8px',\\r\\n    color: 'white',\\r\\n\\r\\n  },\\r\\n  accountTypeContainer: {\\r\\n    marginBottom: '10px',\\r\\n  },\\r\\n  accountTypeLabel: {\\r\\n    marginRight: '10px',\\r\\n    cursor: 'pointer',\\r\\n  },\\r\\n  accountTypeInput: {\\r\\n    marginRight: '5px',\\r\\n  },\\r\\n};\\r\\n\\r\\nexport default RegisterPage;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Menu\\\\MenuList.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Common\\\\SideBar.js\",[\"353\"],[],\"import React, { useState, useEffect } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport styles from './SideBar.module.css';\\r\\nimport { Link } from 'react-router-dom';\\r\\nimport Chat from '../Chat/Chat';\\r\\nimport OS from '../OS/OS';\\r\\n\\r\\nfunction SideBar() {\\r\\n\\r\\n    const [isRaysModalOpen, setIsRaysModalOpen] = useState(false);\\r\\n    const [isChatModalOpen, setIsChatModalOpen] = useState(false);\\r\\n    const [scrollPosition, setScrollPosition] = useState(window.pageYOffset);\\r\\n\\r\\n    const openRaysModal = () => {\\r\\n        setIsRaysModalOpen(true);\\r\\n    };\\r\\n\\r\\n    const closeRaysModal = () => {\\r\\n        setIsRaysModalOpen(false);\\r\\n    };\\r\\n\\r\\n    const toggleChatModal = () => {\\r\\n        setIsChatModalOpen(!isChatModalOpen);\\r\\n    };\\r\\n\\r\\n    useEffect(() => {\\r\\n        const handleScroll = () => {\\r\\n            setScrollPosition(window.pageYOffset);\\r\\n        };\\r\\n        window.addEventListener('scroll', handleScroll);\\r\\n        return () => {\\r\\n            window.removeEventListener('scroll', handleScroll);\\r\\n        };\\r\\n    }, []);\\r\\n\\r\\n    return (\\r\\n        <div\\r\\n            className={styles.sideBarBox}\\r\\n            style={{ top: `${200 + scrollPosition}px` }} // 여기서 움직임을 처리합니다.\\r\\n        >\\r\\n            <Link to=\\\"/StoreItemAdd\\\">등록</Link>\\r\\n            <Link to=\\\"#\\\" onClick={openRaysModal}>\\r\\n                오늘의 <br />방사능\\r\\n            </Link>\\r\\n            <Link to=\\\"#\\\" onClick={toggleChatModal}>\\r\\n                챗봇\\r\\n            </Link>\\r\\n            {isRaysModalOpen && <OS closeModal={closeRaysModal} />}\\r\\n            {isChatModalOpen && <Chat closeModal={toggleChatModal} />}\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\n\\r\\nexport default SideBar;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Common\\\\Header.js\",[\"354\",\"355\",\"356\",\"357\",\"358\",\"359\",\"360\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport { axios, formToJSON } from 'axios';\\r\\nimport styles from './Header.module.css';\\r\\nimport { Link } from 'react-router-dom';\\r\\nimport { useUser } from '../Auth/UserContext';\\r\\nimport {\\r\\n  redirectLogin,\\r\\n  getAccessToken,\\r\\n  getLoginUserInfo,\\r\\n  logout,\\r\\n  accessTokenRefresh,\\r\\n  isNullUndefinedOrEmpty,\\r\\n  mainUrl,\\r\\n  isTokenExpired\\r\\n} from '../utility/common';\\r\\nimport jwtDecode from 'jwt-decode';\\r\\n\\r\\n\\r\\nfunction Header() {\\r\\n  const accessToken = sessionStorage.getItem('accessToken');\\r\\n  const refreshToken = localStorage.getItem('refreshToken');\\r\\n  const decodedAccToken = isTokenExpired(accessToken) ? null : jwtDecode(accessToken);\\r\\n  const decodedRefToken = isTokenExpired(refreshToken) ? null : jwtDecode(refreshToken);\\r\\n  const currentURL = window.location.href;\\r\\n  const [tokenMember, setTokenMember] = useState(accessToken);\\r\\n\\r\\n  console.log('Header.js => accessToken 디코딩값 : ', decodedAccToken);\\r\\n  console.log('Header.js => refreshToken 디코딩값 : ', decodedRefToken);\\r\\n  // console.log('(currentURL.replace(mainUrl)', currentURL.replace(mainUrl, ''));\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (isTokenExpired(accessToken)) { // accessToken이 유효하지 않은경우\\r\\n      console.log('Header.js => 엑세스 토큰 만료에 따른 재발급!');\\r\\n      console.log('accessTokenRefresh(): ', accessTokenRefresh()); // refreshsToken으로 accessToken 재발급\\r\\n\\r\\n    } else if (isTokenExpired(accessToken) && isTokenExpired(refreshToken)) { // accessToken 과 refreshsToken이 모두 유효하지 않은경우\\r\\n      console.log('Header.js => accessToken (X) && refreshToken (X)');\\r\\n      redirectLogin(); // 로그인 필요 => 로그인 시 refreshsToken으로 accessToken 재발급\\r\\n    } else { // 둘다 유효하거나 accessToken만 유효한 경우\\r\\n      console.log('Header.js => accessToken만 유효 OR accessToken과 refreshToken 모두 유효');\\r\\n      setTokenMember(getAccessToken('d')); //엑세스토큰 디코딩 한 값 으로 tokenMember 객체 초기화\\r\\n    }\\r\\n  }, [])\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <div className={styles.headerBox}>\\r\\n        <div className={styles.headerTop}>\\r\\n          <Link to=\\\"/\\\" id={styles.headerTitle}>BLEU AUCTION</Link>\\r\\n          <form className={styles.headerSearchForm}>\\r\\n            <input className={styles.headerSearchBox} type='text'\\r\\n              placeholder='검색어를 입력하세요.'></input>\\r\\n            <button id={styles.searchBtn} type=\\\"submit\\\"></button>\\r\\n          </form>\\r\\n          {isNullUndefinedOrEmpty(tokenMember) ? (\\r\\n            <>\\r\\n              <Link to='/mypage'>{tokenMember.memberName}님 환영합니다!</Link>\\r\\n              <Link onClick={logout}>로그아웃</Link>\\r\\n            </>\\r\\n          ) : (\\r\\n            <>\\r\\n              <Link to='/login'>로그인</Link>\\r\\n              <Link to='/register'>회원가입</Link>\\r\\n            </>\\r\\n          )}\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <div className={styles.headerBottom}>\\r\\n          <Link to='/'>추천</Link>\\r\\n          <Link to='/store/list'>시장</Link>\\r\\n          <Link to='/StoreItemDailyPrice'>시세</Link>\\r\\n          <Link to='/notice/list'>공지사항</Link>\\r\\n        </div>\\r\\n        <hr></hr>\\r\\n      </div>\\r\\n      <div className={styles.hidden_block}></div>\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default Header;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Test\\\\Test.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\routes\\\\Home.js\",[\"361\",\"362\",\"363\",\"364\",\"365\",\"366\",\"367\",\"368\",\"369\",\"370\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport Announce from '../components/MainPage/Announce';\\r\\nimport StoreListItem from '../components/Market/StoreListItem';\\r\\nimport StoreHome from '../components/StoreHome';\\r\\nimport { Routes, Route } from 'react-router-dom';\\r\\nimport { accessTokenRefresh, redirectLogin, isNullUndefinedOrEmpty, sendAxiosRequest } from '../components/utility/common';\\r\\nimport { accordionSummaryClasses } from '@mui/material';\\r\\n\\r\\nfunction Home() {\\r\\n\\r\\n  const [stores, setStores] = useState([]);\\r\\n  const [pageRowCount, setPageRowCount] = useState([6]);\\r\\n  const accessToken = sessionStorage.getItem('accessToken');\\r\\n\\r\\n  /* 토큰 들고 요청 예시 */\\r\\n  // useEffect(() => {\\r\\n  //   if (isNullUndefinedOrEmpty(accessToken)) {   // AccessToken이 있을 때만 요청 \\r\\n\\r\\n  //     // 요청 헤더에 엑세스 토큰 추가\\r\\n  //     const config = {\\r\\n  //       headers: {\\r\\n  //         'Authorization': `Bearer ${accessToken}`\\r\\n  //       }\\r\\n  //     };\\r\\n\\r\\n  //     console.log('Home.js headers: ', config);\\r\\n\\r\\n  //     axios.get(`/api/store/list?pageLowCount=${pageRowCount}`, config)\\r\\n  //       .then(response => {\\r\\n  //         console.log('response.data: ', response.data);\\r\\n  //         setStores(response.data);\\r\\n  //       })\\r\\n  //       .catch(error => {\\r\\n  //         const errorData = error.response.data;\\r\\n  //         console.log('errorData: ', errorData);\\r\\n  //         if (errorData === 'E') { // 토큰이 있으나 만료\\r\\n  //           console.log('여기야');\\r\\n  //           accessTokenRefresh();\\r\\n  //         } else if (errorData === 'I') { // 토큰이 아예없거나 유효하지 않은 토큰\\r\\n  //           redirectLogin();\\r\\n  //         }\\r\\n  //       });\\r\\n  //   }\\r\\n  // }, [accessToken]); // accessToken이 변경될 때만 실행\\r\\n\\r\\n  useEffect(() => {\\r\\n    sendAxiosRequest(`/api/store/list?pageLowCount=${pageRowCount}`, 'GET', null, response => {\\r\\n      console.log('/api/store/list => response.data: ' + response.data);\\r\\n      if (isNullUndefinedOrEmpty(response.data)) {\\r\\n        setStores(response.data);\\r\\n      }\\r\\n    }, error => console.log(error), null, 'UA');\\r\\n\\r\\n  }, []);\\r\\n\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <Announce />\\r\\n      {stores && (\\r\\n        <>\\r\\n          <StoreHome stores={stores} />\\r\\n          <button onClick={() => { console.log(stores); window.sessionStorage.getItem(\\\"memberNo\\\") }}>더보기-></button>\\r\\n        </>\\r\\n      )}\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default Home;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Common\\\\Footer.js\",[\"371\",\"372\",\"373\",\"374\"],[],\"import React, {useEffect, useState} from 'react';\\r\\nimport axios from 'axios';\\r\\nimport styles from './Footer.module.css';\\r\\n\\r\\n\\r\\nfunction Footer() {\\r\\n  return (\\r\\n    <div className={styles.footerBox}>\\r\\n      <img src='/images/LogoPage.png' />\\r\\n    </div>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default Footer;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Menu\\\\MenuRegisterationForm.js\",[\"375\",\"376\",\"377\",\"378\",\"379\"],[],\"import React, { useState } from 'react';\\r\\nimport { useNavigate } from 'react-router-dom';\\r\\nimport axios, { formToJSON } from 'axios';\\r\\nimport { sendAxiosRequest } from '../utility/common';\\r\\nimport './MenuRegistrationForm.css';\\r\\n\\r\\n\\r\\nfunction MenuRegisterationForm() {\\r\\n  const [menu, setMenu] = useState({\\r\\n    menuImage: null,\\r\\n    menuName: '',\\r\\n    menuSize: '',\\r\\n    menuPrice: '',\\r\\n    menuContent: '',\\r\\n  });\\r\\n\\r\\n  const [previewImage, setPreviewImage] = useState(null); // 이미지 미리보기 URL\\r\\n\\r\\n  const handleImageChange = (e) => {\\r\\n    const file = e.target.files[0];\\r\\n    if (!file) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    const reader = new FileReader();\\r\\n    reader.onloadend = () => {\\r\\n      // 이미지 파일 데이터를 상태에 저장하고 미리보기 설정\\r\\n      setMenu({ ...menu, menuImage: file });\\r\\n      setPreviewImage(reader.result);\\r\\n    };\\r\\n    reader.readAsDataURL(file);\\r\\n  };\\r\\n\\r\\n  const handleChange = (e) => {\\r\\n    const { name, value } = e.target;\\r\\n    setMenu({ ...menu, [name]: value });\\r\\n  };\\r\\n\\r\\n\\r\\n  const navigate = useNavigate();\\r\\n\\r\\n  const handleSubmit = (e) => {\\r\\n    e.preventDefault();\\r\\n\\r\\n    let formData = new FormData(e.target);\\r\\n    let formObj = formToJSON(formData);\\r\\n    sendAxiosRequest('/api/menu/new', 'POST', formObj, response => {\\r\\n      console.log('메뉴 응답값:', response.data);\\r\\n      alert('메뉴등록에 성공하셨습니다!');\\r\\n      navigate('/');\\r\\n    },\\r\\n      error => {\\r\\n        console.error('API 호출 중 에러 발생: ', error);\\r\\n        alert('메뉴등록에 실패하셨습니다!');\\r\\n      }\\r\\n    )\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    // <div className=\\\"container\\\">\\r\\n    //   <form onSubmit={handleSubmit} className=\\\"form\\\">\\r\\n    //   <h2>메뉴 등록</h2>\\r\\n    //     <div>\\r\\n    //       <label>메뉴 이미지:</label>\\r\\n    //       <input className=\\\"input\\\" type=\\\"file\\\" onChange={handleImageChange} />\\r\\n    //       {previewImage && (\\r\\n    //         <div>\\r\\n    //           <h3>이미지 미리보기:</h3>\\r\\n    //           <img src={previewImage} alt=\\\"미리보기\\\" style={{ height: '100px' }} /> {/* 미리보기 이미지 크기는 조절 가능 */}\\r\\n    //         </div>\\r\\n    //       )}\\r\\n    //     </div>\\r\\n    //     <div>\\r\\n    //       <label>메뉴 이름:</label>\\r\\n    //       <input className=\\\"input\\\" type=\\\"text\\\" name=\\\"menuName\\\" value={menu.menuName} onChange={handleChange} />\\r\\n    //     </div>\\r\\n    //     <div>\\r\\n    //       <label>메뉴 사이즈:</label>\\r\\n    //       <select \\r\\n    //         name=\\\"menuSize\\\" \\r\\n    //         value={menu.menuSize} \\r\\n    //         onChange={handleChange} \\r\\n    //         className=\\\"input\\\"\\r\\n    //       >\\r\\n    //         <option value=\\\"\\\">-- 선택 --</option>\\r\\n    //         <option value=\\\"S\\\">소 (S)</option>\\r\\n    //         <option value=\\\"M\\\">중 (M)</option>\\r\\n    //         <option value=\\\"L\\\">대 (L)</option>\\r\\n    //       </select>        \\r\\n    //       </div>\\r\\n    //     <div>\\r\\n    //       <label>메뉴 가격:</label>\\r\\n    //       <input className=\\\"input\\\" type=\\\"number\\\" name=\\\"menuPrice\\\" value={menu.menuPrice} onChange={handleChange} />\\r\\n    //     </div>\\r\\n    //     <div>\\r\\n    //       <label>메뉴 설명:</label>\\r\\n    //       <textarea name=\\\"menuContent\\\" value={menu.menuContent} onChange={handleChange} />\\r\\n    //     </div>\\r\\n    //     <button type=\\\"submit\\\" className=\\\"submitButton\\\">메뉴 등록</button>\\r\\n    //   </form>\\r\\n    // </div>\\r\\n    <div class=\\\"container\\\">\\r\\n    <form action=\\\"/submit-menu\\\" method=\\\"post\\\" enctype=\\\"multipart/form-data\\\" class=\\\"form\\\"> \\r\\n        <h2>메뉴 등록</h2>\\r\\n        \\r\\n        <div class=\\\"input-group\\\">\\r\\n            <label for=\\\"menuImage\\\">메뉴 이미지</label>\\r\\n            <input class=\\\"input\\\" type=\\\"file\\\" id=\\\"menuImage\\\" name=\\\"menuImage\\\" placeholder=\\\"메뉴 이미지\\\"/>\\r\\n           \\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            \\r\\n            <input class=\\\"input\\\" type=\\\"text\\\" id=\\\"menuName\\\" name=\\\"menuName\\\" placeholder=\\\"메뉴이름\\\"/>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n\\r\\n            <select class=\\\"input\\\" id=\\\"menuSize\\\" name=\\\"menuSize\\\">\\r\\n                <option value=\\\"\\\">-- 메뉴 사이즈 --</option>\\r\\n                <option value=\\\"S\\\">소 (S)</option>\\r\\n                <option value=\\\"M\\\">중 (M)</option>\\r\\n                <option value=\\\"L\\\">대 (L)</option>\\r\\n            </select>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <input class=\\\"input\\\" type=\\\"number\\\" id=\\\"menuPrice\\\" name=\\\"menuPrice\\\" placeholder=\\\"메뉴가격\\\"/>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"input-group\\\">\\r\\n            <textarea class=\\\"input\\\" id=\\\"menuContent\\\" name=\\\"menuContent\\\" placeholder=\\\"메뉴설명\\\"></textarea>\\r\\n        </div>\\r\\n        \\r\\n        <button type=\\\"submit\\\" class=\\\"submitButton\\\">메뉴 등록</button>\\r\\n    </form>\\r\\n</div>\\r\\n  );\\r\\n}\\r\\n\\r\\n// const styles = {\\r\\n//   container: {\\r\\n//     display: 'flex',\\r\\n//     justifyContent: 'center',\\r\\n//     alignItems: 'center',\\r\\n//     height: '30vh',\\r\\n//   },\\r\\n//   form: {\\r\\n//     display: 'flex',\\r\\n//     flexDirection: 'column',\\r\\n//     alignItems: 'center', // 폼 내용을 중앙 정렬합니다.\\r\\n//     padding: '20px',  // 내부 패딩을 추가합니다.\\r\\n//     borderRadius: '12px',  // 모서리를 둥글게 합니다.\\r\\n//     boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)', // 약간의 그림자 효과를 추가합니다.\\r\\n//     background: 'white', // 배경색을 흰색으로 설정합니다.\\r\\n//     width: '800px', \\r\\n//   },\\r\\n//   input: {\\r\\n//     padding: '10px',\\r\\n//     margin: '5px 0',\\r\\n//     borderRadius: '6px',\\r\\n//     border: '1px solid #ccc',\\r\\n//     outline: 'none',\\r\\n//     width: '300px', \\r\\n//   },\\r\\n//   submitButton: {\\r\\n//     padding: '10px 20px',\\r\\n//     cursor: 'pointer',\\r\\n//     backgroundColor: '#0575E6',\\r\\n//     border: 'none',\\r\\n//     borderRadius: '8px',\\r\\n//     color: 'white',\\r\\n//   },\\r\\n// }\\r\\n\\r\\n\\r\\nexport default MenuRegisterationForm;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\TabBar.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\StoreList.js\",[\"380\",\"381\",\"382\",\"383\",\"384\",\"385\",\"386\",\"387\",\"388\",\"389\",\"390\",\"391\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport Announce from '../MainPage/Announce';\\r\\nimport Coupon from '../MainPage/Announce';\\r\\nimport Category from '../MainPage/Category';\\r\\nimport StoreListItem from './StoreListItem';\\r\\nimport StoreHome from '../StoreHome';\\r\\nimport { Routes, Route } from 'react-router-dom';\\r\\nimport { isOpenNow, sendAxiosRequest, scrollMoveTop, getAccessToken, isTokenExpired } from '../utility/common';\\r\\nimport styles from './StoreList.module.css'\\r\\nimport jwtDecode from 'jwt-decode';\\r\\n\\r\\nfunction StoreList() {\\r\\n  const pageLowCount = 3;\\r\\n  let [startPageNo, setStartPageNo] = useState(0);\\r\\n  let [storeList, setStoreList] = useState([]);\\r\\n  let [newAddLength, setNewAddLength] = useState(pageLowCount);\\r\\n  const accessToken = sessionStorage.getItem('accessToken');\\r\\n\\r\\n  useEffect(() => {\\r\\n    sendAxiosRequest(`/api/store/list`, 'GET', null, response => {\\r\\n      console.log('/api/store/list의 응답값 => ', response.data);\\r\\n      setStoreList(response.data);\\r\\n      setNewAddLength(response.data.length);\\r\\n      setStartPageNo(Math.floor(newAddLength / pageLowCount));\\r\\n    }, error => console.log(error), null, accessToken);\\r\\n  }, []);\\r\\n\\r\\n\\r\\n  useEffect(() => {\\r\\n    const handleScroll = () => {\\r\\n      console.log(newAddLength);\\r\\n      if (newAddLength < pageLowCount) {\\r\\n        return;\\r\\n      }\\r\\n      if (\\r\\n        window.innerHeight + document.documentElement.scrollTop >=\\r\\n        document.documentElement.scrollHeight - 100\\r\\n      ) {\\r\\n\\r\\n        console.log(\\\"스크롤 이벤트 핸들러 작동\\\");\\r\\n        sendAxiosRequest(`/api/store/list?startPage=${startPageNo}`, 'GET', null, response => {\\r\\n          console.log(`/api/store/list?startPage=${startPageNo}의 응답값 => `, response.data);\\r\\n          let addReviewList = response.data;\\r\\n          setNewAddLength(addReviewList.length);\\r\\n          let newReviewList = [...storeList, ...addReviewList];\\r\\n          setStartPageNo(Math.floor(newReviewList.length / pageLowCount));\\r\\n          setStoreList(newReviewList);\\r\\n        }, error => console.log(error), null, accessToken)\\r\\n      }\\r\\n    };\\r\\n    window.addEventListener('scroll', handleScroll);\\r\\n    return () => {\\r\\n      window.removeEventListener('scroll', handleScroll);\\r\\n    }\\r\\n  }, [startPageNo, storeList]);\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <Announce />\\r\\n      <div className={styles.storeListBox}>\\r\\n        {storeList.map((store, index) => (\\r\\n          <StoreListItem key={index} data={store} />\\r\\n        ))}\\r\\n      </div>\\r\\n      <div id=\\\"topBtnDiv\\\" onClick={scrollMoveTop}>↑</div>\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default StoreList;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\MarketDetailPage.js\",[\"392\",\"393\",\"394\",\"395\",\"396\"],[],\"import React, { useState } from 'react';\\r\\nimport TabBar from './TabBar';\\r\\nimport MenuList from '../Menu/MenuList';\\r\\nimport StoreInfoDetail from './StoreInfoDetail';\\r\\nimport Button from '../MainPage/Button';\\r\\nimport StoreInfo from './StoreInfo';\\r\\nimport ReviewForm from '../Review/ReviewForm';\\r\\nimport { useEffect } from 'react';\\r\\nimport { useLocation } from 'react-router-dom';\\r\\nimport {getAccessToken, sendAxiosRequest} from '../utility/common';\\r\\nimport { MenuItem } from '@mui/material';\\r\\nimport OrderModal from './OrderModal';\\r\\nimport { useUser } from '../Auth/UserContext';\\r\\nimport jwtDecode from \\\"jwt-decode\\\";\\r\\n\\r\\n\\r\\nfunction MarketDetailPage() {\\r\\n  let acc = sessionStorage.getItem('accessToken');\\r\\n  jwtDecode(acc);\\r\\n\\r\\n  const [activeTab, setActiveTab] = useState('info');\\r\\n  const [modal, setModal] = useState(false);\\r\\n  const [menuData, setMenuData] = useState([]); // 메뉴 데이터를 저장할 상태\\r\\n  const [storeDetail, setStoreDetail] = useState(null); // 처음에는 정보가 없으므로 null로 초기화합니다.\\r\\n\\r\\n\\r\\n  const location = useLocation(); // 추가된 부분\\r\\n  const store = location.state; // 추가된 부분\\r\\n\\r\\n\\r\\n  const storeInfo = {\\r\\n    image: '/images/storeimage.png',\\r\\n    name: '대원수산',\\r\\n    location: '서울특별시 동작구 노들로 674 노량진수산시장 , 2층 활어 2-15호 강변상회',\\r\\n    hours: '월요일 (오늘) 09:00 ~ 21:00',\\r\\n    phone: '02-1234-5678',\\r\\n  };\\r\\n\\r\\n\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (store && store.storeNo) {\\r\\n      // 상점 번호가 있는 경우에만 요청을 실행합니다.\\r\\n      sendAxiosRequest(`/api/menu/${store.storeNo}`, 'GET', null, response => {\\r\\n        if (response.data && response.data.length > 0) {\\r\\n          console.log(response.data);\\r\\n          setMenuData(response.data.map((menu) => ({\\r\\n            ...menu,\\r\\n            count: 0\\r\\n          }))); // 받아온 데이터로 상태를 업데이트합니다.\\r\\n          console.log(menuData);\\r\\n        }\\r\\n      }, error => {\\r\\n        console.error(\\\"An error occurred while fetching the menus:\\\", error);\\r\\n      }, null, accessToken);\\r\\n    }\\r\\n  }, [])\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  // 가게 정보 및 메뉴 정보를 불러오는 부분\\r\\n  useEffect(() => {\\r\\n    if (store && store.storeNo) {\\r\\n      // 가게 정보를 불러오는 API 요청\\r\\n      sendAxiosRequest(`/api/store/${store.storeNo}`, 'GET', null, response => {\\r\\n        console.log(\\\"Store details fetched:\\\", response.data);\\r\\n        setStoreDetail(response.data); // 받아온 데이터로 상태를 업데이트합니다.\\r\\n      }, error => {\\r\\n        console.error(\\\"An error occurred while fetching the store details:\\\", error);\\r\\n      });\\r\\n\\r\\n      // 메뉴 정보를 불러오는 API 요청 (기존 로직 유지)\\r\\n      // ... (기존 메뉴 정보 요청 코드)\\r\\n    }\\r\\n  }, [store]); // store가 변경될 때마다 이 훅을 재실행합니다.\\r\\n\\r\\n\\r\\n  const handleOrderClick = () => {\\r\\n    // alert('주문하기 버튼 클릭!');\\r\\n    setModal(true);\\r\\n    console.log(modal);\\r\\n  };\\r\\n\\r\\n  const closeModal = () => {\\r\\n    setModal(false);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <div style={infoContainerStyle}>\\r\\n      <StoreInfo storeInfo={storeInfo} store={store} />\\r\\n      </div>\\r\\n      <div style={tabContainerStyle}>\\r\\n        <TabBar activeTab={activeTab} onTabClick={setActiveTab} />\\r\\n        {activeTab === 'menu' && <Button onClick={handleOrderClick} buttonText=\\\"주문하기\\\" />}\\r\\n        <OrderModal store={store} menus={menuData} isOpen={modal} onClose={closeModal} setMenuData={setMenuData} />\\r\\n      </div>\\r\\n      {activeTab === 'info' && <StoreInfoDetail storeDetail={storeDetail}/>}\\r\\n      {activeTab === 'menu' && <MenuList menus={menuData}/>}\\r\\n      {activeTab === 'review' && <ReviewForm  store={store}/>}\\r\\n    </div>\\r\\n\\r\\n  );\\r\\n}\\r\\n\\r\\nconst infoContainerStyle = {\\r\\n  marginBottom: '0px', // 예시: 아래쪽 마진을 추가하여 공간 생성\\r\\n};\\r\\n\\r\\nconst tabContainerStyle = {\\r\\n  display: 'flex',\\r\\n  flexDirection: 'column',\\r\\n  alignItems: 'center'\\r\\n};\\r\\n\\r\\n\\r\\nexport default MarketDetailPage;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\StoreMyPage.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\StoreItemRegister.js\",[\"397\",\"398\",\"399\",\"400\",\"401\",\"402\",\"403\",\"404\",\"405\",\"406\",\"407\"],[],\"import '../utility/Common.css';\\r\\nimport React, { useState, useEffect } from 'react';\\r\\nimport { Form, Card, Button } from 'react-bootstrap';\\r\\nimport { json, useNavigate } from 'react-router-dom';\\r\\nimport axios, { formToJSON } from 'axios';\\r\\nimport {\\r\\n  sendAxiosRequest,\\r\\n  addEventToElements,\\r\\n  removeEventToElements,\\r\\n  isTokenExpired, getAccessToken, isNullUndefinedOrEmpty, isNotNullOrNonEmpty\\r\\n} from '../utility/common';\\r\\nimport { useUser } from '../Auth/UserContext';\\r\\nimport jwtDecode from \\\"jwt-decode\\\";\\r\\n\\r\\nfunction formatNumber(number) {\\r\\n  return number.toLocaleString();\\r\\n}\\r\\n\\r\\nfunction updateItemNames() {\\r\\n  const itemCodeSelect = document.getElementById(\\\"itemCode\\\");\\r\\n  const itemNameSelect = document.getElementById(\\\"itemName\\\");\\r\\n\\r\\n  const selectedValue = itemCodeSelect.value;\\r\\n  const itemNames = itemNameSelect;\\r\\n\\r\\n  const options = {\\r\\n    'N': ['품목구분 항목을 먼저 선택해주세요.'],\\r\\n    'S': ['광어', '우럭', '도미', '방어', '전복', '참치', '연어', '가리비', '전갱이'],\\r\\n    'F': ['광어', '우럭', '도미', '방어', '전복', '참치', '연어', '가리비', '전갱이'],\\r\\n    'C': ['새우'],\\r\\n    'M': ['가리비', '오징어'],\\r\\n    'E': ['기타']\\r\\n  };\\r\\n\\r\\n  itemNames.innerHTML = '';\\r\\n  options[selectedValue].forEach(fishName => {\\r\\n    const option = document.createElement('option');\\r\\n    option.value = fishName;\\r\\n    option.textContent = fishName;\\r\\n    itemNames.appendChild(option);\\r\\n  });\\r\\n}\\r\\n\\r\\nconst codeToTextMap = {\\r\\n  'ES': '동해',\\r\\n  'WS': '서해',\\r\\n  'SS': '남해',\\r\\n  'JJ': '제주',\\r\\n  'WD': '완도',\\r\\n  'JP': '일본',\\r\\n  'CN': '중국',\\r\\n  'RU': '러시아',\\r\\n  'NW': '노르웨이',\\r\\n  'ET': '기타'\\r\\n};\\r\\n\\r\\n\\r\\nfunction updateOriginStatus() {\\r\\n  const originStatusSelects = document.querySelectorAll(\\\"[name=originStatus]\\\");\\r\\n  const originPlaceStatusSelect = document.getElementById(\\\"originPlaceStatus\\\");\\r\\n\\r\\n  let selectedValue;\\r\\n  originStatusSelects.forEach(input => {\\r\\n    if (input.checked) {\\r\\n      selectedValue = input.value;\\r\\n    }\\r\\n  })\\r\\n\\r\\n  const originPlaceNames = originPlaceStatusSelect;\\r\\n\\r\\n  const options = {\\r\\n    'D': ['ES', 'WS', 'SS', 'JJ', 'WD', 'ET'],\\r\\n    'I': ['JP', 'CN', 'RU', 'NW', 'ET']\\r\\n  };\\r\\n\\r\\n  originPlaceNames.innerHTML = '';\\r\\n  options[selectedValue].forEach(regionCode => {\\r\\n    const option = document.createElement('option');\\r\\n    option.value = regionCode;\\r\\n    console.log(regionCode);\\r\\n    option.textContent = codeToTextMap[regionCode] || regionCode;\\r\\n    originPlaceNames.appendChild(option);\\r\\n  });\\r\\n}\\r\\n\\r\\n\\r\\nfunction insertSidp(tokenMember) {\\r\\n  let form = document.getElementById('sidpForm');\\r\\n  let formData = new FormData(form);\\r\\n  let jsonObj = formToJSON(formData);\\r\\n  jsonObj.dailyPrice = formatNumber(jsonObj.dailyPrice).replaceAll(',', '');\\r\\n  console.log('jsonObj: ', jsonObj);\\r\\n  sendAxiosRequest('api/sidp/add', 'POST', jsonObj, response => {\\r\\n    if (isNotNullOrNonEmpty(response.data)) {\\r\\n      console.log('response.data: ', response.data);\\r\\n      alert('품목 시세를 성공적으로 등록하였습니다.');\\r\\n      window.location.reload();\\r\\n    } else {\\r\\n      alert('품목 등록에 실패하였습니다. 잠시후 다시 시도해주세요!');\\r\\n    }\\r\\n\\r\\n\\r\\n  }, erorr => console.log(console.log(erorr)), null, tokenMember);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nfunction StoreItemRegister() {\\r\\n  const [tokenMember] = useState(getAccessToken('a'));\\r\\n  const [dailyPrice, setDailyPrice] = useState(''); // 사용자 입력을 저장할 상태\\r\\n  const [minPrice] = useState(0); // 최소가격\\r\\n  const [maxPrice] = useState(1000000); // 최대가격\\r\\n  const [store] = useState(1);\\r\\n\\r\\n  console.log('tokenMember: ', tokenMember);\\r\\n\\r\\n  function handleDailyPriceChange(event) {\\r\\n    let inputNumber = parseInt(event.target.value.replace(/,/g, ''), 10);\\r\\n\\r\\n    // 최소 및 최대 값 적용\\r\\n    if (isNaN(inputNumber) || inputNumber < minPrice) {\\r\\n      inputNumber = minPrice;\\r\\n    } else if (inputNumber > maxPrice) {\\r\\n      alert('입력 가능한 최대 가격을 초과하였습니다!')\\r\\n      inputNumber = '';\\r\\n    }\\r\\n    setDailyPrice(formatNumber(inputNumber));\\r\\n  }\\r\\n  // useEffect 내에서 updateItemNames를 호출\\r\\n  useEffect(() => {\\r\\n    const itemCodeSelect = document.getElementById(\\\"itemCode\\\");\\r\\n    const originStatusSelects = document.querySelectorAll(\\\"[name=originStatus]\\\");\\r\\n\\r\\n    itemCodeSelect.addEventListener('change', updateItemNames);\\r\\n    addEventToElements('change', updateOriginStatus, originStatusSelects);\\r\\n\\r\\n    return () => {\\r\\n      itemCodeSelect.removeEventListener('change', updateItemNames);\\r\\n      removeEventToElements('change', updateOriginStatus, originStatusSelects);\\r\\n    };\\r\\n  }, []);\\r\\n\\r\\n\\r\\n\\r\\n  return (\\r\\n\\r\\n    <div className='ba-cursor-pointer-div'>\\r\\n      <form id='sidpForm' className='ba-form-container'>\\r\\n        <table>\\r\\n          <thead>\\r\\n            <tr>\\r\\n              <th colSpan=\\\"2\\\">품목 시세등록 </th>\\r\\n            </tr>\\r\\n          </thead>\\r\\n          <tbody>\\r\\n            <tr>\\r\\n              <th><label htmlFor=\\\"daliyPriceDate\\\">기준날짜</label></th>\\r\\n              <td>\\r\\n                <input name='storeNo' type='text' hidden value='1' />\\r\\n                <input type='date' name='daliyPriceDate' />\\r\\n              </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n              <th><label htmlFor=\\\"item_code\\\">품목구분</label></th>\\r\\n              <td>\\r\\n                <select name='itemCode' id=\\\"itemCode\\\">\\r\\n                  <option selected value=\\\"N\\\">선택안함</option>\\r\\n                  <option value=\\\"S\\\">생선(횟감)</option>\\r\\n                  <option value=\\\"F\\\">생선(비횟감)</option>\\r\\n                  <option value=\\\"C\\\">갑각류</option>\\r\\n                  <option value=\\\"M\\\">패류</option>\\r\\n                  <option value=\\\"E\\\">기타</option>\\r\\n                </select>\\r\\n              </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n              <th><label htmlFor=\\\"itemName\\\">품목</label></th>\\r\\n              <td>\\r\\n                <select name='itemName' id=\\\"itemName\\\">\\r\\n                  <option selected>품목구분 항목을 먼저 선택해주세요.</option>\\r\\n                </select>\\r\\n              </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n              <th><label>크기</label></th>\\r\\n              <td>\\r\\n                <label htmlFor=\\\"itemSizeS\\\">\\r\\n                  <input type=\\\"radio\\\" id=\\\"itemSizeS\\\" name=\\\"itemSize\\\" value=\\\"S\\\" /> 소\\r\\n                </label>\\r\\n                <label htmlFor=\\\"itemSizeM\\\">\\r\\n                  <input type=\\\"radio\\\" id=\\\"itemSizeM\\\" name=\\\"itemSize\\\" value=\\\"M\\\" /> 중\\r\\n                </label>\\r\\n                <label htmlFor=\\\"itemSizeL\\\">\\r\\n                  <input type=\\\"radio\\\" id=\\\"itemSizeL\\\" name=\\\"itemSize\\\" value=\\\"L\\\" /> 대\\r\\n                </label>\\r\\n              </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n              <th><label>원산지</label></th>\\r\\n              <td>\\r\\n                <label htmlFor=\\\"originD\\\">\\r\\n                  <input type=\\\"radio\\\" id=\\\"originD\\\" name=\\\"originStatus\\\" value=\\\"D\\\" /> 국내산\\r\\n                </label>\\r\\n                <label htmlFor=\\\"originI\\\">\\r\\n                  <input type=\\\"radio\\\" id=\\\"originI\\\" name=\\\"originStatus\\\" value=\\\"I\\\" /> 수입산\\r\\n                </label>\\r\\n              </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n              <th><label htmlFor=\\\"originPlaceStatus\\\">지역명</label></th>\\r\\n              <td>\\r\\n                <select name=\\\"originPlaceStatus\\\" id=\\\"originPlaceStatus\\\">\\r\\n                  <option selected>원산지 항목을 먼저 선택해주세요.</option>\\r\\n                </select>\\r\\n              </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n              <th><label>자연산/양식</label></th>\\r\\n              <td>\\r\\n                <label htmlFor=\\\"wildFarmStatusW\\\">\\r\\n                  <input type=\\\"radio\\\" id=\\\"wildFarmStatusW\\\" name=\\\"wildFarmStatus\\\" value=\\\"W\\\" /> 자연산\\r\\n                </label>\\r\\n                <label htmlFor=\\\"wildFarmStatusF\\\">\\r\\n                  <input type=\\\"radio\\\" id=\\\"wildFarmStatusF\\\" name=\\\"wildFarmStatus\\\" value=\\\"F\\\" /> 양식\\r\\n                </label>\\r\\n              </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n              <th><label>금일가격</label></th>\\r\\n              <td>\\r\\n                <label htmlFor=\\\"dailPrice\\\">\\r\\n                  <input type=\\\"text\\\" id=\\\"dailyPrice\\\" name=\\\"dailyPrice\\\" value={dailyPrice}\\r\\n                    onChange={handleDailyPriceChange} />(원)\\r\\n                </label>\\r\\n              </td>\\r\\n            </tr>\\r\\n          </tbody>\\r\\n        </table>\\r\\n        <button type=\\\"button\\\" className='ba-btn ba-margin-tb50' onClick={() => insertSidp(tokenMember)}>품목시세 등록</button>\\r\\n      </form>\\r\\n    </div >\\r\\n\\r\\n  );\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nexport default StoreItemRegister;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\UserEditPage.js\",[\"408\",\"409\",\"410\"],[],\"import React, { useState, useEffect } from 'react';\\r\\nimport InputField from './InputField';\\r\\nimport { sendAxiosMultipartRequest, sendAxiosRequest } from '../utility/common';\\r\\nimport axios, { formToJSON } from 'axios';\\r\\nimport { useNavigate, useParams } from 'react-router-dom';\\r\\n\\r\\nfunction UserEditPage() {\\r\\n  const [currentImage, setCurrentImage] = useState('http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg');\\r\\n  const [member, setMember] = useState(null);\\r\\n\\r\\n\\r\\n  useEffect(() => {\\r\\n    sendAxiosRequest('api/member/loginCheck', 'GET', null, response => {\\r\\n      let loginUser = response.data.loginUser;\\r\\n      console.log(loginUser);\\r\\n      setMember(loginUser);\\r\\n      setCurrentImage('http://kr.object.ncloudstorage.com/bleuauction-bucket/' + loginUser.memberAttaches[0].filePath + loginUser.memberAttaches[0].saveFilename);\\r\\n    }, error => console.log(error))\\r\\n  }, []);\\r\\n\\r\\n\\r\\n  function memberUpdate() {\\r\\n    let memberForm = document.getElementById('memberForm');\\r\\n    const formData = new FormData(memberForm);\\r\\n    const updateMemberRequest = JSON.stringify(formData);\\r\\n\\r\\n    const updateMemberBlob = new Blob([updateMemberRequest], { type: 'application/json' });\\r\\n    formData.append('updateMemberRequest', updateMemberBlob);\\r\\n\\r\\n    const fileInput = document.getElementById('imageInput');\\r\\n\\r\\n    if (fileInput && fileInput.files[0]) {\\r\\n      console.log('조건만족하나?');\\r\\n      formData.append('profileImage', fileInput.files[0]);\\r\\n    }\\r\\n\\r\\n    console.log('formData: ', formData);\\r\\n    console.log('formData: ', formToJSON(formData));\\r\\n    axios.post('/api/member/update', formData, {\\r\\n      headers: {\\r\\n        'Content-Type': 'multipart/form-data',\\r\\n      },\\r\\n    })\\r\\n      .then(response => {\\r\\n        console.log('서버 응답:', response.data);\\r\\n      })\\r\\n      .catch(error => {\\r\\n        console.error('에러 발생:', error);\\r\\n      });\\r\\n  }\\r\\n\\r\\n\\r\\n  const handleImageChange = (event) => {\\r\\n    if (event.target.files && event.target.files[0]) {\\r\\n      const reader = new FileReader();\\r\\n      reader.onload = (e) => {\\r\\n        setCurrentImage(e.target.result);\\r\\n      };\\r\\n      reader.readAsDataURL(event.target.files[0]);\\r\\n    }\\r\\n  };\\r\\n\\r\\n\\r\\n  const handleImageClick = () => {\\r\\n    document.getElementById('imageInput').click();\\r\\n  };\\r\\n\\r\\n\\r\\n  if (member === null) {\\r\\n    return <div>Loading...</div>; // 로딩 표시\\r\\n  } else {\\r\\n    return (\\r\\n      <div style={styles.container}>\\r\\n        <form id='memberForm' onClick={handleImageChange} style={styles.form}>\\r\\n          <img src={currentImage} alt={member.memberName} style={styles.profilePicture} onClick={handleImageClick} />\\r\\n          <br />\\r\\n          <button type=\\\"button\\\" style={styles.buttonStyle} onClick={() => { document.getElementById('imageInput').click() }}>사진 등록</button>\\r\\n          {/* <form onClick={handleImageChange} style={styles.form}> */}\\r\\n          <input type=\\\"file\\\" style={{ display: 'none' }} id=\\\"imageInput\\\" onChange={handleImageChange}\\r\\n          />\\r\\n          <div style={styles.formSection}>\\r\\n            <h1 style={styles.title}>일반 회원 정보 수정</h1>\\r\\n            <InputField type=\\\"text\\\" name=\\\"memberName\\\" value={member.memberName} onChange={e => setMember({ ...member, memberName: e.target.value })} placeholder=\\\"Name\\\" />\\r\\n            <InputField type=\\\"email\\\" name=\\\"memberEmail\\\" value={member.memberEmail} onChange={e => setMember({ ...member, memberEmail: e.target.value })} placeholder=\\\"Email\\\" />\\r\\n            <InputField type=\\\"password\\\" name=\\\"memberPwd\\\" value={member.memberPwd} onChange={e => setMember({ ...member, memberPwd: e.target.value })} placeholder=\\\"Password\\\" />\\r\\n            <InputField type=\\\"text\\\" name=\\\"memberPhone\\\" value={member.memberPhone} onChange={e => setMember({ ...member, memberPhone: e.target.value })} placeholder=\\\"Phone Number\\\" />\\r\\n            <InputField type=\\\"text\\\" name=\\\"memberZipcode\\\" value={member.memberZipcode} onChange={e => setMember({ ...member, memberZipcode: e.target.value })} placeholder=\\\"Postal Code\\\" />\\r\\n            <InputField type=\\\"text\\\" name=\\\"memberAddr\\\" value={member.memberAddr} onChange={e => setMember({ ...member, memberAddr: e.target.value })} placeholder=\\\"Primary Address\\\" />\\r\\n            <InputField type=\\\"text\\\" name=\\\"memberDetailAddr\\\" value={member.memberDetailAddr} onChange={e => setMember({ ...member, memberDetailAddr: e.target.value })} placeholder=\\\"Detail Address\\\" />\\r\\n            <InputField type=\\\"text\\\" name=\\\"memberBank\\\" value={member.memberBank} onChange={e => setMember({ ...member, memberBank: e.target.value })} placeholder=\\\"Bank\\\" />\\r\\n            <InputField type=\\\"text\\\" name=\\\"memberAccount\\\" value={member.memberAccount} onChange={e => setMember({ ...member, memberAccount: e.target.value })} placeholder=\\\"Account Number\\\" />\\r\\n            <button type='button' onClick={memberUpdate} style={styles.buttonStyle}>수정</button>\\r\\n          </div>\\r\\n        </form>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\nconst styles = {\\r\\n  container: {\\r\\n    display: 'flex',\\r\\n    flexDirection: 'row', // 행 방향으로 아이템들을 정렬합니다.\\r\\n    alignItems: 'flex-start', // 아이템들을 컨테이너의 시작 부분에 정렬합니다.\\r\\n    // margin: '0 auto', // 컨테이너를 화면 가운데 정렬합니다.\\r\\n    padding: '20px', // 컨테이너의 패딩을 추가합니다.\\r\\n    // width: '50%',\\r\\n    justifyContent: 'center'\\r\\n  },\\r\\n  profilePicture: {\\r\\n    width: '200px',\\r\\n    height: '200px',\\r\\n    borderRadius: '100px',\\r\\n    marginBottom: '20px',\\r\\n    alignSelf: 'flex-start', // 사진을 컨테이너의 시작 부분에 정렬합니다.\\r\\n  },\\r\\n  formSection: {\\r\\n    display: 'flex',\\r\\n    flexDirection: 'column',\\r\\n    alignItems: 'flex-start',\\r\\n    marginLeft: '20px', // 프로필 사진과 폼 섹션 사이에 마진을 추가합니다.\\r\\n  },\\r\\n  title: {\\r\\n    fontSize: '24px', // 원하는 폰트 크기로 설정합니다.\\r\\n    fontWeight: 'bold', // 제목의 폰트를 굵게 설정합니다.\\r\\n    marginBottom: '20px', // 제목 아래에 마진을 추가합니다.\\r\\n    textAlign: 'center',\\r\\n  },\\r\\n  buttonStyle: {\\r\\n    border: 'none',\\r\\n    margin: '10px 0',\\r\\n    padding: '10px',\\r\\n    borderRadius: '4px',\\r\\n    backgroundColor: '#C4C4C433',\\r\\n    textAlign: 'center', // 수정: 텍스트를 중앙에 배치합니다.\\r\\n    // boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.2)',\\r\\n    width: '500px',\\r\\n    cursor: 'pointer',\\r\\n\\r\\n  }\\r\\n};\\r\\n\\r\\nexport default UserEditPage;\\r\\n\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\StoreRegisterPage.js\",[\"411\",\"412\"],[],\"import React, { useState } from 'react';\\r\\n// import { Form, Card, Button } from 'react-bootstrap';\\r\\nimport { useNavigate } from 'react-router-dom';\\r\\nimport axios, { formToJSON } from 'axios';\\r\\n\\r\\n\\r\\n\\r\\nfunction StoreRegisterPage() {\\r\\n\\r\\n\\r\\n  const navigate = useNavigate();\\r\\n  const handleSubmit = async (e) => {\\r\\n    e.preventDefault();\\r\\n    console.log(e.target);\\r\\n    let formData = new FormData(e.target);\\r\\n\\r\\n    let jsonObj = formToJSON(formData);\\r\\n\\r\\n    console.log(jsonObj);\\r\\n\\r\\n    // POST 요청 생성\\r\\n    axios.post('/api/store/signup', jsonObj, {\\r\\n      headers: {\\r\\n        'Content-Type': 'application/json'\\r\\n      }\\r\\n    })\\r\\n      .then(response => {\\r\\n        // 성공적으로 서버에서 응답을 받은 경우의 처리\\r\\n        console.log('등록된 가게 정보:', response.data);\\r\\n        alert('가게 등록 성공!')\\r\\n        navigate('/mypage');\\r\\n\\r\\n      })\\r\\n      .catch(error => {\\r\\n        // 오류가 발생한 경우의 처리\\r\\n        console.error('에러 발생:', error);\\r\\n      });\\r\\n\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div style={styles.container}>\\r\\n      <form onSubmit={handleSubmit} style={styles.form}>\\r\\n      <div>\\r\\n        <h2>가게 등록 </h2>\\r\\n        </div>\\r\\n        <div>\\r\\n        <label>시장명: </label>\\r\\n        <input style={styles.input} type=\\\"text\\\" name=\\\"marketName\\\" />\\r\\n        </div>\\r\\n        <div>\\r\\n        <label>가게명: </label>\\r\\n        <input style={styles.input} type=\\\"text\\\" name=\\\"storeName\\\" />\\r\\n        </div>\\r\\n        <div>\\r\\n        <label>사업자등록번호: </label>\\r\\n        <input style={styles.input} type=\\\"text\\\" name=\\\"licenseNo\\\" />\\r\\n        </div>\\r\\n        <div>\\r\\n        <label>우편번호: </label>\\r\\n        <input style={styles.input} type=\\\"text\\\" name=\\\"storeZipcode\\\" />\\r\\n        </div>\\r\\n        <div>\\r\\n        <label>기본주소: </label>\\r\\n        <input style={styles.input} type=\\\"text\\\" name=\\\"storeAddr\\\" />\\r\\n        </div>\\r\\n        <div>\\r\\n        <label>상세주소: </label>\\r\\n        <input style={styles.input} type=\\\"text\\\" name=\\\"storeDetailAddr\\\" />\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <div>\\r\\n          <label>평일운영시작시간: </label>\\r\\n          <input style={styles.input} type=\\\"time\\\" name=\\\"weekdayStartTime\\\" />\\r\\n        </div>\\r\\n        <div>\\r\\n          <label>평일운영종료시간: </label>\\r\\n          <input style={styles.input} type=\\\"time\\\" name=\\\"weekdayEndTime\\\" />\\r\\n        </div>\\r\\n        <div>\\r\\n          <label>주말운영시작시간: </label>\\r\\n          <input style={styles.input} type=\\\"time\\\" name=\\\"weekendStartTime\\\" />\\r\\n        </div>\\r\\n        <div>\\r\\n          <label>주말운영종료시간: </label>\\r\\n          <input style={styles.input} type=\\\"time\\\" name=\\\"weekendEndTime\\\" />\\r\\n        </div>\\r\\n\\r\\n        <button type=\\\"submit\\\" style={styles.submitButton}> 가게 등록</button>\\r\\n\\r\\n      </form>\\r\\n    </div>\\r\\n\\r\\n  );\\r\\n}\\r\\n\\r\\nconst styles = {\\r\\n  container: {\\r\\n    display: 'flex',\\r\\n    justifyContent: 'center',\\r\\n    alignItems: 'center',\\r\\n    height: '60vh',\\r\\n  },\\r\\n  card: {\\r\\n    width: '50%', \\r\\n    boxShadow: '0 8px 30px rgba(0, 0, 0, 0.12)',\\r\\n    borderRadius: '20px', \\r\\n    padding: '20px', \\r\\n  },\\r\\n\\r\\n  title: {\\r\\n    fontSize: '1.8rem',\\r\\n    marginBottom: '30px',\\r\\n    textAlign: 'center',\\r\\n  },\\r\\n  button: {\\r\\n    background: 'linear-gradient(to right, #6a11cb, #2575fc)',\\r\\n    border: 'none',\\r\\n    padding: '10px 20px',\\r\\n    color: 'white',\\r\\n    borderRadius: '25px',\\r\\n    transition: 'all 0.2s',\\r\\n    cursor: 'pointer',\\r\\n    transition: 'all 0.3s', \\r\\n    '&:hover': {\\r\\n      transform: 'scale(1.1)', \\r\\n    },\\r\\n  },\\r\\n  form: {\\r\\n    display: 'flex',\\r\\n    flexDirection: 'column',\\r\\n    alignItems: 'center', // 폼 내용을 중앙 정렬합니다.\\r\\n    padding: '20px',  // 내부 패딩을 추가합니다.\\r\\n    borderRadius: '12px',  // 모서리를 둥글게 합니다.\\r\\n    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)', // 약간의 그림자 효과를 추가합니다.\\r\\n    background: 'white', // 배경색을 흰색으로 설정합니다.\\r\\n    width: '800px', \\r\\n  },\\r\\n  input: {\\r\\n    padding: '10px',\\r\\n    margin: '5px 0',\\r\\n    borderRadius: '6px',\\r\\n    border: '1px solid #ccc',\\r\\n    outline: 'none',\\r\\n    width: '300px', \\r\\n  },\\r\\n  submitButton: {\\r\\n    padding: '10px 20px',\\r\\n    cursor: 'pointer',\\r\\n    backgroundColor: '#0575E6',\\r\\n    border: 'none',\\r\\n    borderRadius: '8px',\\r\\n    color: 'white',\\r\\n  },\\r\\n};\\r\\n\\r\\n\\r\\n\\r\\nexport default StoreRegisterPage;\\r\\n\\r\\n\\r\\n\\r\\n// import * as React from 'react';\\r\\n// import { Button, TextField, Box, Typography, Container } from '@mui/material';\\r\\n// import { useNavigate } from 'react-router-dom';\\r\\n// import axios from 'axios';\\r\\n\\r\\n// function StoreRegisterPage() {\\r\\n//   const navigate = useNavigate();\\r\\n\\r\\n//   const handleSubmit = async (e) => {\\r\\n//     e.preventDefault();\\r\\n//     const formData = new FormData(e.currentTarget);\\r\\n//     // 폼 데이터를 JSON으로 변환하는 로직이 필요합니다.\\r\\n//     // formToJSON 함수를 정의하거나 다른 방법을 사용하세요.\\r\\n\\r\\n//     // JSON 객체 생성\\r\\n//     let jsonObj = {}; \\r\\n//     formData.forEach((value, key) => { jsonObj[key] = value });\\r\\n\\r\\n//     console.log(jsonObj);\\r\\n\\r\\n//     // POST 요청 생성\\r\\n//     axios.post('/api/store/signup', jsonObj, {\\r\\n//       headers: {\\r\\n//         'Content-Type': 'application/json'\\r\\n//       }\\r\\n//     })\\r\\n//       .then(response => {\\r\\n//         console.log('등록된 가게 정보:', response.data);\\r\\n//         // navigate('/path-after-success'); // 성공 후 리디렉션 경로\\r\\n//       })\\r\\n//       .catch(error => {\\r\\n//         console.error('에러 발생:', error);\\r\\n//       });\\r\\n//   };\\r\\n\\r\\n//   // Material-UI 컴포넌트를 사용한 레이아웃\\r\\n//   return (\\r\\n//     <Container component=\\\"main\\\" maxWidth=\\\"xs\\\">\\r\\n//       <Box\\r\\n//         sx={{\\r\\n//           marginTop: 8,\\r\\n//           display: 'flex',\\r\\n//           flexDirection: 'column',\\r\\n//           alignItems: 'center',\\r\\n//         }}\\r\\n//       >\\r\\n//         <Typography component=\\\"h1\\\" variant=\\\"h5\\\">\\r\\n//           가게 등록\\r\\n//         </Typography>\\r\\n//         <Box component=\\\"form\\\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\\r\\n//           <TextField\\r\\n//             margin=\\\"normal\\\"\\r\\n//             required\\r\\n//             fullWidth\\r\\n//             id=\\\"marketName\\\"\\r\\n//             label=\\\"시장명\\\"\\r\\n//             name=\\\"marketName\\\"\\r\\n//             autoComplete=\\\"market-name\\\"\\r\\n//             autoFocus\\r\\n//           />\\r\\n//           {/* 다른 필드들도 이와 유사한 형태로 추가합니다. */}\\r\\n//           {/* 예시: */}\\r\\n//           <TextField\\r\\n//             margin=\\\"normal\\\"\\r\\n//             required\\r\\n//             fullWidth\\r\\n//             name=\\\"storeName\\\"\\r\\n//             label=\\\"가게명\\\"\\r\\n//             id=\\\"storeName\\\"\\r\\n//             autoComplete=\\\"store-name\\\"\\r\\n//           />\\r\\n//           {/* 나머지 필드를 여기에 추가 */}\\r\\n//           {/* ... */}\\r\\n//           <Button\\r\\n//             type=\\\"submit\\\"\\r\\n//             fullWidth\\r\\n//             variant=\\\"contained\\\"\\r\\n//             sx={{ mt: 3, mb: 2 }}\\r\\n//           >\\r\\n//             가게 등록\\r\\n//           </Button>\\r\\n//         </Box>\\r\\n//       </Box>\\r\\n//     </Container>\\r\\n//   );\\r\\n// }\\r\\n\\r\\n// export default StoreRegisterPage;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\MyPage.js\",[\"413\",\"414\",\"415\",\"416\",\"417\",\"418\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport { Link } from 'react-router-dom';\\r\\nimport axios, { formToJSON } from 'axios';\\r\\nimport { isOpenNow, sendAxiosRequest, isTokenExpired } from '../utility/common';\\r\\nimport jwtDecode from 'jwt-decode';\\r\\n\\r\\nfunction MyPage() {\\r\\n  // 사용자 정보를 상태 혹은 API로부터 불러오기.\\r\\n  // 예시\\r\\n  // const user = {\\r\\n  //   name: 'Rose',\\r\\n  //   email: 'rose@example.com',\\r\\n  //   accountType: 'personal', // or 'business'\\r\\n  //   profilePicture: '/images/rose.png',\\r\\n  // };\\r\\n\\r\\n  const defaultImage = '/images/rose.png';\\r\\n\\r\\n  const accessToken = sessionStorage.getItem('accessToken');\\r\\n  const member = isTokenExpired(accessToken) ? null : jwtDecode(accessToken);\\r\\n\\r\\n  const outerContainerStyle = {\\r\\n    display: 'flex',\\r\\n    justifyContent: 'center',\\r\\n    alignItems: 'center',\\r\\n    height: '100vh',\\r\\n    margin: '0',\\r\\n  };\\r\\n\\r\\n  const styles = {\\r\\n    container: {\\r\\n      display: 'flex',\\r\\n      flexDirection: 'column',\\r\\n      alignItems: 'center',\\r\\n      justifyContent: 'center', // 가운데 정렬 추가\\r\\n      padding: '20px',\\r\\n      width: '70%',\\r\\n      height: '30vh', // 화면 높이의 100%를 차지하도록 설정\\r\\n    },\\r\\n    profileSection: {\\r\\n      display: 'flex',\\r\\n      alignItems: 'center',\\r\\n      marginBottom: '20px',\\r\\n      width: '100%', //\\r\\n    },\\r\\n    profilePicture: {\\r\\n      width: '110px',\\r\\n      height: '110px',\\r\\n      borderRadius: '80px',\\r\\n      marginRight: '20px', // 사진과 텍스트 사이의 간격을 조정\\r\\n    },\\r\\n    userInfo: {\\r\\n      display: 'flex',\\r\\n      flexDirection: 'column',\\r\\n      alignItems: 'flex-start', // 왼쪽 정렬\\r\\n    },\\r\\n    linkSection: {\\r\\n      display: 'flex',\\r\\n      flexDirection: 'column',\\r\\n      width: '100%',\\r\\n    },\\r\\n    linkContainer: {\\r\\n      margin: '20px 0',\\r\\n      padding: '20px',\\r\\n      borderRadius: '4px',\\r\\n      backgroundColor: '#ffffff',\\r\\n      textAlign: 'center',\\r\\n      boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.2)',\\r\\n    },\\r\\n    link: {\\r\\n      textDecoration: 'none',\\r\\n      color: 'black',\\r\\n      fontWeight: 'bold',\\r\\n    },\\r\\n    button: {\\r\\n      display: 'inline-block',\\r\\n      padding: '10px 20px',\\r\\n      margin: '5px 0',\\r\\n      backgroundColor: '#4CAF50',\\r\\n      color: 'white',\\r\\n      textDecoration: 'none',\\r\\n      textAlign: 'center',\\r\\n      borderRadius: '8px',\\r\\n    },\\r\\n  };\\r\\n  const personalLinks = (\\r\\n    <>\\r\\n      <div style={styles.linkContainer}>\\r\\n        <Link to=\\\"/useredit\\\" style={styles.link}>회원정보 수정</Link>\\r\\n      </div>\\r\\n      <div style={styles.linkContainer}>\\r\\n        <Link to=\\\"/my-orders\\\" style={styles.link}>마이 오더</Link>\\r\\n      </div>\\r\\n      <div style={styles.linkContainer}>\\r\\n        <Link to=\\\"/\\\" style={styles.link}>찜하기</Link>\\r\\n      </div>\\r\\n    </>\\r\\n  );\\r\\n\\r\\n  // 비즈니스 사용자용 링크\\r\\n  const businessLinks = (\\r\\n    <>\\r\\n      <div style={styles.linkContainer}>\\r\\n        <Link to=\\\"/useredit\\\" style={styles.link}>회원정보 수정</Link>\\r\\n      </div>\\r\\n      <div style={styles.linkContainer}>\\r\\n          <Link\\r\\n            to= \\\"/menuEdit\\\"\\r\\n            style={styles.link}\\r\\n          >\\r\\n            메뉴 관리\\r\\n      </Link>\\r\\n      </div>\\r\\n        <div style={styles.linkContainer}>\\r\\n            <Link to=\\\"/\\\" style={styles.link}>품목 관리</Link>\\r\\n      </div>\\r\\n      <div style={styles.linkContainer}>\\r\\n        <Link to=\\\"/order-confirmation\\\" style={styles.link}>주문확인</Link>\\r\\n      </div>\\r\\n      <div style={styles.linkContainer}>\\r\\n        <Link to=\\\"/storeRegister\\\" style={styles.link}>가게등록</Link>\\r\\n      </div>\\r\\n    </>\\r\\n  );\\r\\n\\r\\n  // 관리자 사용자용 링크\\r\\n  const adminLinks = (\\r\\n    <>\\r\\n      <div style={styles.linkContainer}>\\r\\n        <Link to=\\\"/admin/notice/list\\\" style={styles.link}>공지사항 관리</Link>\\r\\n      </div>\\r\\n\\r\\n    </>\\r\\n  );\\r\\n\\r\\n  if (member === null) {\\r\\n    return <div>Loading...</div>; // 로딩 표시\\r\\n  } else {\\r\\n    return (\\r\\n      <div style={outerContainerStyle}>\\r\\n        <div style={styles.container}>\\r\\n          <div style={styles.profileSection}>\\r\\n            <img src={defaultImage} alt={member.memberName} style={styles.profilePicture} />\\r\\n            <div style={styles.userInfo}>\\r\\n              <h2>{member.memberName}</h2>\\r\\n              <p> {member.memberCategory === 'M' ? '개인' :\\r\\n                member.memberCategory === 'S' ? '비즈니스' :\\r\\n                  member.memberCategory === 'A' ? '관리자' : '기타'}\\r\\n                계정</p>\\r\\n              <p>{member.memberEmail}</p>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div style={styles.linkSection}>\\r\\n            {/* member.memberCategory 값에 따라 링크 섹션을 조건부로 렌더링합니다. */}\\r\\n            {/* member.memberCategory 값에 따라 링크 섹션을 조건부로 렌더링합니다. */}\\r\\n            {member.memberCategory === 'M' ? personalLinks :\\r\\n              member.memberCategory === 'S' ? businessLinks :\\r\\n                member.memberCategory === 'A' ? adminLinks : undefined}\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n\\r\\n}\\r\\nexport default MyPage;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\MyOrder.js\",[\"419\"],[],\"import React, { useEffect } from 'react';\\r\\nimport { Link } from 'react-router-dom';\\r\\nimport { useState } from 'react';\\r\\nimport MyOrderContent from './MyOrderContent';\\r\\n\\r\\n\\r\\nfunction MyOrder() {\\r\\n\\r\\n  const order1 = {\\r\\n    orderPrice:'10000',\\r\\n    recipientPhone:'01011111111',\\r\\n    recipientName: '김성주',\\r\\n    recipientZipcode: '1111',\\r\\n    recipientAddr: '기본주소',\\r\\n    recipientDetailAddr: '상세주소',\\r\\n    regDatetime: '2023-09-01 15:00:00',\\r\\n    mdfDatetime: '2023-09-01 15:00:00',\\r\\n    orderStatus: 'Y'\\r\\n  }\\r\\n\\r\\n  const order2 = {\\r\\n    orderPrice:'20000',\\r\\n    recipientPhone:'01011111111',\\r\\n    recipientName: '김성주2',\\r\\n    recipientZipcode: '1111',\\r\\n    recipientAddr: '기본주소',\\r\\n    recipientDetailAddr: '상세주소',\\r\\n    regDatetime: '2023-09-01 15:00:00',\\r\\n    mdfDatetime: '2023-09-01 15:00:00',\\r\\n    orderStatus: 'N'\\r\\n  }\\r\\n\\r\\n  const order3 = {\\r\\n    orderPrice:'10000',\\r\\n    recipientPhone:'01011111111',\\r\\n    recipientName: '김성주',\\r\\n    recipientZipcode: '1111',\\r\\n    recipientAddr: '기본주소',\\r\\n    recipientDetailAddr: '상세주소',\\r\\n    regDatetime: '2023-09-01 15:00:00',\\r\\n    mdfDatetime: '2023-09-01 15:00:00',\\r\\n    orderStatus: 'Y'\\r\\n  }\\r\\n\\r\\n\\r\\n  const orderlist = [order1, order2, order3]\\r\\n\\r\\n  const [selected, setSelected] = useState([]);\\r\\n\\r\\n  const onClick = (e) => {\\r\\n    setSelected(e.target.value);\\r\\n  };\\r\\n\\r\\n  useEffect(()=>{\\r\\n    console.log(selected);\\r\\n  }, [selected])\\r\\n\\r\\n  // let content = (selected === 'Delivered') ? \\r\\n  // <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'N')}/> : \\r\\n  // <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'Y')} />;\\r\\n\\r\\n  let content = (\\r\\n    (selected === 'Delivered') ? <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'Y')}/> : \\r\\n    (selected === 'Canceled') ? <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'N')} />:\\r\\n    null\\r\\n  )\\r\\n\\r\\n  return (\\r\\n      <>\\r\\n        <h2>마이오더</h2>\\r\\n        <div>\\r\\n          <button value={'Delivered'} onClick = {onClick}>Delivered</button>\\r\\n          <button value={'Canceled'} onClick = {onClick}>Canceled</button>\\r\\n        </div>\\r\\n        <div>\\r\\n          {/* <MyOrderContent /> */}\\r\\n          {content}\\r\\n        </div>\\r\\n      \\r\\n      \\r\\n      </>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default MyOrder;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\StoreItemDailyPrice\\\\StoreItemDailyPrice.js\",[\"420\",\"421\",\"422\",\"423\",\"424\",\"425\",\"426\",\"427\",\"428\",\"429\"],[],\"import React, { useState, useEffect, useRef } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport { Carousel } from 'react-responsive-carousel';\\r\\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\\r\\nimport './StoreItemDailyPrice.css';\\r\\nimport { sendAxiosRequest, accessTokenRefresh, redirectLogin, isTokenExpired, getAccessToken, isNullUndefinedOrEmpty } from '../utility/common';\\r\\n\\r\\n// handsontable라이브러리 관련 import\\r\\nimport 'handsontable/dist/handsontable.full.min.css';\\r\\nimport Handsontable from 'handsontable/base';\\r\\nimport { registerAllModules } from 'handsontable/registry';\\r\\nimport { HotTable } from '@handsontable/react';\\r\\nimport { registerRenderer, textRenderer } from 'handsontable/renderers';\\r\\n\\r\\nregisterAllModules();\\r\\n\\r\\nconst sizeOptions = {\\r\\n  S: '소 (0KG~1KG 이하)',\\r\\n  M: '중 (1KG~3KG 이하)',\\r\\n  L: '대 (3KG 초과)',\\r\\n};\\r\\n\\r\\nconst categoryOptions = {\\r\\n  S: '생선(횟감)',\\r\\n  F: '생선(비횟감)',\\r\\n  C: '갑각류',\\r\\n  M: '패류',\\r\\n  E: '기타',\\r\\n};\\r\\n\\r\\nconst originOptions = {\\r\\n  D: '국내산',\\r\\n  I: '수입산',\\r\\n};\\r\\n\\r\\nconst originPlaceOptions = {\\r\\n  ES: '동해',\\r\\n  WS: '서해',\\r\\n  SS: '남해',\\r\\n  JJ: '제주',\\r\\n  WD: '완도',\\r\\n  JP: '일본',\\r\\n  CN: '중국',\\r\\n  RU: '러시아',\\r\\n  NW: '노르웨이',\\r\\n};\\r\\n\\r\\nconst wildFarmOptions = {\\r\\n  W: '자연산',\\r\\n  F: '양식',\\r\\n};\\r\\n\\r\\nconst recommendationItems = [\\r\\n  {\\r\\n    id: 1,\\r\\n    image: 'item1.jpg',\\r\\n    name: '추천 상품 1',\\r\\n  },\\r\\n  {\\r\\n    id: 2,\\r\\n    image: 'item2.jpg',\\r\\n    name: '추천 상품 2',\\r\\n  },\\r\\n];\\r\\n\\r\\n\\r\\nfunction firstRowRenderer(instance, td, row, col, prop, value, cellProperties) {\\r\\n  textRenderer.apply(this, arguments);\\r\\n  td.style.fontSize = '20px';\\r\\n  td.style.padding = '20px';\\r\\n  td.style.color = 'black';\\r\\n  td.style.border = 'solid 2px white';\\r\\n  td.style.background = '#f2f2f2';\\r\\n}\\r\\n\\r\\n\\r\\nfunction StoreItemDailyPrice() {\\r\\n  const [totalDailyPrice, setTotalDailyPrice] = useState(0);\\r\\n  const [averageDailyPrice, setAverageDailyPrice] = useState(0);\\r\\n  const [items, setItems] = useState([]);\\r\\n  const accessToken = sessionStorage.getItem('accessToken');\\r\\n\\r\\n\\r\\n  useEffect(() => {\\r\\n    if (!isTokenExpired(accessToken)) {   // AccessToken이 있을 때만 요청\\r\\n      sendAxiosRequest('/api/sidp/list', 'GET', null, response => {\\r\\n        if (response.data) {\\r\\n          let sidpList = response.data;\\r\\n          const columnData = sidpList.map((sidp) => sidp.dailyPrice);\\r\\n          const total = columnData.reduce((acc, current) => acc + current, 0);\\r\\n          const avg = total / (sidpList.length || 1); // 0으로 나누는 것을 방지\\r\\n\\r\\n          // 상태 업데이트\\r\\n          setTotalDailyPrice(total);\\r\\n          setAverageDailyPrice(avg);\\r\\n          setItems(sidpList);\\r\\n        }\\r\\n      }, error => {\\r\\n        if (error.response.data) {\\r\\n          const errorData = error.response.data;\\r\\n          console.log('errorData: ', errorData);\\r\\n          if (errorData === 'E') { // 토큰이 있으나 만료\\r\\n            accessTokenRefresh();\\r\\n          } else if (errorData === 'I') { // 토큰이 아예없거나 유효하지 않은 토큰\\r\\n            redirectLogin();\\r\\n          }\\r\\n        }\\r\\n      }, null, accessToken);\\r\\n    }\\r\\n  }, [accessToken]); // accessToken이 변경될 때만 실행\\r\\n\\r\\n  const transformedData = items.map((item) => {\\r\\n    return {\\r\\n      'daliyPriceDate': item.daliyPriceDate,\\r\\n      'itemCode': categoryOptions[item.itemCode],\\r\\n      'itemName': item.itemName,\\r\\n      'itemSize': sizeOptions[item.itemSize],\\r\\n      'wildFarmStatus': wildFarmOptions[item.wildFarmStatus],\\r\\n      'originStatus': originOptions[item.originStatus],\\r\\n      'originPlaceStatus': originPlaceOptions[item.originPlaceStatus],\\r\\n      'dailyPrice': item.dailyPrice,\\r\\n    };\\r\\n  });\\r\\n\\r\\n  // items 배열이 비어있을 때, 빈 행 추가\\r\\n  if (items.length === 0) {\\r\\n    transformedData.push({\\r\\n      'daliyPriceDate': '품목에 대한 시세 데이터가 존재하지 않습니다!',\\r\\n      'itemCode': '',\\r\\n      'itemName': '',\\r\\n      'itemSize': '',\\r\\n      'wildFarmStatus': '',\\r\\n      'originStatus': '',\\r\\n      'originPlaceStatus': '',\\r\\n      'dailyPrice': '',\\r\\n    });\\r\\n  }\\r\\n\\r\\n  console.log(items.length);\\r\\n  const mergeCells = items.length === 0 ? [\\r\\n    {\\r\\n      row: 0,\\r\\n      col: 0,\\r\\n      rowspan: 1,\\r\\n      colspan: 8,\\r\\n    }\\r\\n  ] : [];\\r\\n  console.log('transformedData: ', transformedData);\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"daily-box\\\">\\r\\n      <h1>오늘의 시세</h1>\\r\\n      <br />\\r\\n      <div className=\\\"ba-price-list-div\\\">\\r\\n        <div>\\r\\n          <HotTable\\r\\n            mergeCells={mergeCells}\\r\\n            licenseKey=\\\"non-commercial-and-evaluation\\\"\\r\\n            colHeaders={['기준날짜', '품목구분', '품목명', '품목크기', '자연/양식', '국산/수입', '원산지', '품목가격(원)',]}\\r\\n            data={transformedData}\\r\\n            formattedAvg={'0,0,0'}\\r\\n            rowHeaders={true}\\r\\n            colWidths={[250, 200, 200, 300, 200, 250, 200, 250]}\\r\\n            columnHeaderHeight={50}\\r\\n            filters={true}\\r\\n            dropdownMenu={true}\\r\\n            customBorders={true}\\r\\n            settings={{\\r\\n              columnSorting: {\\r\\n                headerAction: true,\\r\\n                multiColumnSorting: true,\\r\\n                sortEmptyCells: false, // 빈 셀 정렬제외\\r\\n                indicator: true, // 정렬순서 표시\\r\\n                initialConfig: {\\r\\n                  column: 1,\\r\\n                  sortOrder: 'desc',\\r\\n                },\\r\\n              },\\r\\n              className: 'customFilterButtonExample1',\\r\\n              width: 'auto',\\r\\n              height: 'auto',\\r\\n              rowHeights: 60,\\r\\n              readOnly: true,\\r\\n              afterGetColHeader: function (col, th) {\\r\\n                var cellWidth = this.getColWidth(col); // 각 열 헤더의 배경색을 셀 넓이만큼 설정\\r\\n                th.style.backgroundColor = '#0056b3'; // 배경색을 변경하려면 원하는 색상으로 수정\\r\\n                th.style.color = 'white';\\r\\n                th.style.fontWeight = 'bold';\\r\\n                th.className = 'htMiddle';\\r\\n              },\\r\\n              afterGetRowHeader: function (row, th) {\\r\\n                th.style.backgroundColor = '#0056b3';\\r\\n                th.style.color = 'white';\\r\\n                th.style.fontWeight = 'bold';\\r\\n                th.style.fontSize = '20px';\\r\\n                th.className = 'htMiddle';\\r\\n              },\\r\\n              columns: [\\r\\n                {\\r\\n                  title: '기준날짜',\\r\\n                  type: 'date',\\r\\n                  className: 'htMiddle',\\r\\n                  dateFormat: 'YYYY-MM-DD',\\r\\n                  data: 'daliyPriceDate',\\r\\n                },\\r\\n                {\\r\\n                  title: '품목구분',\\r\\n                  type: 'text',\\r\\n                  className: 'htLeft htMiddle',\\r\\n                  data: 'itemCode',\\r\\n                },\\r\\n                {\\r\\n                  title: '품목명',\\r\\n                  type: 'text',\\r\\n                  className: 'htLeft htMiddle',\\r\\n                  data: 'itemName',\\r\\n                },\\r\\n                {\\r\\n                  title: '품목크기',\\r\\n                  type: 'text',\\r\\n                  className: 'htLeft htMiddle',\\r\\n                  data: 'itemSize',\\r\\n                },\\r\\n                {\\r\\n                  title: '자연/양식',\\r\\n                  type: 'text',\\r\\n                  className: 'htLeft htMiddle',\\r\\n                  data: 'wildFarmStatus',\\r\\n                },\\r\\n                {\\r\\n                  title: '국내산/수입산',\\r\\n                  type: 'text',\\r\\n                  className: 'htLeft htMiddle',\\r\\n                  data: 'originStatus',\\r\\n                },\\r\\n                {\\r\\n                  title: '원산지',\\r\\n                  type: 'text',\\r\\n                  data: 'originPlaceStatus',\\r\\n                  className: 'htLeft htMiddle',\\r\\n                },\\r\\n                {\\r\\n                  title: '품목가격(원)',\\r\\n                  type: 'numeric',\\r\\n                  data: 'dailyPrice',\\r\\n                  className: 'htRight htMiddle',\\r\\n                  numericFormat: {\\r\\n                    pattern: '0,0'\\r\\n                  }\\r\\n                },\\r\\n              ],\\r\\n              afterFilter() {\\r\\n                const handsontableInstance = this;\\r\\n                const filters = handsontableInstance.getPlugin('Filters');\\r\\n                console.log('filters: ', filters.filtersRowsMap.indexedValues);\\r\\n\\r\\n                let filteredList = filters.filtersRowsMap.indexedValues;\\r\\n\\r\\n\\r\\n                let total = 0;\\r\\n                let avg = 0;\\r\\n                let totalCnt = 0;\\r\\n                for (let i = 0; i < filteredList.length - 1; i++) {\\r\\n                  if (!filteredList[i]) {\\r\\n                    total += transformedData[i].dailyPrice;\\r\\n                    totalCnt++;\\r\\n                  }\\r\\n                }\\r\\n\\r\\n                avg = total / (totalCnt == 0 ? 1 : totalCnt);\\r\\n                console.log('total(합계): ', total);\\r\\n                console.log('avg(평균): ', avg);\\r\\n\\r\\n                setTotalDailyPrice(total);\\r\\n                setAverageDailyPrice(avg);\\r\\n              },\\r\\n            }}\\r\\n\\r\\n            cells={(row, col) => {\\r\\n              const cellProperties = {};\\r\\n              cellProperties.renderer = firstRowRenderer; // 사용자 정의 렌더러 함수를 셀에 적용\\r\\n              return cellProperties;\\r\\n            }}\\r\\n\\r\\n          />\\r\\n          <div className=\\\"ba-span-div\\\">\\r\\n            <span><strong>합계:</strong> {totalDailyPrice.toLocaleString()} (원)</span>\\r\\n            <span><strong>평균:</strong> {Math.floor(averageDailyPrice).toLocaleString()} (원)</span>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default StoreItemDailyPrice;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\utility\\\\common.js\",[\"430\"],[],\"import axios from 'axios';\\r\\nimport jwtDecode from 'jwt-decode';\\r\\nimport { isValidDateValue } from \\\"@testing-library/user-event/dist/utils\\\";\\r\\n\\r\\nexport const mainUrl = 'http://localhost:3000';\\r\\n\\r\\nexport function isNotNullOrNonEmpty(value) {\\r\\n  if (value === null) {\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n  if (Array.isArray(value)) {\\r\\n    return value.length > 0;\\r\\n  }\\r\\n\\r\\n  if (typeof value === 'object') {\\r\\n    return Object.keys(value).length > 0;\\r\\n  }\\r\\n\\r\\n  return true;\\r\\n}\\r\\n\\r\\n/* 토큰 만료 체크 */\\r\\nexport function isTokenExpired(token) {\\r\\n  if (!isNullUndefinedOrEmpty(token)) {\\r\\n    return true;\\r\\n  }\\r\\n  const expirationTime = jwtDecode(token).exp * 1000;\\r\\n  const currentDate = Date.now();\\r\\n  return currentDate > expirationTime; // 토큰 만료 true 반환\\r\\n}\\r\\n\\r\\n\\r\\nexport function isNullUndefinedOrEmpty(value) {\\r\\n  const valueStr = value + '';\\r\\n  if (valueStr === 'null' || value === 'undefined' || /^\\\\s*$/.test(valueStr)) {\\r\\n    return null;\\r\\n  }\\r\\n  return value;\\r\\n}\\r\\n\\r\\n\\r\\nexport function redirectLogin() {\\r\\n  alert('세션이 만료되어 재로그인이 필요합니다!');\\r\\n  window.location.href = '/login';\\r\\n}\\r\\n\\r\\nexport function accessTokenRefresh() {\\r\\n  const refreshToken = localStorage.getItem('refreshToken');\\r\\n  console.log('accessTokenRefresh() => refreshToken:', refreshToken);\\r\\n\\r\\n  if (!isNullUndefinedOrEmpty(refreshToken)) {\\r\\n    redirectLogin();\\r\\n  }\\r\\n\\r\\n  // 서버로 리프레시 토큰을 사용하여 새 액세스 토큰을 요청\\r\\n  axios.post('/api/member/accTokRefresh', { refreshToken })\\r\\n    .then(response => {\\r\\n      console.log('/api/member/accTokRefresh => response: ', response);\\r\\n      const newAccessToken = response.data.accessToken;\\r\\n      if (!isNullUndefinedOrEmpty(newAccessToken)) {\\r\\n        redirectLogin();\\r\\n        return;\\r\\n      }\\r\\n      sessionStorage.setItem('accessToken', newAccessToken);\\r\\n      console.log('refreshToken으로 accessToken 재발급 완료! =>');\\r\\n    })\\r\\n    .catch(error => {\\r\\n      redirectLogin();\\r\\n    });\\r\\n}\\r\\n\\r\\n\\r\\nexport function logout() {\\r\\n  const isConfirmed = window.confirm('정말로 로그아웃 하시겠습니까?');\\r\\n\\r\\n  if (isConfirmed) {\\r\\n    sessionStorage.clear();\\r\\n    localStorage.clear();\\r\\n    alert('정상적으로 로그아웃 되었습니다!');\\r\\n    window.location.reload();\\r\\n  }\\r\\n}\\r\\n\\r\\nexport function getAccessToken(encodingOrDecodingType) {\\r\\n  encodingOrDecodingType = encodingOrDecodingType.toLowerCase();\\r\\n\\r\\n  const accessToken = sessionStorage.getItem('accessToken');\\r\\n\\r\\n  if (isNullUndefinedOrEmpty(accessToken)) {\\r\\n    if (encodingOrDecodingType === 'a') {\\r\\n      return accessToken;\\r\\n    } else if (encodingOrDecodingType === 'd') {\\r\\n      return jwtDecode(accessToken);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  return null;\\r\\n}\\r\\n\\r\\nexport function getLoginUserInfo(decodedToken) {\\r\\n  if (decodedToken != null) {\\r\\n    const { sub, memberName, memberEmail } = decodedToken;\\r\\n    return { sub, memberName, memberEmail };\\r\\n  }\\r\\n  return null;\\r\\n}\\r\\n\\r\\nexport function sendAxiosRequest(url, method, data, successCallback, errorCallback, contentType, jwtToken) {\\r\\n  console.log('sendAxiosRequest의 요청 URL: ', url);\\r\\n  console.log('sendAxiosRequest의 요청 데이터: ', data);\\r\\n\\r\\n  const axiosConfig = {\\r\\n    timeout: 5000,\\r\\n    url: url,\\r\\n    method: method,\\r\\n  };\\r\\n\\r\\n  if (data) {\\r\\n    if (contentType === 'application/json') {\\r\\n      axiosConfig.headers = {\\r\\n        'Content-Type': contentType,\\r\\n        'Authorization': jwtToken !== 'UA' ? `Bearer ${jwtToken}` : 'UA',\\r\\n      };\\r\\n      // JSON 객체일시 문자열로 변환\\r\\n      axiosConfig.data = JSON.stringify(data);\\r\\n    } else {\\r\\n      axiosConfig.data = data;\\r\\n      axiosConfig.headers = {\\r\\n        'Authorization': jwtToken !== 'UA' ? `Bearer ${jwtToken}` : 'UA',\\r\\n      };\\r\\n    }\\r\\n  } else {\\r\\n    // 데이터가 없는 경우\\r\\n    axiosConfig.headers = {\\r\\n      'Authorization': jwtToken !== 'UA' ? `Bearer ${jwtToken}` : 'UA',\\r\\n    };\\r\\n  }\\r\\n\\r\\n  console.log('sendAxiosRequest().axiosConfig: ', axiosConfig);\\r\\n\\r\\n  axios(axiosConfig)\\r\\n    .then(successCallback)\\r\\n    .catch(errorCallback);\\r\\n}\\r\\n\\r\\n\\r\\nexport function sendAxiosMultipartRequest(url, formData, successCallback, errorCallback) {\\r\\n  console.log('sendAxiosMultipartRequest의 요청 URL: ', url);\\r\\n  console.log('sendAxiosMultipartRequest의 요청 데이터: ', formData);\\r\\n  const axiosConfig = {\\r\\n    timeout: 5000,\\r\\n    url: url,\\r\\n    method: 'POST',\\r\\n    data: formData,\\r\\n    headers: {\\r\\n      'Content-Type': 'multipart/form-data',\\r\\n    }\\r\\n  };\\r\\n  axios(axiosConfig).then(successCallback).catch(errorCallback);\\r\\n}\\r\\n\\r\\n\\r\\nexport function dateFormatParse(date) {\\r\\n  const year = date.getFullYear();\\r\\n  const month = String(date.getMonth() + 1).padStart(2, '0');\\r\\n  const day = String(date.getDate()).padStart(2, '0');\\r\\n  const hours = String(date.getHours()).padStart(2, '0');\\r\\n  const minutes = String(date.getMinutes()).padStart(2, '0');\\r\\n  const seconds = String(date.getSeconds()).padStart(2, '0');\\r\\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\\r\\n}\\r\\n\\r\\nexport function handleInputChange(e, index, state, stateSetter) {\\r\\n  let { name, value } = e.target;\\r\\n  let deepCopyState = [...state];\\r\\n  deepCopyState[index] = {\\r\\n    ...deepCopyState[index],\\r\\n    [name]: value,\\r\\n  };\\r\\n  stateSetter(deepCopyState);\\r\\n}\\r\\n\\r\\nexport function scrollMoveTop() {\\r\\n  window.scrollTo({ top: 0, behavior: 'smooth' });\\r\\n}\\r\\n\\r\\n// 현재 일 기준 가게 시작, 종료 시간\\r\\nexport function startEndTimeInfo(store) {\\r\\n  const currentDate = new Date();\\r\\n  const dayOfWeek = currentDate.getDay();\\r\\n\\r\\n  let startTime;\\r\\n  let endTime;\\r\\n  if (dayOfWeek === 0 || dayOfWeek === 6) { // 주말이면\\r\\n    startTime = store.weekendStartTime;\\r\\n    endTime = store.weekendEndTime;\\r\\n  } else { // 평일이면\\r\\n    startTime = store.weekdayStartTime;\\r\\n    endTime = store.weekdayEndTime;\\r\\n  }\\r\\n\\r\\n  return [startTime, endTime];\\r\\n}\\r\\n\\r\\n\\r\\n// 가게 시작시간, 종료시간 기준으로 영업중인지 확인\\r\\nexport function isOpenNow(startTime, endTime) {\\r\\n  const currentDate = new Date();\\r\\n  const currentTimeMinutes = currentDate.getHours() * 60 + currentDate.getMinutes();\\r\\n  const start = startTime.split(':').map(Number);\\r\\n  const end = endTime.split(':').map(Number);\\r\\n\\r\\n  const startTimeMinutes = start[0] * 60 + start[1];\\r\\n  const endTimeMinutes = end[0] * 60 + end[1];\\r\\n\\r\\n  // O: 마감 C: 영업중\\r\\n  return currentTimeMinutes >= startTimeMinutes && currentTimeMinutes <= endTimeMinutes ? 'O' : 'C';\\r\\n}\\r\\n\\r\\n\\r\\n// 리스트(요소여러 개)에 이벤트 추가\\r\\nexport function addEventToElements(eventName, eventFunction, elements) {\\r\\n  for (let element of elements) {\\r\\n    element.addEventListener(eventName, eventFunction);\\r\\n  }\\r\\n}\\r\\n\\r\\n// 리스트(요소여러 개)에 이벤트 제거\\r\\nexport function removeEventToElements(eventName, eventFunction, elements) {\\r\\n  for (let element of elements) {\\r\\n    element.removeEventListener(eventName, eventFunction);\\r\\n  }\\r\\n}\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Pay\\\\Pay.js\",[\"431\",\"432\",\"433\",\"434\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport axios from 'axios';\\r\\n// import swal from 'sweetalert';\\r\\n// import { response } from 'express';\\r\\n// import { error } from 'console';\\r\\n\\r\\nconst Payment = () => {\\r\\n  useEffect(() => {\\r\\n    const jquery = document.createElement(\\\"script\\\");\\r\\n    jquery.src = \\\"http://code.jquery.com/jquery-1.12.4.min.js\\\";\\r\\n    const iamport = document.createElement(\\\"script\\\");\\r\\n    iamport.src = \\\"https://cdn.iamport.kr/v1/iamport.js\\\";\\r\\n    document.head.appendChild(jquery);\\r\\n    document.head.appendChild(iamport);\\r\\n    return () => {\\r\\n      document.head.removeChild(jquery);\\r\\n      document.head.removeChild(iamport);\\r\\n    };\\r\\n  }, []);\\r\\n\\r\\n  function sendAxiosRequest(url, method, params, successCallback, errorCallback) {\\r\\n    console.log(url);\\r\\n    const axiosConfig = {\\r\\n      timeout: 5000,\\r\\n      url: url,\\r\\n      method: method,\\r\\n    };\\r\\n    if (params != null)\\r\\n      axiosConfig.params = params;\\r\\n    axios(axiosConfig).then(successCallback).catch(errorCallback);\\r\\n  }\\r\\n\\r\\n  const memberNo = 1;\\r\\n  const payNo = 1;\\r\\n  const orderNo = 1;\\r\\n  const [member, setMember] = useState(null);\\r\\n  const [pay, setPay] = useState(null);\\r\\n  const [order, setOrder] = useState(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    // Fetch member data\\r\\n    sendAxiosRequest(`/api/member/${memberNo}`, 'GET', null,\\r\\n      response => {\\r\\n\\r\\n        console.log('Member data:', response.data);\\r\\n        setMember(response.data); // Update member state\\r\\n      },\\r\\n      error => {\\r\\n        console.error('Error fetching member data:', error);\\r\\n      }\\r\\n    );\\r\\n\\r\\n    // Fetch order data\\r\\n    sendAxiosRequest(`/api/order/detail/${orderNo}`, 'GET', null,\\r\\n      response => {\\r\\n        console.log('Order data:', response.data);\\r\\n        setOrder(response.data); // Update order state\\r\\n      },\\r\\n      error => {\\r\\n        console.error('Error fetching order data:', error);\\r\\n      }\\r\\n    );\\r\\n  }, []); // Empty dependency array to ensure this effect runs only once\\r\\n\\r\\n  const requestPay = () => {\\r\\n    console.log('memberState', member);\\r\\n    console.log('orderState', order);\\r\\n\\r\\n    const { IMP } = window;\\r\\n    const buyerEmail = member ? member.memberEmail : '';\\r\\n    const buyerName = member ? member.memberName : '';\\r\\n    const buyerTel = member ? member.memberPhone : '';\\r\\n    const name = order ? order.orderNo : '';\\r\\n    const buyerAddr = order ? order.resipientAddr : '';\\r\\n    const buyerPostcode = order ? order.resipientZipcode : '';\\r\\n    const amount = order.orderPrice;\\r\\n\\r\\n    IMP.init('imp11340204');\\r\\n\\r\\n    IMP.request_pay({\\r\\n      pg: 'kakaopay.TC0ONETIME',\\r\\n      pay_method: 'card',\\r\\n      merchant_uid: new Date().getTime(),\\r\\n      name: name,\\r\\n      amount: amount,\\r\\n      buyer_email: buyerEmail,\\r\\n      buyer_name: buyerName,\\r\\n      buyer_tel: buyerTel,\\r\\n      buyer_addr: buyerAddr,\\r\\n      buyer_postcode: buyerPostcode,\\r\\n    }, async (rsp) => {\\r\\n      console.log('rsp: ', rsp);\\r\\n      try {\\r\\n        const { data } = await axios.post('/api/pay/verifyIamport/' + rsp.imp_uid);\\r\\n        if (rsp.paid_amount === amount) {\\r\\n          alert('결제 성공!');\\r\\n          const testPay = {\\r\\n            // \\\"payType\\\": \\\"C\\\",\\r\\n            // \\\"orderStatus\\\": \\\"Y\\\",\\r\\n            // \\\"payNo\\\": 123,\\r\\n            orderNo: order.orderNo,\\r\\n            payPrice: amount,\\r\\n            payStatus: rsp.success ? 'Y' : 'N'\\r\\n            // \\\"payDatetime\\\": \\\"2023-10-18T12:34:56\\\",  // 예: ISO 8601 형식의 날짜 및 시간\\r\\n            // \\\"payCancelDatetime\\\": \\\"2023-10-18T14:45:00\\\"  // 예: ISO 8601 형식의 날짜 및 시간\\r\\n          }\\r\\n\\r\\n          console.log('testPay.payStatus: ', testPay.payStatus);\\r\\n\\r\\n          axios.post('/api/pay/createPayment', testPay, {\\r\\n            headers: {\\r\\n              'Content-Type': 'application/json',\\r\\n            },\\r\\n          })\\r\\n            .then(response => {\\r\\n              console.log('Pay data:', response.data);\\r\\n              setPay(response.data);\\r\\n            })\\r\\n            .catch(error => {\\r\\n              console.error('Error fetching pay data:', error);\\r\\n            });\\r\\n\\r\\n        } else if (rsp.paid_amount == amount) {\\r\\n          alert('결제 성공?');\\r\\n        } else {\\r\\n          alert('결제 실패?');\\r\\n        }\\r\\n      } catch (error) {\\r\\n        console.error('Error while verifying payment:', error);\\r\\n        alert('결제 실패');\\r\\n      }\\r\\n    });\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      <button onClick={requestPay}>결제하기</button>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default Payment;\\r\\n\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Test\\\\test2.jsx\",[\"435\",\"436\",\"437\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport './Test.css';\\r\\n\\r\\nconst Test = () => {\\r\\n  const [testStatus, setState] = useState({\\r\\n    loading: false,\\r\\n    response: '값을 가져오니라'\\r\\n  });\\r\\n\\r\\n  console.log(\\\"testStatus : \\\",testStatus)\\r\\n  return (\\r\\n    <>\\r\\n      <h1>Test API</h1>\\r\\n      <div className=\\\"response-container\\\">\\r\\n          <p>{testStatus.response}</p>\\r\\n        </div>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\nexport default Test;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Review\\\\ReviewForm.js\",[\"438\",\"439\",\"440\",\"441\",\"442\",\"443\",\"444\",\"445\",\"446\",\"447\",\"448\",\"449\",\"450\",\"451\",\"452\",\"453\",\"454\",\"455\",\"456\",\"457\",\"458\",\"459\",\"460\",\"461\",\"462\",\"463\",\"464\",\"465\",\"466\",\"467\",\"468\",\"469\"],[],\"import '../utility/Common.css';\\r\\nimport React, {useState, useEffect} from 'react';\\r\\nimport {formToJSON} from 'axios';\\r\\nimport {useUser} from '../Auth/UserContext';\\r\\nimport {\\r\\n    scrollMoveTop,\\r\\n    sendAxiosMultipartRequest,\\r\\n    sendAxiosRequest,\\r\\n    dateFormatParse,\\r\\n    handleInputChange,\\r\\n    accessTokenRefresh, getAccessToken, isTokenExpired, isNotNullOrNonEmpty\\r\\n} from '../utility/common';\\r\\n\\r\\n\\r\\nfunction ReviewForm(props) {\\r\\n    const [accessToken, setAccessToken] = useState(getAccessToken('a'));\\r\\n    const [tokenMeber, setTokenMember] = useState(getAccessToken('d'));\\r\\n    const [store, setStore] = useState(props.store);\\r\\n\\r\\n    // 로그인 확인\\r\\n    console.log('accessToken: ', accessToken);\\r\\n    console.log('tokenMeber: ', tokenMeber);\\r\\n\\r\\n    if (!isTokenExpired(accessToken)) {\\r\\n        return (\\r\\n            <div id='maindDiv' className=\\\"review-main-div\\\">\\r\\n                <div id='mainContentDiv' className=\\\"ba-main-content-div\\\">\\r\\n                    <ReviewWriteForm accessToken={accessToken} loginUser={tokenMeber}\\r\\n                                     store={store}></ReviewWriteForm>\\r\\n                    <ReviewListDiv accessToken={accessToken} store={store} loginUser={tokenMeber}></ReviewListDiv>\\r\\n                </div>\\r\\n                <div id=\\\"topBtnDiv\\\" onClick={scrollMoveTop}>↑</div>\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction ReviewWriteForm(props) {\\r\\n    let [loginUser, setLoginUser] = useState(props.loginUser);\\r\\n    let [store, setStore] = useState(props.store);\\r\\n    let [reviewFreshness, setReviewFreshness] = useState('M');\\r\\n\\r\\n    if (loginUser != null && loginUser != undefined) {\\r\\n\\r\\n        return (\\r\\n            <form id=\\\"reviewWriteForm\\\" encType='multipart/form-data' className='ba-form'>\\r\\n                <label htmlFor='storeNo'><input id='storeNo' name='storeNo' value={store.storeNo}\\r\\n                                                hidden readOnly></input></label>\\r\\n                <label htmlFor='memberNo'><input id='memberNo' name='memberNo' value={loginUser.sub}\\r\\n                                                 hidden readOnly></input></label>\\r\\n                <img className='ba-member-profile'\\r\\n                     src='http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg'></img>\\r\\n                <sapn className='ba-font-name'>{loginUser.memberName}</sapn>\\r\\n                <span className='ba-font-title'>신선도 :</span>\\r\\n                <label htmlFor='freshness-low' className='ba-freshness'><img src='/images/low.png'/><input\\r\\n                    type=\\\"radio\\\" id='freshness-low' name='reviewFreshness' value={'L'}\\r\\n                    checked={reviewFreshness === 'L'}\\r\\n                    onChange={() => setReviewFreshness('L')}></input></label>\\r\\n                <label htmlFor='freshness-medium' className='ba-freshness'><img\\r\\n                    src='/images/mid.png'/><input type=\\\"radio\\\" id='freshness-medium'\\r\\n                                                  name='reviewFreshness' value={'M'}\\r\\n                                                  checked={reviewFreshness === 'M'}\\r\\n                                                  onChange={() => setReviewFreshness('M')}></input></label>\\r\\n                <label htmlFor='freshness-high' className='ba-freshness'><img\\r\\n                    src='/images/high.png'/><input type=\\\"radio\\\" id='freshness-high'\\r\\n                                                   name='reviewFreshness' value={'H'}\\r\\n                                                   checked={reviewFreshness === 'H'}\\r\\n                                                   onChange={() => setReviewFreshness('H')}></input></label>\\r\\n                <div>\\r\\n                    <textarea name=\\\"reviewContent\\\" className='ba-textarea'/>\\r\\n                </div>\\r\\n                <div className='ba-text-left'>\\r\\n                    <button type='button' className='ba-btn ba-margin-right10' onClick={() => {\\r\\n                        let formData = new FormData(document.getElementById('reviewWriteForm'));\\r\\n                        let reviewContentLength = formData.get('reviewContent').trim().length;\\r\\n                        console.log(reviewContentLength);\\r\\n\\r\\n                        if (reviewContentLength < 1) {\\r\\n                            alert('작성하실 리뷰 내용을 입력해주세요!');\\r\\n                            return;\\r\\n                        }\\r\\n\\r\\n                        let inputFile = document.querySelector('input[type=\\\"file\\\"]');\\r\\n                        if (inputFile.files.length > 0) {\\r\\n                            let files = inputFile.files;\\r\\n                            for (let i = 0; i < files.length; i++) {\\r\\n                                formData.append(\\\"multipartFiles\\\", files[i]);\\r\\n                            }\\r\\n                        }\\r\\n\\r\\n                        console.log('여기다.');\\r\\n                        console.log('formToJSON', JSON.stringify(formData));\\r\\n                        sendAxiosMultipartRequest('/api/review/add', formData,\\r\\n                            response => {\\r\\n                                console.log('/api/review/add =======> ', response.data);\\r\\n                                console.log('props.accessToken', props.accessToken)\\r\\n                                if (isNotNullOrNonEmpty(response.data)) {\\r\\n                                    alert('리뷰를 성공적으로 작성하였습니다!');\\r\\n                                    // window.location.reload();\\r\\n                                }\\r\\n\\r\\n                            }, error => console.log(error), props.accessToken);\\r\\n\\r\\n                    }}>리뷰작성\\r\\n                    </button>\\r\\n                    <label htmlFor='fileInput' className='ba-file-label'>파일 첨부</label><span\\r\\n                    id='fileInfoSpan'></span>\\r\\n                    <input type='file' id='fileInput' multiple hidden className='ba-file-btn'\\r\\n                           onChange={(e) => {\\r\\n                               let files = e.target.files;\\r\\n                               console.log(files);\\r\\n                               let fileInfoStr;\\r\\n                               for (let i = 0; i < 2; i++) {\\r\\n                                   fileInfoStr = (i === 0) ? fileInfoStr + ' ' + files[i].name + ', ' : fileInfoStr + ' ' + files[i].name;\\r\\n                               }\\r\\n                               document.getElementById('fileInfoSpan').textContent = '파일명: ' + fileInfoStr + ' 등 ' + files.length + '개의 첨부파일';\\r\\n                           }}/>\\r\\n                </div>\\r\\n\\r\\n            </form>\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction ReviewListDiv(props) {\\r\\n    const pageRowCnt = 4;\\r\\n    let [store, setStore] = useState(props.store);\\r\\n    let [accessToken, setAccessToekn] = useState(getAccessToken('a'));\\r\\n    let [loginUser, setLoginUser] = useState(props.loginUser);\\r\\n    let [startPageNo, setStartPageNo] = useState(0);\\r\\n    let [reviewList, setReviewList] = useState([]);\\r\\n    let [selectedReviewNo, setSelectedReviewNo] = useState(null);\\r\\n    let [newAddLength, setNewAddLength] = useState(pageRowCnt);\\r\\n\\r\\n    useEffect(() => {\\r\\n        const handleScroll = () => {\\r\\n            console.log(newAddLength);\\r\\n            if (newAddLength < pageRowCnt) {\\r\\n                return;\\r\\n            }\\r\\n            if (\\r\\n                window.innerHeight + document.documentElement.scrollTop >=\\r\\n                document.documentElement.scrollHeight - 100\\r\\n            ) {\\r\\n\\r\\n                console.log(\\\"스크롤 이벤트 핸들러 작동\\\");\\r\\n                sendAxiosRequest(`/api/review/list?storeNo=${store.storeNo}&startPage=${startPageNo}`, 'GET', null, response => {\\r\\n                    console.log('/api/review/list?storeNo=${store.storeNo}&startPage=${startPageNo} ==> :', response.data);\\r\\n                    if (isNotNullOrNonEmpty(response.data)) {\\r\\n                        let addReviewList = response.data;\\r\\n                        setNewAddLength(response.data.length);\\r\\n                        let newReviewList = [...reviewList, ...addReviewList];\\r\\n                        setStartPageNo(Math.floor(newReviewList.length / pageRowCnt));\\r\\n                        setReviewList(newReviewList);\\r\\n                    }\\r\\n\\r\\n                }, error => console.log(error), null, accessToken)\\r\\n            }\\r\\n        };\\r\\n\\r\\n        window.addEventListener('scroll', handleScroll);\\r\\n\\r\\n        return () => {\\r\\n            window.removeEventListener('scroll', handleScroll);\\r\\n        }\\r\\n    }, [startPageNo, reviewList]);\\r\\n\\r\\n    useEffect(() => {\\r\\n        sendAxiosRequest(`/api/review/list?storeNo=${store.storeNo}`, \\\"GET\\\", null,\\r\\n            response => {\\r\\n                console.log('/api/review/list => ', response.data);\\r\\n                if (isNotNullOrNonEmpty(response.data)) {\\r\\n                    let reviewList = response.data;\\r\\n                    setReviewList(reviewList);\\r\\n                    setNewAddLength(reviewList.length);\\r\\n                    setStartPageNo(Math.floor(newAddLength / pageRowCnt));\\r\\n                }\\r\\n\\r\\n            }, error => console.log(error), null, accessToken)\\r\\n    }, []);\\r\\n\\r\\n    console.log('reviewList', reviewList);\\r\\n    console.log('loginUser', loginUser);\\r\\n    if (reviewList) {\\r\\n        return (\\r\\n            <div id=\\\"reviewListDiv\\\" className='review-list-div'>\\r\\n                {reviewList.length > 0 && reviewList.map((review, index) => (\\r\\n                    <div key={index} className='review-div'>\\r\\n                        <form id={'reviewUpdateForm' + index}>\\r\\n                            <input id={'reviewNo' + index} name='reviewNo' hidden\\r\\n                                   value={review.reviewNo}/>\\r\\n\\r\\n                            <div className='ba-title-container'>\\r\\n                                <img className='ba-member-profile'\\r\\n                                     src='http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg'/>\\r\\n                                <div className='ba-title-info'>\\r\\n                                    <b>{review.member.memberName}</b>\\r\\n                                    <span><b>작성일:</b><input type='text'\\r\\n                                                            value={dateFormatParse(new Date(review.mdfDatetime))}\\r\\n                                                            className='ba-input-text'\\r\\n                                                            disabled/></span>\\r\\n                                </div>\\r\\n                                <div className='ba-title-freshness'>\\r\\n                                    <span className='ba-font-title'>신선도 :</span>\\r\\n                                    <label htmlFor='freshness-low'>\\r\\n                                        <img src='/images/low.png'/>\\r\\n                                        <input type=\\\"radio\\\" name='reviewFreshness' value={'L'}\\r\\n                                               checked={review.reviewFreshness === 'L'}\\r\\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>\\r\\n                                    </label>\\r\\n                                    <label htmlFor='freshness-mid'>\\r\\n                                        <img src='/images/mid.png'/>\\r\\n                                        <input type=\\\"radio\\\" name='reviewFreshness' value={'M'}\\r\\n                                               checked={review.reviewFreshness === 'M'}\\r\\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>\\r\\n                                    </label>\\r\\n                                    <label htmlFor='freshness-high'>\\r\\n                                        <img src='/images/high.png'/>\\r\\n                                        <input type=\\\"radio\\\" name='reviewFreshness' value={'H'}\\r\\n                                               checked={review.reviewFreshness === 'H'}\\r\\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>\\r\\n                                    </label>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <hr/>\\r\\n                            <div>\\r\\n                                {review.reviewAttaches.length > 0 && (\\r\\n                                    <div className='ba-img-list-div'>\\r\\n                                        <img id={'defaultImg' + index} className='ba-img-first'\\r\\n                                             src={`http://kr.object.ncloudstorage.com/bleuauction-bucket/review/${review.reviewAttaches.length > 0 ? review.reviewAttaches[0].saveFilename : ''}`}/>\\r\\n\\r\\n                                        <div className='ba-div-col-sort'>\\r\\n                                            {\\r\\n                                                review.reviewAttaches.map((attach) => (\\r\\n                                                        <div>\\r\\n                                                            <img className='ba-img-sub-list-div'\\r\\n                                                                 src={`http://kr.object.ncloudstorage.com/bleuauction-bucket/review/${attach.saveFilename}`}\\r\\n                                                                 onMouseEnter={(e) => {\\r\\n                                                                     let targetImgSrc = e.target.src;\\r\\n                                                                     let defaultImgId = 'defaultImg' + index;\\r\\n                                                                     console.log(targetImgSrc);\\r\\n                                                                     let defaultImg = document.getElementById(defaultImgId);\\r\\n                                                                     console.log(defaultImg);\\r\\n                                                                     defaultImg.src = targetImgSrc;\\r\\n                                                                 }}/>\\r\\n                                                        </div>\\r\\n                                                    )\\r\\n                                                )\\r\\n                                            }\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                )}\\r\\n                                {review.member.memberNo == loginUser.sub ?\\r\\n                                    (<textarea name='reviewContent' value={review.reviewContent}\\r\\n                                               className='ba-textarea'\\r\\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>)\\r\\n                                    : (<textarea name='reviewContent' value={review.reviewContent}\\r\\n                                                 className='ba-textarea-disabled' readOnly/>\\r\\n                                    )}\\r\\n                            </div>\\r\\n\\r\\n                            {review.member.memberNo == loginUser.sub ?\\r\\n                                (<div className='ba-btn-div'>\\r\\n                                    <div className='ba-file-list'>\\r\\n                                        {review.reviewAttaches.map((attach) => (\\r\\n                                            <div key={attach.fileNo} className=\\\"ba-file-item\\\">\\r\\n                                                <li>{attach.originFilename}</li>\\r\\n                                                <p className=\\\"ba-delete-text\\\" onClick={() => {\\r\\n                                                    sendAxiosRequest(`/api/review/deleteFile?fileNo=${attach.fileNo}`, 'GET', null,\\r\\n                                                        response => {\\r\\n                                                            console.log(response.data);\\r\\n                                                            window.location.reload();\\r\\n                                                            alert(response.data.originFilename + '(이)가 삭제되었습니다!');\\r\\n                                                        },\\r\\n                                                        error => {\\r\\n                                                            console.log(error);\\r\\n                                                        }\\r\\n                                                    );\\r\\n                                                }}>[삭제]</p>\\r\\n                                            </div>\\r\\n                                        ))}\\r\\n                                    </div>\\r\\n\\r\\n                                    <button type='button' className='ba-btn ba-margin-right20'\\r\\n                                            onClick={() => {\\r\\n                                                let jsonObj = formToJSON(new FormData(document.getElementById('reviewUpdateForm' + index)));\\r\\n                                                console.log(jsonObj);\\r\\n                                                sendAxiosRequest('/api/review/update', 'POST', jsonObj, response => {\\r\\n                                                    console.log(response.data);\\r\\n                                                    console.log('리뷰변경 성공!');\\r\\n                                                    window.location.reload();\\r\\n                                                    alert('리뷰를 성공적으로 변경하였습니다!');\\r\\n                                                }, error => console.log(error));\\r\\n                                            }}>리뷰수정\\r\\n                                    </button>\\r\\n                                    <button type='button' className='ba-btn ba-margin-right10'\\r\\n                                            onClick={\\r\\n                                                () => {\\r\\n                                                    sendAxiosRequest(`/api/review/delete?reviewNo=${review.reviewNo}`, 'GET', null, response => {\\r\\n                                                        console.log(response.data);\\r\\n                                                        window.location.reload();\\r\\n                                                        alert('리뷰가 성공적으로 삭제되었습니다!');\\r\\n                                                    }, error => {\\r\\n                                                        console.log(error);\\r\\n                                                    });\\r\\n                                                }}>리뷰삭제\\r\\n                                    </button>\\r\\n                                </div>) : (<div></div>)\\r\\n                            }\\r\\n\\r\\n                            <div className='ba-text-right'>\\r\\n                                <button type='button' className='ba-small-btn' onClick={() => {\\r\\n                                    selectedReviewNo === review.reviewNo ? setSelectedReviewNo(null) : setSelectedReviewNo(review.reviewNo);\\r\\n                                }}>답글\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </form>\\r\\n\\r\\n                        {\\r\\n                            selectedReviewNo == review.reviewNo && (\\r\\n                                <AnswerForm reviewNo={review.reviewNo} loginUser={loginUser}/>\\r\\n                            )\\r\\n                        }\\r\\n                    </div>\\r\\n                ))\\r\\n                }\\r\\n            </div>\\r\\n        );\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nfunction AnswerForm(props) {\\r\\n    const [accessToken, setAccessToken] = useState(props.accessToken);\\r\\n    return (\\r\\n        <div>\\r\\n            <hr/>\\r\\n            <div className='ba-text-right'>\\r\\n                <button type='button' className='ba-small-btn' onClick={() => {\\r\\n                    document.getElementById('answerWriteFormDiv').style.display = 'block';\\r\\n                }}>답글작성✍\uFE0F\\r\\n                </button>\\r\\n            </div>\\r\\n            <div id=\\\"answerWriteFormDiv\\\">\\r\\n                <h4 className='ba-font-title'>답글작성</h4>\\r\\n                <form id=\\\"answerWriteForm\\\">\\r\\n                    <input name='reviewNo' hidden value={props.reviewNo}></input>\\r\\n                    <input name='memberNo' hidden value={1}></input>\\r\\n                    <button type='button' className='ba-close-btn' onClick={\\r\\n                        () => {\\r\\n                            document.getElementById('answerWriteFormDiv').style.display = 'none';\\r\\n\\r\\n                        }\\r\\n                    }>x\\r\\n                    </button>\\r\\n                    <div>\\r\\n                        <textarea name='answerContent' className='ba-small-textarea'></textarea>\\r\\n                    </div>\\r\\n                    <div className='ba-btn-div'>\\r\\n                        <button type='button' className='ba-btn ba-margin-right40' onClick={() => {\\r\\n                            let jsonObj = formToJSON(document.getElementById('answerWriteForm'));\\r\\n                            console.log(jsonObj);\\r\\n                            if (jsonObj.answerContent.trim().length < 1) {\\r\\n                                alert('작성하실 답급 내용을 입력해주세요!');\\r\\n                                return;\\r\\n                            }\\r\\n                            sendAxiosRequest('/api/answer/add', 'POST', jsonObj,\\r\\n                                response => {\\r\\n                                    window.location.reload();\\r\\n                                    alert('답글을 성공적으로 작성하였습니다!');\\r\\n                                    console.log(response.data);\\r\\n                                }, error => console.log(error), null, accessToken);\\r\\n                        }}>작성하기\\r\\n                        </button>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </div>\\r\\n            <AnswerListDiv reviewNo={props.reviewNo} loginUser={props.loginUser}></AnswerListDiv>\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\n\\r\\nfunction AnswerListDiv(props) {\\r\\n    const pageRowCnt = 2;\\r\\n    let [answerList, setAnswerList] = useState([]);\\r\\n    let [startPageNo, setStartPageNo] = useState(0);\\r\\n\\r\\n\\r\\n    useEffect(() => {\\r\\n        sendAxiosRequest(`/api/answer/list?reviewNo=${props.reviewNo}`, \\\"GET\\\", null,\\r\\n            response => {\\r\\n                let asnwerList = response.data.answerList;\\r\\n                let totalRows = response.data.totalRows;\\r\\n                console.log('최초 렌더시 totalRow');\\r\\n                console.log(totalRows);\\r\\n                console.log('최초 렌더시 asnwerList.length');\\r\\n                console.log(asnwerList.length);\\r\\n\\r\\n                if (totalRows > asnwerList.length) {\\r\\n                    console.log(document.querySelector('.ba-more-btn'));\\r\\n                    document.querySelector('.ba-more-btn').hidden = false;\\r\\n                }\\r\\n                setAnswerList(response.data.answerList);\\r\\n                setStartPageNo(response.data.answerList.length / 2);\\r\\n            }, error => console.log(error));\\r\\n\\r\\n        return () => {\\r\\n        }\\r\\n    }, []);\\r\\n\\r\\n    return (\\r\\n        <div id=\\\"answerListDiv\\\" className='answer-list-div'>\\r\\n            {answerList.map((answer, index) => (\\r\\n\\r\\n                < div className='answer-div' key={index}>\\r\\n                    <form id={'answerUpdateForm' + index}>\\r\\n                        <div className='ba-title-container'>\\r\\n                            <img className='ba-member-profile'\\r\\n                                 src='http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg'/>\\r\\n                            <div className='ba-title-info'>\\r\\n                                <b>{answer.member.memberName}</b>\\r\\n                                <span><b>작성일:</b><input type='text'\\r\\n                                                        value={dateFormatParse(new Date(answer.mdfDatetime))}\\r\\n                                                        className='ba-input-text' disabled/></span>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        {answer.member.memberNo == props.loginUser.sub ?\\r\\n                            (\\r\\n                                <div>\\r\\n                                    <input type='text' name='answerNo' hidden\\r\\n                                           value={answer.answerNo}/>\\r\\n                                    <input type='text' name='reviewNo' hidden\\r\\n                                           value={answer.reviewNo}/>\\r\\n                                    <input type='text' name='memberNo' hidden\\r\\n                                           value={answer.member.memberNo}/>\\r\\n\\r\\n                                    <textarea name='answerContent' value={answer.answerContent}\\r\\n                                              className='ba-textarea' onChange={(e) => {\\r\\n                                        handleInputChange(e, index, answerList, setAnswerList);\\r\\n                                    }}/>\\r\\n                                    <div className='ba-btn-div'>\\r\\n                                        <button type='button' className='ba-btn ba-margin-right20'\\r\\n                                                onClick={\\r\\n                                                    () => {\\r\\n                                                        let jsonObj = formToJSON(new FormData(document.getElementById('answerUpdateForm' + index)));\\r\\n                                                        console.log(jsonObj);\\r\\n                                                        sendAxiosRequest(`/api/answer/update?`, 'POST', jsonObj, response => {\\r\\n                                                            window.location.reload();\\r\\n                                                            alert('답글이 성공적으로 변경되었습니다!');\\r\\n                                                        }, error => {\\r\\n                                                            console.log(error);\\r\\n                                                        });\\r\\n                                                    }\\r\\n                                                }>답글수정\\r\\n                                        </button>\\r\\n                                        <button type='button' className='ba-btn ba-margin-right80'\\r\\n                                                onClick={\\r\\n                                                    () => {\\r\\n                                                        sendAxiosRequest(`/api/answer/delete?answerNo=${answer.answerNo}`, 'GET', null, response => {\\r\\n                                                            window.location.reload();\\r\\n                                                            alert('답글이 성공적으로 삭제되었습니다!');\\r\\n                                                        }, error => {\\r\\n                                                            console.log(error);\\r\\n                                                        });\\r\\n                                                    }\\r\\n                                                }>답글삭제\\r\\n                                        </button>\\r\\n                                    </div>\\r\\n                                </div>)\\r\\n                            : (<textarea name='answerContent' value={answer.answerContent}\\r\\n                                         className='ba-textarea-disabled'/>)}\\r\\n                    </form>\\r\\n                </div>\\r\\n            ))\\r\\n            }\\r\\n            <div className='ba-btn-div'>\\r\\n                <button type='button' className='ba-more-btn' hidden onClick={(e) => {\\r\\n                    sendAxiosRequest(`/api/answer/list?reviewNo=${props.reviewNo}&startPage=${startPageNo}`, \\\"GET\\\", null,\\r\\n                        response => {\\r\\n                            console.log(response.data);\\r\\n                            let totalRows = response.data.totalRows;\\r\\n                            let appendAnswerList = response.data.answerList;\\r\\n                            let newAnswerList = [...answerList, ...appendAnswerList];\\r\\n                            setAnswerList(newAnswerList);\\r\\n                            setStartPageNo(newAnswerList.length / 2);\\r\\n                            if (totalRows <= newAnswerList.length) {\\r\\n                                e.target.hidden = true;\\r\\n                            }\\r\\n\\r\\n                        }, error => {\\r\\n                            console.log(error);\\r\\n                        })\\r\\n                }}>더 보기\\r\\n                </button>\\r\\n            </div>\\r\\n        </div>\\r\\n    );\\r\\n}\\r\\n\\r\\n\\r\\nexport default ReviewForm;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\StoreHome.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\StoreListItem.js\",[\"470\",\"471\",\"472\",\"473\",\"474\",\"475\",\"476\",\"477\",\"478\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport styles from './StoreListItem.module.css';\\r\\nimport { Link } from 'react-router-dom';\\r\\nimport { isOpenNow, sendAxiosRequest, startEndTimeInfo } from '../utility/common';\\r\\nimport { useUser } from '../Auth/UserContext';\\r\\n\\r\\nfunction StoreListItem(props) {\\r\\n  let [store, setStore] = useState(props.data);\\r\\n  let [open, setOpen] = useState('O');\\r\\n\\r\\n  useEffect(() => {\\r\\n    let startEndTime = startEndTimeInfo(store);\\r\\n    let openStatus = isOpenNow(startEndTime[0], startEndTime[1]);\\r\\n    setOpen(openStatus);\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <div className={styles.storeListItemBox}>\\r\\n      <img src='/images/boss.png' className={styles.storeListItemBoss} />\\r\\n      <div className={styles.storeListItemDetailTop}>\\r\\n        <div className={styles.storeListItemHeader}>\\r\\n          <strong className={styles.storeListItemDetailName}>{store.storeName}</strong>\\r\\n          <span className={styles.storeListItemDetailMarket}>{store.marketName}</span>\\r\\n        </div>\\r\\n        <p className={styles.storeListItemDetailIntroduce}>{store.storeAddr}</p>\\r\\n\\r\\n        <p className={styles.storeListItemBoxReview}>\\r\\n          <img className={styles.storeListItemFresh} src='/images/fresh.png' />5.0 (1024)\\r\\n        </p>\\r\\n        <p className={styles.storeListItemBoxState}>\\r\\n          <img className={styles.storeListItemStateIcon} src='/images/heart.png' />\\r\\n          {open == 'O' ? '영업중' : '영업종료'}\\r\\n        </p>\\r\\n        <div className={styles.storeListItemDetailBoxMore}>\\r\\n          <Link to=\\\"/market/detail\\\" state={store}>더보기&gt;</Link>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default StoreListItem;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Menu\\\\MenuItem.js\",[\"479\",\"480\",\"481\"],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\InputField.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\StoreInfo.js\",[\"482\"],[],\"// import React from 'react';\\r\\n// import Coupon from '../Coupon/Coupon'; \\r\\n\\r\\n// function StoreIntro({storeInfo, store, coupons }) {\\r\\n//   console.log(store);\\r\\n//   // console.log(storeInfo);\\r\\n\\r\\n//   return (\\r\\n//     <div style={outerContainer}>\\r\\n//     <div style={introContainer}>\\r\\n//       <img src={storeInfo.image} alt={storeInfo.name} style={imageStyle} />\\r\\n//      <div style={storeInfoContainer}>\\r\\n//       <h2>{store.storeName}</h2>\\r\\n//       <ul style={infoList}>\\r\\n//         <li>{store.storeDetailAddr}</li>\\r\\n//         <li>{store.weekdayStartTime} ~ {store.weekdayEndTime}</li>\\r\\n//         <li>{store.store}</li>\\r\\n//       </ul>\\r\\n//       </div>\\r\\n//       {/* <div style={couponContainer}>\\r\\n//         {coupons.map(coupon => (\\r\\n//           <Coupon key={coupon.id} coupon={coupon} />\\r\\n//         ))}\\r\\n//       </div> */}\\r\\n//     </div>\\r\\n//     </div>\\r\\n//   );\\r\\n// }\\r\\n\\r\\n// const outerContainer = {\\r\\n//   display: 'flex',\\r\\n//   justifyContent: 'center',\\r\\n//   alignItems: 'center',\\r\\n//   height: '50vh', // 화면 높이를 100%로 설정 (필요한 경우 조절)\\r\\n//   };\\r\\n\\r\\n// const introContainer = {\\r\\n//     display: 'flex',\\r\\n//     flexDirection: 'column', // children들을 열 방향으로 배열\\r\\n//     alignItems: 'center', // children들을 가운데 정렬\\r\\n//     backgroundColor: '#f0f0f0', // 연한 회색 배경\\r\\n//     padding: '0px',\\r\\n//     borderRadius: '8px', // 소프트한 테두리를 위한 둥근 모서리 추가\\r\\n//     textAlign: 'center',\\r\\n//     width : '70%',\\r\\n//     height: '100%'\\r\\n// };\\r\\n\\r\\n// const storeInfoContainer = {\\r\\n//     textAlign: 'left', \\r\\n//     padding: '20px',\\r\\n//     marginBottom: '50px', // 쿠폰 컨테이너와의 간격을 조절\\r\\n//     width : '100%',\\r\\n//   };\\r\\n\\r\\n// const imageStyle = {\\r\\n//   width: '100%',\\r\\n//   height: 'auto',\\r\\n//   objectFit: 'cover',\\r\\n// };\\r\\n\\r\\n// const infoList = {\\r\\n//   listStyleType: 'none',\\r\\n//   padding: '0',\\r\\n//   margin: '10px 0',\\r\\n// };\\r\\n\\r\\n\\r\\n// export default StoreIntro;\\r\\n\\r\\nimport React from 'react';\\r\\nimport Coupon from '../Coupon/Coupon'; \\r\\n\\r\\nfunction StoreIntro({storeInfo, store, coupons }) {\\r\\n\\r\\n  console.log('storeInfo,',storeInfo);\\r\\n\\r\\n  return (\\r\\n    <div style={outerContainer}>\\r\\n    <div style={introContainer}>\\r\\n      <img src={storeInfo.image} alt={storeInfo.name} style={imageStyle} />\\r\\n     <div style={storeInfoContainer}>\\r\\n      <h2>{storeInfo.name}</h2>\\r\\n      <ul style={infoList}>\\r\\n        <li>{storeInfo.storeDetailAddr}</li>\\r\\n        <li>{storeInfo.weekdayStartTime} ~ {storeInfo.weekdayEndTime}</li>\\r\\n        <li>{storeInfo.store}</li>\\r\\n      </ul>\\r\\n      </div>\\r\\n      {/* <div style={couponContainer}>\\r\\n        {coupons.map(coupon => (\\r\\n          <Coupon key={coupon.id} coupon={coupon} />\\r\\n        ))}\\r\\n      </div> */}\\r\\n    </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst outerContainer = {\\r\\n    display: 'flex',\\r\\n    justifyContent: 'center',\\r\\n    alignItems: 'center',\\r\\n    height: '50vh', // 화면 높이를 100%로 설정 (필요한 경우 조절)\\r\\n  };\\r\\n\\r\\nconst introContainer = {\\r\\n    display: 'flex',\\r\\n    flexDirection: 'column', // children들을 열 방향으로 배열\\r\\n    alignItems: 'center', // children들을 가운데 정렬\\r\\n    backgroundColor: '#f0f0f0', // 연한 회색 배경\\r\\n    padding: '0px',\\r\\n    borderRadius: '8px', // 소프트한 테두리를 위한 둥근 모서리 추가\\r\\n    textAlign: 'center',\\r\\n    width : '70%',\\r\\n    height: '100%'\\r\\n};\\r\\n\\r\\nconst storeInfoContainer = {\\r\\n    textAlign: 'left', \\r\\n    padding: '20px',\\r\\n    marginBottom: '10px', // 쿠폰 컨테이너와의 간격을 조절\\r\\n    width : '100%',\\r\\n  };\\r\\n\\r\\nconst imageStyle = {\\r\\n  width: '100%',\\r\\n  height: 'auto',\\r\\n  objectFit: 'cover',\\r\\n};\\r\\n\\r\\nconst infoList = {\\r\\n  listStyleType: 'none',\\r\\n  padding: '0',\\r\\n  margin: '10px 0',\\r\\n};\\r\\n\\r\\n\\r\\nexport default StoreIntro;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MainPage\\\\Category.js\",[\"483\",\"484\",\"485\"],[],\"import React, {useEffect, useState} from 'react';\\r\\nimport axios from 'axios';\\r\\nimport styles from './Category.module.css';\\r\\n\\r\\n\\r\\nfunction Category() {\\r\\n\\r\\n  const [selectedOption, setSelectedOption] = useState('');\\r\\n\\r\\n  const handleOptionChange = (event) => {\\r\\n    setSelectedOption(event.target.value);}\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n      <select value={selectedOption} onChange={handleOptionChange}>\\r\\n        <option value=\\\"option1\\\">옵션 1</option>\\r\\n        <option value=\\\"option2\\\">옵션 2</option>\\r\\n        <option value=\\\"option3\\\">옵션 3</option>\\r\\n      </select>\\r\\n\\r\\n      <p>{selectedOption}</p>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default Category;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\MyOrderContent.js\",[\"486\",\"487\",\"488\",\"489\"],[],\"import React, { useEffect, useReducer, useState } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport { Link } from 'react-router-dom';\\r\\nimport styles from './MyOrderContent.module.css';\\r\\nimport OrderMenuList from './OrderMenuList';\\r\\n\\r\\n\\r\\nfunction MyOrderContent() {\\r\\n\\r\\n  const [orders, setOrders] = useState([]);\\r\\n\\r\\n  useEffect(()=>{\\r\\n    axios.get('/api/order')\\r\\n    .then(response => setOrders(response.data))\\r\\n      .catch(error => console.log(error));\\r\\n    console.log(orders);\\r\\n  }, [])\\r\\n\\r\\n  // function onClick() {\\r\\n  //   console.log(orders);\\r\\n  // }\\r\\n\\r\\n  // const orders = orderlist;\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n    {orders.map(order=>(\\r\\n    <tr key={order.orderNo}>\\r\\n    <div>\\r\\n  \\r\\n    {/* <button onClick={onClick} >버튼</button> */}\\r\\n    <div className={styles.order_box}>\\r\\n      <div className={styles.order_store_title}>\\r\\n      <td>주문 번호 : {order.orderNo}</td>\\r\\n      <br/>\\r\\n      <td>주문일: {new Date(order.regDatetime).toLocaleDateString()}</td>\\r\\n      </div>\\r\\n      \\r\\n      <div className={styles.order_item_box}>\\r\\n        <img src='/images/fresh.png'/>\\r\\n        <Link className=\\\"text-ellipsis\\\" to={`/mypage/ordermenu/detail/${order && order.orderNo}`} style={{ color: '#909090' }}>\\r\\n        주문 상세보기\\r\\n        </Link>\\r\\n        {/* {order.OrderMenus.map(orderMenu => (\\r\\n          <div key={orderMenu.orderMenuNo}>\\r\\n            <td>주문메뉴번호{orderMenu.orderMenuNo}</td>\\r\\n            <td>메뉴번호{orderMenu.menuNo}</td>\\r\\n            <td>주문수량{orderMenu.menuNo}</td>\\r\\n          </div>\\r\\n        ))}  */}       \\r\\n        \\r\\n      </div>\\r\\n      \\r\\n      <div className={styles.order_result_box}>\\r\\n      <td>총액: {order.orderPrice}</td>\\r\\n      <br/>\\r\\n      <td>주문타입: {order.orderType === 'Q' ? '퀵배송' : order.orderType === 'T' ? '포장' : '기타'}</td>\\r\\n      <br/>\\r\\n      <td>요청사항: {order.orderRequest}</td>\\r\\n      <br/>\\r\\n      <td>핸드폰 번호: {order.recipientPhone}</td>\\r\\n      <br/>\\r\\n      <td>수령자: {order.recipientName}</td>\\r\\n      <br/>\\r\\n      <td>우편번호: {order.recipientZipcode}</td>\\r\\n      <br/>\\r\\n      <td>주소: {order.recipientAddr}</td>\\r\\n      <br/>\\r\\n      <td>상세주소: {order.recipientDetailAddr}</td>\\r\\n\\r\\n\\r\\n      </div>\\r\\n      </div>\\r\\n   \\r\\n    </div>\\r\\n    </tr>\\r\\n  ))}\\r\\n       </>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default MyOrderContent;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MainPage\\\\Announce.js\",[\"490\",\"491\",\"492\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport styles from './Announce.module.css';\\r\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\r\\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\\r\\nimport { Carousel } from 'react-bootstrap';\\r\\nimport { useLocation } from 'react-router-dom';\\r\\nimport ReactPlayer from 'react-player';\\r\\n\\r\\nfunction Announce() {\\r\\n  const carouselContainer = {\\r\\n    height: '400px',\\r\\n    width: '60%',\\r\\n    margin: '0 auto',\\r\\n    borderRadius: '30px',\\r\\n    overflow: 'hidden',\\r\\n    boxShadow: '0px 0px 5px 20px #1565c0', /* 옅은 파랑색 */\\r\\n  };\\r\\n\\r\\n  const location = useLocation();\\r\\n  const images = location.pathname !== '/store/list' ? [\\r\\n    \\\"/images/11ad1.png\\\",\\r\\n    \\\"/images/11ad2.png\\\",\\r\\n    \\\"/images/11ad3.png\\\",\\r\\n    \\\"/images/11ad4.png\\\",\\r\\n    \\\"/images/11ad5.png\\\",\\r\\n    \\\"https://www.youtube.com/watch?v=BTsODTH2SRk\\\" // Add the video URL here\\r\\n  ] : [\\r\\n    \\\"/images/login.png\\\"\\r\\n  ];\\r\\n\\r\\n  return (\\r\\n    <div style={carouselContainer}>\\r\\n      <Carousel>\\r\\n        {images.map((image, index) => (\\r\\n          <Carousel.Item key={index} id={styles.carousel}>\\r\\n            {index === images.length - 1 ? (\\r\\n              <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\\r\\n                <ReactPlayer url={image} playing style={{ margin: 'auto' }} />\\r\\n              </div>\\r\\n            ) : (\\r\\n              <img src={image} alt={`슬라이드 ${index + 1}`} />\\r\\n            )}\\r\\n          </Carousel.Item>\\r\\n        ))}\\r\\n      </Carousel>\\r\\n      <div>쿠폰div</div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default Announce;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MainPage\\\\Button.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\StoreHomeItem.js\",[\"493\",\"494\",\"495\",\"496\",\"497\",\"498\",\"499\",\"500\",\"501\",\"502\",\"503\",\"504\"],[],\"import React, {useEffect, useState} from 'react';\\r\\nimport axios from 'axios';\\r\\nimport styles from './StoreHomeItem.module.css';\\r\\nimport { Link, NavLink } from 'react-router-dom';\\r\\nimport Button from 'react-bootstrap/Button';\\r\\nimport Card from 'react-bootstrap/Card';\\r\\nimport Placeholder from 'react-bootstrap/Placeholder';\\r\\nimport { useNavigate } from \\\"react-router-dom\\\";\\r\\n\\r\\n\\r\\n\\r\\nfunction StoreHomeItem({store}) {\\r\\n\\r\\n  function isCurrentTimeInRange(startTime, endTime) {\\r\\n    // 현재 날짜와 시간을 생성\\r\\n    const currentDate = new Date();\\r\\n    // 시작 시간과 종료 시간을 파싱 (예: \\\"08:00\\\" 형식)\\r\\n    \\r\\n    // 현재 시간이 시작 시간과 종료 시간 사이에 있는지 확인\\r\\n    return currentDate >= startTime && currentDate <= endTime;\\r\\n  }\\r\\n\\r\\n  const startTime = new Date();\\r\\n  const [startHours, startMinutes, startSecond] = store.weekdayStartTime.split(':');\\r\\n  startTime.setHours(parseInt(startHours, 10));\\r\\n  startTime.setMinutes(parseInt(startMinutes, 10));\\r\\n  // startTime.setSecond(parseInt(startSecond, 10));\\r\\n\\r\\n  const endTime = new Date();\\r\\n  const [endHours, endMinutes, endSecond] = store.weekdayEndTime.split(':');\\r\\n  endTime.setHours(parseInt(endHours, 10));\\r\\n  endTime.setMinutes(parseInt(endMinutes, 10));\\r\\n  // endTime.setSecond(parseInt(endSecond, 10));\\r\\n\\r\\n  \\r\\n  const isWorking = isCurrentTimeInRange(startTime, endTime) ? '영업중' : '영업 종료';\\r\\n\\r\\n  // console.log(store);\\r\\n\\r\\n\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n    <Link to={'/market/detail'}\\r\\n      state= {store}\\r\\n      className={styles.storeHomeItemDetailBoxMore}>\\r\\n      <Card style={{ width: '18rem' }}>\\r\\n        <img className={styles.storeHomeItemBoss} variant=\\\"top\\\" src=\\\"/images/boss.png\\\" />\\r\\n        <div className={styles.storeHomeItemHeader}>\\r\\n          <p className={styles.storeHomeItemTitle}>{store.storeName}</p>\\r\\n          <p className={styles.storeHomeItemBoxReview}>\\r\\n            <img className={styles.storeHomeItemFresh}src=\\\"/images/fresh.png\\\"/>5.0\\r\\n          </p>\\r\\n        </div>\\r\\n        <div>\\r\\n        <p className={styles.storeHomeItemBoxReview}>\\r\\n        <img className={styles.storeHomeItemStateIcon} src=\\\"/images/heart.png\\\"/>{isWorking}</p>\\r\\n        </div>\\r\\n        {/* <Button className={styles.storeHomeItemDetailBoxMore}>\\r\\n          <Link to=\\\"/\\\" variant=\\\"primary\\\">더보기</Link>\\r\\n        </Button> */}\\r\\n      </Card>\\r\\n    </Link>\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default StoreHomeItem;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Review\\\\ReviewList.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Coupon\\\\Coupon.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\StoreItemDailyPrice\\\\StoreItemAdd.js\",[\"505\",\"506\",\"507\",\"508\"],[],\"import React, { useState, useEffect } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport { sendAxiosRequest } from '../utility/common';\\r\\nimport './StoreItemAdd.css';\\r\\nimport { useNavigate } from 'react-router-dom';\\r\\nimport { Hidden } from '@mui/material';\\r\\n\\r\\n\\r\\nfunction StroeItemAdd() {\\r\\n\\r\\n  const [fish, setFish] = useState('');\\r\\n  const [code, setCode] = useState('');\\r\\n  const [size, setSize] = useState('');\\r\\n  const [origin, setOrigin] = useState('');\\r\\n  const [place, setPlace] = useState('');\\r\\n  const [wild, setWild] = useState('');\\r\\n  const [price, setPrice] = useState('');\\r\\n\\r\\n  const handleCode = () => {\\r\\n    setCode(\\r\\n      (fish === '광어'||'우럭'||'도미'||'방어'||'참치') ? 'S' :\\r\\n      (fish === '연어') ? 'F' :\\r\\n      (fish === '오징어') ? 'E' :\\r\\n      (fish === '새우') ? 'C' :\\r\\n      (fish === '가리비'||'전복') ? 'M' : '')\\r\\n    }\\r\\n\\r\\n  const handleSize = (e) => {\\r\\n    setSize(e.target.value)\\r\\n  }\\r\\n\\r\\n  const handlePrice = (e) => {\\r\\n    setPrice(e.target.value)\\r\\n  }\\r\\n\\r\\n  const itemSize = \\r\\n  Number(size) >= 3 ? 'L' :\\r\\n  Number(size) >= 2 ? 'M' : 'S'\\r\\n  \\r\\n\\r\\n  const fishs = {\\r\\n    '광어': 1,\\r\\n    '우럭': 2,\\r\\n    '도미': 3,\\r\\n    '방어': 4,\\r\\n    '참치': 5,\\r\\n    '연어': 6,\\r\\n    '오징어': 7,\\r\\n    '새우': 8,\\r\\n    '가리비': 9,\\r\\n    '전복': 10\\r\\n  }\\r\\n\\r\\n  const codes = {\\r\\n    S: '생선/횟감',\\r\\n    F: '생선/비횟감',\\r\\n    C: '갑각류',\\r\\n    M: '패류',\\r\\n    E: '기타',\\r\\n  };\\r\\n\\r\\n  const DPlace = {\\r\\n    ES: '동해',\\r\\n    WS: '서해',\\r\\n    SS: '남해',\\r\\n    JJ: '제주',\\r\\n    WD: '완도'\\r\\n  }\\r\\n\\r\\n  const IPlace = {\\r\\n    JP: '일본',\\r\\n    CN: '중국',\\r\\n    RU: '러시아',\\r\\n    NW: '노르웨이'\\r\\n  }\\r\\n\\r\\n  const selectPlace = \\r\\n  (origin === \\\"D\\\") ? DPlace : \\r\\n  (origin === \\\"I\\\") ? IPlace : null;\\r\\n\\r\\n  const hiddenButtons = \\r\\n  (selectPlace !== null) ?\\r\\n    Object.keys(selectPlace).map((code) => (\\r\\n      <button\\r\\n        key={code}\\r\\n        className={place === code ? 'selected' : ''}\\r\\n        onClick={() => setPlace(code)}\\r\\n      >\\r\\n        {selectPlace[code]}\\r\\n      </button>\\r\\n    ))\\r\\n    : null;\\r\\n  \\r\\n  const navigate = useNavigate();\\r\\n  \\r\\n  const handleSubmit = () => {\\r\\n    console.log('dddd');\\r\\n    sendAxiosRequest ('/api/item/new', 'POST', item, response => {\\r\\n      console.log(response.data);\\r\\n      console.log(item);\\r\\n      navigate('/');\\r\\n    }, error => {\\r\\n      console.log(error);\\r\\n    });\\r\\n\\r\\n  };\\r\\n\\r\\n  const item = {\\r\\n    'itemName': fish,\\r\\n    'itemCode': code,\\r\\n    'itemSize': itemSize,\\r\\n    'originStatus': origin,\\r\\n    'originPlaceStatus': place,\\r\\n    'wildFarmStatus': wild\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  return (\\r\\n             <>\\r\\n               {/* 품목 선택 */}\\r\\n               <p>품목 선택</p>\\r\\n               <div className=\\\"freezer_box\\\">\\r\\n                 {Object.keys(fishs).map((name) => (\\r\\n                   <div\\r\\n                     key={name}\\r\\n                     className={`fish_item ${fish === name ? 'selected' : ''}`}\\r\\n                     onClick={() => {\\r\\n                       setFish(name);\\r\\n                       handleCode();\\r\\n                     }}\\r\\n                   >\\r\\n                     <img src={`/images/fish${fishs[name]}.jpg`} alt={name} className=\\\"fish_image\\\" />\\r\\n                     <p>{name}</p>\\r\\n                   </div>\\r\\n                 ))}\\r\\n               </div>\\r\\n\\r\\n               {/* 무게 입력 */}\\r\\n               <div className='fish_size'>\\r\\n                   <p>무게 입력 (kg)</p>\\r\\n                   <div>\\r\\n                       <input\\r\\n                           type='number'\\r\\n                           value={size}\\r\\n                           onChange={handleSize}\\r\\n                           placeholder='예) 2.5'\\r\\n                       />\\r\\n                   </div>\\r\\n               </div>\\r\\n\\r\\n               <div className='fish_price'>\\r\\n                   <p>금일 판매 가격 (원)</p>\\r\\n                   <div>\\r\\n                       <input\\r\\n                           type='number'\\r\\n                           value={price}\\r\\n                           onChange={handlePrice}\\r\\n                           placeholder='예) 10000'\\r\\n                       />\\r\\n                   </div>\\r\\n               </div>\\r\\n\\r\\n               <div className='fish_origin'>\\r\\n                   <p>원산지</p>\\r\\n                   <div className='origin_buttons'>\\r\\n                       <button\\r\\n                           className={origin === 'D' ? 'selected' : ''}\\r\\n                           onClick={() => setOrigin('D')}\\r\\n                       >\\r\\n                           국내산\\r\\n                       </button>\\r\\n                       <button\\r\\n                           className={origin === 'I' ? 'selected' : ''}\\r\\n                           onClick={() => setOrigin('I')}\\r\\n                       >\\r\\n                           수입산\\r\\n                       </button>\\r\\n                   </div>\\r\\n               </div>\\r\\n\\r\\n               {/* 판매 장소 선택 */}\\r\\n               <div className=\\\"fish_place\\\">\\r\\n                 <div className=\\\"filter_buttons\\\">{hiddenButtons}</div>\\r\\n               </div>\\r\\n\\r\\n               {/* 자연산/양식 선택 */}\\r\\n               <div className=\\\"fish_origin\\\">\\r\\n                 <p>자연산 / 양식</p>\\r\\n                 <div className=\\\"origin_buttons\\\">\\r\\n                   <button className={wild === 'W' ? 'selected' : ''} onClick={() => setWild('W')}>\\r\\n                     자연산\\r\\n                   </button>\\r\\n                   <button className={wild === 'F' ? 'selected' : ''} onClick={() => setWild('F')}>\\r\\n                     양식\\r\\n                   </button>\\r\\n                 </div>\\r\\n               </div>\\r\\n\\r\\n               {/* 제출하기 버튼 */}\\r\\n               <div className=\\\"submit_button\\\">\\r\\n                 <button onClick={handleSubmit}>제출하기</button>\\r\\n               </div>\\r\\n             </>\\r\\n           );\\r\\n         }\\r\\n\\r\\nexport default StroeItemAdd;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\routes\\\\StoreList.js\",[\"509\",\"510\",\"511\",\"512\",\"513\"],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Chat\\\\Chat.js\",[\"514\",\"515\"],[],\"import React, { useState, useRef, useEffect } from 'react';\\r\\nimport { MessageBox, ChatList } from 'react-chat-elements';\\r\\nimport 'react-chat-elements/dist/main.css';\\r\\nimport axios from 'axios';\\r\\n\\r\\nconst Chat = ({ closeModal }) => {\\r\\n    const [chatMessage, setChatMessage] = useState('');\\r\\n    const [response, setResponse] = useState('');\\r\\n    const [messages, setMessages] = useState([]);\\r\\n    const chatContainerRef = useRef(null);\\r\\n\\r\\n    const handleMessage = async () => {\\r\\n        try {\\r\\n            const response = await axios.post('/api/chat/message', chatMessage, {\\r\\n                headers: {\\r\\n                    'Content-Type': 'application/json',\\r\\n                },\\r\\n            });\\r\\n\\r\\n            setMessages((prevMessages) => [\\r\\n                ...prevMessages,\\r\\n                {\\r\\n                    position: 'right',\\r\\n                    type: 'text',\\r\\n                    text: chatMessage,\\r\\n                    date: new Date(),\\r\\n                },\\r\\n                {\\r\\n                    position: 'left',\\r\\n                    type: 'text',\\r\\n                    text: response.data,\\r\\n                    date: new Date(),\\r\\n                },\\r\\n            ]);\\r\\n\\r\\n            setResponse(response.data);\\r\\n            setChatMessage('');\\r\\n        } catch (error) {\\r\\n            console.error('Error:', error);\\r\\n        }\\r\\n    };\\r\\n\\r\\n    const handleKeyPress = (e) => {\\r\\n        if (e.key === 'Enter') {\\r\\n            handleMessage();\\r\\n        }\\r\\n    };\\r\\n\\r\\n    useEffect(() => {\\r\\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\\r\\n    }, [messages]);\\r\\n\\r\\n    const handleOutsideClick = (e) => {\\r\\n        if (e.target.classList.contains('chat-modal-container')) {\\r\\n            closeModal();\\r\\n        }\\r\\n    };\\r\\n\\r\\n    return (\\r\\n        <div\\r\\n            className=\\\"chat-modal-container\\\"\\r\\n            style={{\\r\\n                position: 'fixed',\\r\\n                top: 0,\\r\\n                left: 0,\\r\\n                width: '100%',\\r\\n                height: '100%',\\r\\n                display: 'flex',\\r\\n                alignItems: 'center',\\r\\n                justifyContent: 'center',\\r\\n                backgroundColor: 'rgba(0, 0, 0, 0.5)',\\r\\n                zIndex: 9999,\\r\\n            }}\\r\\n            onClick={handleOutsideClick}\\r\\n        >\\r\\n            <div\\r\\n                style={{\\r\\n                    backgroundColor: '#2F80ED',\\r\\n                    display: 'flex',\\r\\n                    flexDirection: 'column',\\r\\n                    padding: '20px',\\r\\n                    maxWidth: '600px',\\r\\n                    width: '70%',\\r\\n                    borderRadius: '20px',\\r\\n                    position: 'relative',\\r\\n                    maxHeight: '100%',\\r\\n                    overflow: 'auto',\\r\\n                }}\\r\\n            >\\r\\n                <ChatList\\r\\n                    className=\\\"chat-list\\\"\\r\\n                    dataSource={[\\r\\n                        {\\r\\n                            avatar: 'https://www.pngfind.com/pngs/m/676-6764066_fish-cartoon-images-fish-logo-png-transparent-png.png',\\r\\n                            alt: 'Fish',\\r\\n                            title: 'BA_ChatBot',\\r\\n                            subtitle: '무엇이든 물어보세요',\\r\\n                            date: new Date(),\\r\\n                            unread: 0,\\r\\n                        },\\r\\n                    ]}\\r\\n                    style={{ marginBottom: '20px' }}\\r\\n                />\\r\\n                <div\\r\\n                    ref={chatContainerRef}\\r\\n                    style={{ flex: '1', overflowY: 'auto', marginTop: '10px' }}\\r\\n                >\\r\\n                    {messages.map((message, index) => (\\r\\n                        <MessageBox\\r\\n                            key={index}\\r\\n                            position={message.position}\\r\\n                            type={message.type}\\r\\n                            text={message.text}\\r\\n                            date={message.date}\\r\\n                            avatar={\\r\\n                                message.position === 'left'\\r\\n                                    ? 'https://www.pngfind.com/pngs/m/676-6764066_fish-cartoon-images-fish-logo-png-transparent-png.png'\\r\\n                                    : null\\r\\n                            }\\r\\n                            text={message.text}\\r\\n                            title={message.position === 'left' ? 'BA_ChatBot' : 'You'}\\r\\n                            titleColor={message.position === 'left' ? '#FFFFFF' : '#4CAF50'}\\r\\n                            textFontSize={16}\\r\\n                            textFontColor=\\\"#333\\\"\\r\\n                            style={{\\r\\n                                backgroundColor: message.position === 'left' ? '#FFFFFF' : '#DCF8C6',\\r\\n                                borderRadius: message.position === 'left' ? '0px 10px 10px 10px' : '10px 0px 10px 10px',\\r\\n                                padding: '10px 15px',\\r\\n                                maxWidth: '70%',\\r\\n                                alignSelf: message.position === 'left' ? 'flex-start' : 'flex-end',\\r\\n                                marginBottom: 10,\\r\\n                            }}\\r\\n                        />\\r\\n                    ))}\\r\\n                </div>\\r\\n                <div style={{ display: 'flex', alignItems: 'center', marginTop: '20px' }}>\\r\\n                    <input\\r\\n                        type=\\\"text\\\"\\r\\n                        value={chatMessage}\\r\\n                        onChange={(e) => setChatMessage(e.target.value)}\\r\\n                        onKeyPress={handleKeyPress}\\r\\n                        style={{ flex: '1', padding: '15px', borderRadius: '30px', border: 'none', fontSize: '16px' }}\\r\\n                        placeholder=\\\"메시지를 입력하세요...\\\"\\r\\n                    />\\r\\n                    <button\\r\\n                        onClick={handleMessage}\\r\\n                        style={{\\r\\n                            marginLeft: '10px',\\r\\n                            padding: '15px 25px',\\r\\n                            borderRadius: '30px',\\r\\n                            border: 'none',\\r\\n                            backgroundColor: '#4CAF50',\\r\\n                            color: '#fff',\\r\\n                            cursor: 'pointer',\\r\\n                            fontSize: '16px',\\r\\n                        }}\\r\\n                    >\\r\\n                        보내기\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    );\\r\\n};\\r\\n\\r\\nexport default Chat;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Notice\\\\NoticeDetail.js\",[\"516\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport { Link, useParams } from 'react-router-dom';\\r\\n\\r\\nfunction NoticeDetail() {\\r\\n  const [notice, setNotice] = useState({});\\r\\n  const { noticeNo } = useParams();\\r\\n\\r\\n  useEffect(() => {\\r\\n    axios.get(`/api/notice/detail/${noticeNo}`)\\r\\n      .then(response => setNotice(response.data))\\r\\n      .catch(error => console.log(error));\\r\\n  }, [noticeNo]);\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"container\\\">\\r\\n      <div className=\\\"top-controls\\\"></div>\\r\\n      <div style={{ padding: \\\"0 12px\\\" }}>\\r\\n        <table className=\\\"board_list text-center\\\">\\r\\n          <colgroup>\\r\\n            <col width=\\\"20%\\\" />\\r\\n            <col width=\\\"80%\\\" />\\r\\n          </colgroup>\\r\\n          <thead>\\r\\n          <tr>\\r\\n          <th>제목</th>\\r\\n          <td className=\\\"text-left\\\">{notice.noticeTitle}</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n          <th>내용</th>\\r\\n          <td>{notice.noticeContent}</td>\\r\\n          </tr>\\r\\n          </thead>\\r\\n        </table>\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default NoticeDetail;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Notice\\\\NoticeList.js\",[\"517\",\"518\"],[],\"import React, {useEffect, useState} from 'react';\\r\\nimport axios from 'axios';\\r\\n//import Announce from '/components/MainPage/Announce';\\r\\nimport NoticeListItem from './NoticeListItem';\\r\\nimport { Routes, Route } from 'react-router-dom';\\r\\nimport styles from './NoticeList.css'\\r\\n\\r\\n\\r\\nfunction NoticeList() {\\r\\n\\r\\n  const [data, setData] = useState([]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    axios.get('/api/notice')\\r\\n      .then(response => setData(response.data))\\r\\n      .catch(error => console.log(error));\\r\\n      // console.log(data);\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n    <div className={styles.storeListBox}>\\r\\n      <NoticeListItem data={data}/>\\r\\n    </div>\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default NoticeList;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Notice\\\\NoticeListItem.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\OrderModal.js\",[\"519\",\"520\",\"521\",\"522\",\"523\",\"524\",\"525\",\"526\"],[],\"import React, { useState, useEffect } from 'react';\\r\\nimport './OrderModal.css';\\r\\nimport { useUser } from '../Auth/UserContext';\\r\\nimport OrderItem from './OrderItem';\\r\\nimport { sendAxiosRequest } from '../utility/common';\\r\\nimport Payment from '../Pay/Pay';\\r\\nimport { formToJSON } from 'axios';\\r\\n\\r\\nconst OrderModal = ({ store, menus, isOpen, onClose, setMenuData }) => {\\r\\n\\r\\n  \\r\\nconst {user, login, logout} = useUser();\\r\\n\\r\\nconst [order, setOrder] = useState({\\r\\n  orderType:'Q',\\r\\n  orderPrice:0,\\r\\n  orderRequest:'',\\r\\n  recipientPhone:'',\\r\\n  recipientName:'',\\r\\n  recipientZipcode:'',\\r\\n  recipientAddr:'',\\r\\n  recipientDetailAddr:'',\\r\\n  orderStatus:'',\\r\\n})\\r\\n\\r\\n  // OrderItem 변경 사항 적용\\r\\n    const updateMenuCount = (updateMenu)=> { \\r\\n      const updatedItems = menus?.map((menu) =>\\r\\n      menu.menuNo === updateMenu.menuNo ? updateMenu : menu\\r\\n    );\\r\\n      setMenuData(\\r\\n        updatedItems\\r\\n      )\\r\\n  };\\r\\n\\r\\n\\r\\n  const [orderMenus, setOrderMenus] = useState([])\\r\\n\\r\\n  let totalPrice = 0\\r\\n  let totalOrders = [];\\r\\n  \\r\\n \\r\\n  const handleSubmit = (event) => {\\r\\n    event.preventDefault();\\r\\n\\r\\n    setActiveSection('deliveryMethod');\\r\\n\\r\\n  }\\r\\n  \\r\\n\\r\\n  // 수령 방식 변경 사항을 저장\\r\\n  const handleInputChange = (event) => {\\r\\n    const { name, value } = event.target;\\r\\n    setOrder(prevDetails => ({\\r\\n      ...prevDetails,\\r\\n      [name]: value,\\r\\n    }));\\r\\n  };\\r\\n\\r\\n\\r\\n  // order, orderMenu 생성 및 결제 진행\\r\\n  const handleOrder = (event) => {\\r\\n    event.preventDefault();\\r\\n    // console.log(orderMenus)\\r\\n\\r\\n\\r\\n   // orderMenu 생성\\r\\n    menus.filter((menu) => menu.count !== 0).map((menu) => {\\r\\n      \\r\\n      totalPrice += menu.count * menu.menuPrice\\r\\n\\r\\n      totalOrders.push({\\r\\n        menuNo: Number(menu.menuNo),\\r\\n        orderMenuCount: Number(menu.count),\\r\\n        // orderNo: 0,\\r\\n        // memberNo:0,\\r\\n      })\\r\\n    })\\r\\n    \\r\\n    setOrderMenus(totalOrders)\\r\\n\\r\\n\\r\\n\\r\\n    setOrder({\\r\\n      ...order, orderPrice: totalPrice\\r\\n    })\\r\\n\\r\\n    // console.log(orderMenus)\\r\\n    // console.log(typeof(orderMenus[0].menuNo))\\r\\n\\r\\n\\r\\n    // 주문 생성\\r\\n    sendAxiosRequest('/api/order/new', 'POST', order, response => {\\r\\n      if (response.data && response.data.length > 0) {\\r\\n        console.log(\\\"주문 생성에 성공했습니다:\\\", response.data);\\r\\n      }\\r\\n    }, error => {\\r\\n      console.error(\\\"주문 생성에 실패했습니다:\\\", error);\\r\\n    });\\r\\n\\r\\n    \\r\\n    //주문 메뉴 추가 생성\\r\\n    setTimeout(() => {\\r\\n      orderMenus.map((orderMenu) => {\\r\\n        console.log('orderMenu=> : ', orderMenu);\\r\\n\\r\\n        sendAxiosRequest('/api/ordermenu/new', 'POST', orderMenu, response => {\\r\\n          if (response.data && response.data.length > 0) {\\r\\n            console.log(\\\"주문메뉴 생성에 성공했습니다:\\\", response.data);\\r\\n            // console.log('orderMenu=> : ', orderMenu);\\r\\n            console.log(typeof(orderMenu.menuNo))\\r\\n          }\\r\\n        }, error => {\\r\\n          console.error(\\\"주문메뉴 생성에 실패했습니다:\\\", error);\\r\\n        });\\r\\n      })\\r\\n    }, 6000);\\r\\n\\r\\n    \\r\\n    \\r\\n  }\\r\\n\\r\\n\\r\\n  const [activeSection, setActiveSection] = useState('orderInfo'); // 현재 활성화된 섹션을 추적\\r\\n\\r\\n  const switchSection = (section) => {\\r\\n    setActiveSection(section);\\r\\n  };\\r\\n\\r\\n  if (!isOpen) return null;\\r\\n\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"orderModalBackground\\\">\\r\\n      <div className=\\\"orderModalContainer\\\">\\r\\n        <div className=\\\"orderModalHeader\\\">\\r\\n          <button className=\\\"closeButton\\\" onClick={onClose}>X</button>\\r\\n        </div>\\r\\n\\r\\n        <div className=\\\"sectionButtons\\\">\\r\\n          <button onClick={() => switchSection('orderInfo')}>주문 정보</button>\\r\\n          <button onClick={() => switchSection('deliveryMethod')}>수령 방식</button>\\r\\n        </div>\\r\\n\\r\\n        {activeSection === 'orderInfo' && (\\r\\n          <form onSubmit={handleSubmit}>\\r\\n            <h2>주문 정보</h2>\\r\\n\\r\\n            <div>\\r\\n              {menus?.map((menu) => \\r\\n                <OrderItem key={menu.menuNo} menu={menu}  update = {updateMenuCount} />\\r\\n              )}\\r\\n            </div>\\r\\n\\r\\n            <button type=\\\"submit\\\">주문 정보 제출</button>\\r\\n          </form>\\r\\n        )}\\r\\n\\r\\n\\r\\n\\r\\n        {activeSection === 'deliveryMethod' && (\\r\\n          <div>\\r\\n            {/* 수령 방식 선택 부분 */}\\r\\n            <h2>수령 방식</h2>\\r\\n\\r\\n            <div>\\r\\n              <label>\\r\\n                <input\\r\\n                  type=\\\"radio\\\"\\r\\n                  name=\\\"orderType\\\"\\r\\n                  value='Q'\\r\\n                  checked={order.orderType === 'Q'}\\r\\n                  onChange={handleInputChange}\\r\\n                />\\r\\n                퀵배송\\r\\n              </label>\\r\\n              <label>\\r\\n                <input\\r\\n                  type=\\\"radio\\\"\\r\\n                  name=\\\"orderType\\\"\\r\\n                  value='T'\\r\\n                  checked={order.orderType === 'T'}\\r\\n                  onChange={handleInputChange}\\r\\n                />\\r\\n                포장\\r\\n              </label>\\r\\n            </div>\\r\\n\\r\\n            <h2>수령 정보</h2>\\r\\n            <input\\r\\n            type=\\\"text\\\"\\r\\n            name=\\\"recipientName\\\"\\r\\n            placeholder=\\\"이름\\\"\\r\\n            value={order.recipientName}\\r\\n            onChange={handleInputChange}\\r\\n            required\\r\\n          />\\r\\n          <input\\r\\n            type=\\\"text\\\"\\r\\n            name=\\\"recipientPhone\\\"\\r\\n            placeholder=\\\"전화번호\\\"\\r\\n            value={order.recipientPhone}\\r\\n            onChange={handleInputChange}\\r\\n            required\\r\\n          />\\r\\n          <input\\r\\n            type=\\\"text\\\"\\r\\n            name=\\\"recipientZipcode\\\"\\r\\n            placeholder=\\\"우편번호\\\"\\r\\n            value={order.recipientZipcode}\\r\\n            onChange={handleInputChange}\\r\\n            required\\r\\n          />\\r\\n          <input\\r\\n            type=\\\"text\\\"\\r\\n            name=\\\"recipientAddr\\\"\\r\\n            placeholder=\\\"기본주소\\\"\\r\\n            value={order.recipientAddr}\\r\\n            onChange={handleInputChange}\\r\\n            required\\r\\n          />\\r\\n          <input\\r\\n            type=\\\"text\\\"\\r\\n            name=\\\"recipientDetailAddr\\\"\\r\\n            placeholder=\\\"상세주소\\\"\\r\\n            value={order.recipientDetailAddr}\\r\\n            onChange={handleInputChange}\\r\\n            required\\r\\n          />\\r\\n          <input\\r\\n            type=\\\"text\\\"\\r\\n            name=\\\"orderRequest\\\"\\r\\n            placeholder=\\\"요청사항\\\"\\r\\n            value={order.orderRequest}\\r\\n            onChange={handleInputChange}\\r\\n            required\\r\\n          />\\r\\n            <button onClick={handleOrder}>결제하기</button>\\r\\n            {/* <Payment onClick={handleOrder}>결제하기</Payment> */}\\r\\n          </div>\\r\\n        )}\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\n          \\r\\n\\r\\nexport default OrderModal;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Admin\\\\AdminNoticeList.js\",[\"527\",\"528\"],[],\"import React, {useEffect, useState} from 'react';\\r\\nimport axios from 'axios';\\r\\n//import Announce from '/components/MainPage/Announce';\\r\\nimport AdminNoticeListItem from './AdminNoticeListItem';\\r\\nimport { Routes, Route } from 'react-router-dom';\\r\\nimport styles from '../Notice/NoticeList.css'\\r\\n\\r\\n\\r\\nfunction AdminNoticeList() {\\r\\n\\r\\n  const [data, setData] = useState([]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    axios.get('/api/notice')\\r\\n      .then(response => setData(response.data))\\r\\n      .catch(error => console.log(error));\\r\\n      // console.log(data);\\r\\n  }, []);\\r\\n  \\r\\n\\r\\n  return (\\r\\n    <>\\r\\n    <div className={styles.storeListBox}>\\r\\n      <AdminNoticeListItem data={data}/>\\r\\n    </div>\\r\\n    </>\\r\\n  )\\r\\n}\\r\\n\\r\\nexport default AdminNoticeList;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Admin\\\\AdminNoticeDetail.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Admin\\\\NoticeRegisterationForm.js\",[\"529\"],[],\"import React, { useState } from 'react';\\r\\nimport { useNavigate } from 'react-router-dom';\\r\\nimport axios, { formToJSON } from 'axios';\\r\\nimport { sendAxiosRequest } from '../utility/common';\\r\\n\\r\\nfunction NoticeRegisterationForm() {\\r\\n  const [notice, setNotice] = useState({\\r\\n    noticeTitle: 'title',\\r\\n    noticeContent: 'content',\\r\\n  });\\r\\n\\r\\n  const handleChange = (e) => {\\r\\n    const { name, value } = e.target;\\r\\n    setNotice({ ...notice, [name]: value });\\r\\n  };\\r\\n\\r\\n\\r\\n  const navigate = useNavigate();\\r\\n\\r\\n  const handleSubmit = (e) => {\\r\\n    e.preventDefault();\\r\\n\\r\\n    let formData = new FormData(e.target);\\r\\n    let formObj = formToJSON(formData);\\r\\n    sendAxiosRequest('/api/notice/new', 'POST', formObj, response => {\\r\\n      console.log('응답값:', response.data);\\r\\n      alert('공지사항이 등록 되었습니다.');\\r\\n      navigate('/admin/notice/list');\\r\\n    },\\r\\n      error => {\\r\\n        console.error('API 호출 중 에러 발생: ', error);\\r\\n        alert('공지사항 등록에 실패하셨습니다!');\\r\\n      }\\r\\n    )\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div style={styles.container}>\\r\\n      <form onSubmit={handleSubmit} style={styles.form}>\\r\\n      <h2>공지사항 등록</h2>\\r\\n        <div>\\r\\n          <label>제목 </label>\\r\\n          <input style={styles.input} type=\\\"text\\\" name=\\\"noticeTitle\\\" value={notice.noticeTitle} onChange={handleChange} />\\r\\n        </div>\\r\\n        <div>\\r\\n          <label>내용 </label>\\r\\n          <input style={styles.input} type=\\\"text\\\" name=\\\"noticeContent\\\" value={notice.noticeContent} onChange={handleChange} />\\r\\n        </div>\\r\\n        <button type=\\\"submit\\\" style={styles.submitButton}>등록</button>\\r\\n      </form>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst styles = {\\r\\n  container: {\\r\\n    display: 'flex',\\r\\n    justifyContent: 'center',\\r\\n    alignItems: 'center',\\r\\n    height: '30vh',\\r\\n  },\\r\\n  form: {\\r\\n    display: 'flex',\\r\\n    flexDirection: 'column',\\r\\n    alignItems: 'center', // 폼 내용을 중앙 정렬합니다.\\r\\n    padding: '20px',  // 내부 패딩을 추가합니다.\\r\\n    borderRadius: '12px',  // 모서리를 둥글게 합니다.\\r\\n    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)', // 약간의 그림자 효과를 추가합니다.\\r\\n    background: 'white', // 배경색을 흰색으로 설정합니다.\\r\\n    width: '800px',\\r\\n  },\\r\\n  input: {\\r\\n    padding: '10px',\\r\\n    margin: '5px 0',\\r\\n    borderRadius: '6px',\\r\\n    border: '1px solid #ccc',\\r\\n    outline: 'none',\\r\\n    width: '300px',\\r\\n  },\\r\\n  submitButton: {\\r\\n    padding: '10px 20px',\\r\\n    cursor: 'pointer',\\r\\n    backgroundColor: '#0575E6',\\r\\n    border: 'none',\\r\\n    borderRadius: '8px',\\r\\n    color: 'white',\\r\\n  },\\r\\n}\\r\\n\\r\\n\\r\\nexport default NoticeRegisterationForm;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Admin\\\\AdminNoticeListItem.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\OrderItem.js\",[\"530\",\"531\"],[],\"import React, { useState, useEffect } from 'react';\\r\\nimport './OrderModal.css';\\r\\nimport { useUser } from '../Auth/UserContext';\\r\\nimport axios from 'axios';\\r\\n\\r\\nfunction OrderItem({ key, menu, orderMenu, update }) {\\r\\n  // console.log(menu)\\r\\n  const [localItem, setLocalItem] = useState(menu);\\r\\n\\r\\n\\r\\n\\r\\n  useEffect(()=> {\\r\\n    const imgs = axios.get(`/api/menu/detail/${menu.menuNo}`);\\r\\n    setLocalItem({\\r\\n      ...localItem,\\r\\n      menuImg: imgs\\r\\n    })\\r\\n  }, [])\\r\\n\\r\\n  const handleNameChange = (e) => {\\r\\n    if (e.target.value >= 0) {\\r\\n      const newName = e.target.value;\\r\\n      setLocalItem({ ...localItem, count: newName });\\r\\n      update({ ...localItem, count: newName });\\r\\n      // update(localItem)\\r\\n      console.log('발동')\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n    <div className='order-item-box'>\\r\\n      \\r\\n      <div style={{overflow:'hidden'}}>\\r\\n        <img src={`https:kr.object.ncloudstorage.com/bleuauction-bucket/menu/${menu.menuAttaches[0].saveFilename}`}\\r\\n              alt={menu.menuAttaches[0].originFilename}/>\\r\\n      </div>\\r\\n\\r\\n      <div>\\r\\n        <p>{menu.menuName}</p>\\r\\n      </div>\\r\\n\\r\\n      <div>\\r\\n        <p>{menu.menuSize}</p>\\r\\n      </div>\\r\\n\\r\\n      <div>\\r\\n       <p>{menu.menuPrice}</p>\\r\\n      </div>\\r\\n\\r\\n      <div>\\r\\n        {/* <button onClick={()=>setCount(count + 1)}>+</button> */}\\r\\n        <input\\r\\n              type=\\\"number\\\"\\r\\n              name='count'\\r\\n              value={localItem.count}\\r\\n              onChange={handleNameChange}\\r\\n            />\\r\\n        {/* <button onClick={()=>setCount(count + 1)}>-</button> */}\\r\\n      </div>\\r\\n      \\r\\n    </div>\\r\\n    </>\\r\\n  );\\r\\n}\\r\\n\\r\\n          \\r\\n\\r\\nexport default OrderItem;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\OrderMenuList.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\StoreOrder.js\",[\"532\",\"533\",\"534\"],[],\"import React, { useEffect, useReducer, useState } from 'react';\\r\\nimport axios from 'axios';\\r\\nimport { Link } from 'react-router-dom';\\r\\nimport styles from './MyOrderContent.module.css';\\r\\n\\r\\n\\r\\n\\r\\nfunction StoreOrder() {\\r\\n\\r\\n  const [orders, setOrders] = useState([]);\\r\\n\\r\\n  useEffect(()=>{\\r\\n    axios.get('/api/store/order')\\r\\n    .then(response => setOrders(response.data))\\r\\n      .catch(error => console.log(error));\\r\\n    console.log(orders);\\r\\n  }, [])\\r\\n\\r\\n\\r\\n  return (\\r\\n    <>\\r\\n    <h1>주문확인</h1>\\r\\n    {orders.map(order=>(\\r\\n    <tr key={order.orderNo}>\\r\\n      \\r\\n    <div>\\r\\n    \\r\\n    {/* <button onClick={onClick} >버튼</button> */}\\r\\n    <div className={styles.order_box}>\\r\\n      <div className={styles.order_store_title}>\\r\\n      <td>주문 번호 : {order.orderNo}</td>\\r\\n      <br/>\\r\\n      <td>주문일: {new Date(order.regDatetime).toLocaleDateString()}</td>\\r\\n      </div>\\r\\n      \\r\\n      <div className={styles.order_item_box}>\\r\\n        <img src='/images/fresh.png'/>\\r\\n        <Link className=\\\"text-ellipsis\\\" to={`/order/detail/${order && order.orderNo}`} style={{ color: '#909090' }}>\\r\\n        주문 상세보기\\r\\n        </Link>\\r\\n\\r\\n      \\r\\n        </div>\\r\\n      \\r\\n      <div className={styles.order_result_box}>\\r\\n      <td>총액: {order.orderPrice}</td>\\r\\n      <br/>\\r\\n      <td>주문타입: {order.orderType === 'Q' ? '퀵배송' : order.orderType === 'T' ? '포장' : '기타'}</td>\\r\\n      <br/>\\r\\n      <td>요청사항: {order.orderRequest}</td>\\r\\n      <br/>\\r\\n      <td>핸드폰 번호: {order.recipientPhone}</td>\\r\\n      <br/>\\r\\n      <td>수령자: {order.recipientName}</td>\\r\\n      <br/>\\r\\n      <td>우편번호: {order.recipientZipcode}</td>\\r\\n      <br/>\\r\\n      <td>주소: {order.recipientAddr}</td>\\r\\n      <br/>\\r\\n      <td>상세주소: {order.recipientDetailAddr}</td>\\r\\n      \\r\\n      \\r\\n\\r\\n\\r\\n\\r\\n      </div>\\r\\n      </div>\\r\\n   \\r\\n    </div>\\r\\n    </tr>\\r\\n  ))}\\r\\n       </>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default StoreOrder;\\r\\n\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\StoreEdit.js\",[\"535\",\"536\",\"537\",\"538\",\"539\",\"540\",\"541\"],[],\"import React, { useState, useEffect } from 'react';\\r\\nimport { sendAxiosRequest, sendAxiosMultipartRequest, getAccessToken } from '../utility/common';\\r\\nimport axios from 'axios';\\r\\nimport { formToJSON } from 'axios';\\r\\nimport { useUser } from '../Auth/UserContext';\\r\\nimport jwtDecode from 'jwt-decode';\\r\\n\\r\\n// \\r\\nfunction StoreEditPage() {\\r\\n  const defaultImage = '/images/rose.png';\\r\\n  const [store, setStore] = useState(null);\\r\\n  const [currentImage, setCurrentImage] = useState(defaultImage);\\r\\n  const [loginUser, setLoginUser] = useState(null);\\r\\n  const accessToken = sessionStorage.getItem('accessToken');\\r\\n  const tokenMember = jwtDecode(accessToken);\\r\\n console.log(\\\"토큰멤버\\\",tokenMember);\\r\\n \\r\\n\\r\\n  // 메뉴 확인 테스트용\\r\\n  useEffect(() => {\\r\\n    sendAxiosRequest('/api/menu/store', 'GET', tokenMember, (response) => {\\r\\n      console.log(\\\"응답 성공\\\",response.data)\\r\\n    }, (error) => {\\r\\n      console.log(\\\"응답 실패\\\",error);\\r\\n    }, null, accessToken);\\r\\n  }, []);\\r\\n\\r\\n  // useEffect(() => {\\r\\n  //   sendAxiosRequest('/api/store/loginCheck', 'GET', null, (response) => {\\r\\n  //     setLoginUser(response.data.loginUser);\\r\\n  //   }, (error) => {\\r\\n  //     console.log(error);\\r\\n  //   });\\r\\n  // }, []);\\r\\n\\r\\n  // useEffect(() => {\\r\\n  //   if (loginUser) {\\r\\n  //     sendAxiosRequest(`/api/store/detailByMember?member=${loginUser?.memberNo}`, 'GET', null, (res) => {\\r\\n  //       setStore(res.data);\\r\\n  //     }, (err) => {\\r\\n  //       console.error('Failed to fetch store details', err);\\r\\n  //     });\\r\\n  //   }\\r\\n  // }, [loginUser]);\\r\\n\\r\\n  function updateStore(e) {\\r\\n    e.preventDefault();\\r\\n    let storeForm = new FormData(document.getElementById('storeForm'));\\r\\n\\r\\n    // 이미지 파일 추가 (있는 경우)\\r\\n    const fileInput = document.getElementById('imageInput');\\r\\n    if (fileInput.files[0]) {\\r\\n      storeForm.append('profileImage', fileInput.files[0]);\\r\\n    }\\r\\n\\r\\n    console.log('formData: ', storeForm);\\r\\n    // Axios를 이용하여 멀티파트 폼 데이터를 서버로 전송합니다.\\r\\n    sendAxiosMultipartRequest('/api/store/update', formToJSON(storeForm), (response) => {\\r\\n      console.log(\\\"수정한 정보\\\", formToJSON(storeForm))\\r\\n      console.log(response.data);\\r\\n      // 성공적으로 업데이트된 경우에 수행할 작업을 추가하세요\\r\\n    }, (error) => {\\r\\n      console.error('가게 업데이트 중에 오류가 발생했습니다', error);\\r\\n      // 오류 발생 시 처리를 추가하세요\\r\\n    }, null, accessToken);\\r\\n  }\\r\\n\\r\\n  const handleImageChange = (event) => {\\r\\n    if (event.target.files && event.target.files[0]) {\\r\\n      const reader = new FileReader();\\r\\n\\r\\n      reader.onload = (e) => {\\r\\n        setCurrentImage(e.target.result);\\r\\n      };\\r\\n\\r\\n      reader.readAsDataURL(event.target.files[0]);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const handleImageClick = () => {\\r\\n    document.getElementById('imageInput').click();\\r\\n  };\\r\\n\\r\\n  const styles = {\\r\\n    container: {\\r\\n      display: 'flex',\\r\\n      flexDirection: 'row',\\r\\n      alignItems: 'flex-start',\\r\\n      padding: '20px',\\r\\n      justifyContent: 'center'\\r\\n    },\\r\\n    profilePicture: {\\r\\n      width: '200px',\\r\\n      height: '200px',\\r\\n      borderRadius: '100px',\\r\\n      marginBottom: '20px',\\r\\n      alignSelf: 'flex-start',\\r\\n    },\\r\\n    formSection: {\\r\\n      display: 'flex',\\r\\n      flexDirection: 'column',\\r\\n      alignItems: 'flex-start',\\r\\n      marginLeft: '20px',\\r\\n    },\\r\\n    title: {\\r\\n      fontSize: '24px',\\r\\n      fontWeight: 'bold',\\r\\n      marginBottom: '20px',\\r\\n      textAlign: 'center',\\r\\n    },\\r\\n    buttonStyle: {\\r\\n      border: 'none',\\r\\n      margin: '10px 0',\\r\\n      padding: '10px',\\r\\n      borderRadius: '4px',\\r\\n      backgroundColor: '#C4C4C433',\\r\\n      textAlign: 'center',\\r\\n      width: '500px',\\r\\n      cursor: 'pointer',\\r\\n    },\\r\\n  };\\r\\n\\r\\n  // if (store === null) {\\r\\n  //   return <div>Loading...</div>;\\r\\n  // } else {\\r\\n    const { marketName, storeName, licenseNo, storeZipcode, storeAddr, storeDetailAddr, weekdayStartTime, weekdayEndTime, weekendStartTime, weekendEndTime } = store || {};\\r\\n\\r\\n    return (\\r\\n      <div style={styles.container}>\\r\\n        <form id='storeForm' onSubmit={updateStore}>\\r\\n          <img src={currentImage} alt={storeName} style={styles.profilePicture} onClick={handleImageClick} />\\r\\n          <button type=\\\"button\\\" style={styles.buttonStyle} onClick={() => { document.getElementById('imageInput').click() }}>사진 등록</button>\\r\\n          <input\\r\\n            type=\\\"file\\\"\\r\\n            style={{ display: 'none' }}\\r\\n            id=\\\"imageInput\\\"\\r\\n            onChange={handleImageChange}\\r\\n          />\\r\\n          <div style={styles.formSection}>\\r\\n            <h1 style={styles.title}>가게 정보 수정</h1>\\r\\n            <div>\\r\\n              <label>시장명: </label>\\r\\n              <input style={styles.input} type=\\\"text\\\" name=\\\"marketName\\\" defaultValue={marketName} />\\r\\n            </div>\\r\\n            <div>\\r\\n              <label>가게명: </label>\\r\\n              <input style={styles.input} type=\\\"text\\\" name=\\\"storeName\\\" defaultValue={storeName} />\\r\\n            </div>\\r\\n            <div>\\r\\n              <label>사업자등록번호: </label>\\r\\n              <input style={styles.input} type=\\\"text\\\" name=\\\"licenseNo\\\" defaultValue={licenseNo} />\\r\\n            </div>\\r\\n            <div>\\r\\n              <label>우편번호: </label>\\r\\n              <input style={styles.input} type=\\\"text\\\" name=\\\"storeZipcode\\\" defaultValue={storeZipcode} />\\r\\n            </div>\\r\\n            <div>\\r\\n              <label>기본주소: </label>\\r\\n              <input style={styles.input} type=\\\"text\\\" name=\\\"storeAddr\\\" defaultValue={storeAddr} />\\r\\n            </div>\\r\\n            <div>\\r\\n              <label>상세주소: </label>\\r\\n              <input style={styles.input} type=\\\"text\\\" name=\\\"storeDetailAddr\\\" defaultValue={storeDetailAddr} />\\r\\n            </div>\\r\\n            <div>\\r\\n              <label>평일운영시작시간: </label>\\r\\n              <input style={styles.input} type=\\\"time\\\" name=\\\"weekdayStartTime\\\" defaultValue={weekdayStartTime} />\\r\\n            </div>\\r\\n            <div>\\r\\n              <label>평일운영종료시간: </label>\\r\\n              <input style={styles.input} type=\\\"time\\\" name=\\\"weekdayEndTime\\\" defaultValue={weekdayEndTime} />\\r\\n            </div>\\r\\n            <div>\\r\\n              <label>주말운영시작시간: </label>\\r\\n              <input style={styles.input} type=\\\"time\\\" name=\\\"weekendStartTime\\\" defaultValue={weekendStartTime} />\\r\\n            </div>\\r\\n            <div>\\r\\n              <label>주말운영종료시간: </label>\\r\\n              <input style={styles.input} type=\\\"time\\\" name=\\\"weekendEndTime\\\" defaultValue={weekendEndTime} />\\r\\n            </div>\\r\\n            <button type=\\\"submit\\\" style={styles.submitButton} onClick={updateStore}>수정</button>\\r\\n          </div>\\r\\n        </form>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n// }\\r\\n\\r\\nexport default StoreEditPage;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\OS\\\\OS.js\",[],[],\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\Market\\\\StoreInfoDetail.js\",[\"542\"],[],\"\\r\\nimport React from 'react';\\r\\n\\r\\nfunction StoreInfoDetail({storeDetail}) {\\r\\n\\r\\n  console.log('storeDetail,',storeDetail);\\r\\n  // console.log(storeInfo);\\r\\n\\r\\n    // storeDetail아 null이거나 필요한 속성이 없으면 렌더링하지 않습니다.\\r\\n    if (!storeDetail) {\\r\\n        return <div>Loading...</div>; // 혹은 다른 대체 컨텐츠\\r\\n      }\\r\\n  return (\\r\\n    <div style={outerContainer}>\\r\\n    <div style={introContainer}>\\r\\n      {/* <img src={storeDetail.image} alt={storeDetail.name} style={imageStyle} /> */}\\r\\n     <div style={storeInfoContainer}>\\r\\n      <h2>{storeDetail.storeName}</h2>\\r\\n      <ul style={infoList}>\\r\\n        <li style={listItem}>시장 이름:{storeDetail.marketName}</li>\\r\\n        <li style={listItem}>기본 주소:{storeDetail.storeAddr}</li>\\r\\n        <li style={listItem}>상세 주소:{storeDetail.storeDetailAddr}</li>\\r\\n        <li style={listItem}>사업등록번호:{storeDetail.licenseNo}</li>\\r\\n        <li style={listItem}>운영시간:{storeDetail.weekdayStartTime} ~ {storeDetail.weekdayEndTime}</li>\\r\\n        <li style={listItem}>{storeDetail.store}</li>\\r\\n      </ul>\\r\\n      </div>\\r\\n      {/* <div style={couponContainer}>\\r\\n        {coupons.map(coupon => (\\r\\n          <Coupon key={coupon.id} coupon={coupon} />\\r\\n        ))}\\r\\n      </div> */}\\r\\n    </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nconst outerContainer = {\\r\\n    display: 'flex',\\r\\n    justifyContent: 'center',\\r\\n    alignItems: 'center',\\r\\n    height: '100vh',\\r\\n    // backgroundColor: '#f7f7f7', // 아주 연한 회색 배경으로 조정\\r\\n  };\\r\\n\\r\\nconst introContainer = {\\r\\n    display: 'flex',\\r\\n    flexDirection: 'column', // children들을 열 방향으로 배열\\r\\n    alignItems: 'center', // children들을 가운데 정렬\\r\\n    // backgroundColor: '#f0f0f0',// 연한 회색 배경\\r\\n    padding: '0px',\\r\\n    borderRadius: '8px', // 소프트한 테두리를 위한 둥근 모서리 추가\\r\\n    textAlign: 'center',\\r\\n    width : '70%',\\r\\n    height: '100%'\\r\\n};\\r\\n\\r\\nconst storeInfoContainer = {\\r\\n    textAlign: 'left', \\r\\n    padding: '20px',\\r\\n    marginBottom: '10px', // 쿠폰 컨테이너와의 간격을 조절\\r\\n    width : '100%',\\r\\n  };\\r\\n\\r\\nconst imageStyle = {\\r\\n//   width: '100%',\\r\\n//   height: 'auto',\\r\\n//   objectFit: 'cover',\\r\\n};\\r\\n\\r\\nconst infoList = {\\r\\n  listStyleType: 'none',\\r\\n  padding: '0',\\r\\n  margin: '10px 0',\\r\\n  fontSize: '25px', // larger font size\\r\\n\\r\\n};\\r\\n\\r\\nconst listItem = {\\r\\n    marginBottom: '10px',\\r\\n}\\r\\n\\r\\n\\r\\nexport default StoreInfoDetail;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\MenuDetail.js\",[\"543\"],[],\"import React, { useEffect, useState } from 'react';\\r\\nimport { useParams } from 'react-router-dom';\\r\\nimport axios from 'axios';\\r\\nimport { useNavigate } from 'react-router-dom';\\r\\n// import { sendAxiosMultipartRequest, sendAxiosRequest } from '../utility/common';\\r\\nimport { useLocation } from 'react-router-dom';\\r\\n\\r\\n\\r\\nfunction MenuDetail() {\\r\\n\\r\\n\\r\\n  const { menuNo } = useParams();\\r\\n  const [editedName, setEditedName] = useState('');\\r\\n  const [editedSize, setEditedSize] = useState('');\\r\\n  const [editedPrice, setEditedPrice] = useState('');\\r\\n  const [editedContent, setEditedContent] = useState('');\\r\\n  const [menu, setMenu] = useState(null);\\r\\n  \\r\\n  // 만약 menuNo가 undefined라면, 잘못된 요청을 보내고 있을 수 있습니다.\\r\\nconsole.log('보내기 전 menuNo 확인:', menuNo);\\r\\n\\r\\n\\r\\n  useEffect(() => {\\r\\n      axios.get(`/api/menu/detail/${menuNo}`)\\r\\n      .then(response => {\\r\\n\\r\\n        console.log('응답 데이터:', response.data); \\r\\n          setMenu(response.data);\\r\\n          setEditedName(response.data.menuName);\\r\\n          setEditedSize(response.data.menuSize);\\r\\n          setEditedPrice(response.data.menuPrice);\\r\\n          setEditedContent(response.data.menuContent);\\r\\n        })\\r\\n        .catch(error => console.log(error));\\r\\n    }, [menuNo]);\\r\\n    \\r\\n\\r\\n\\r\\n  const navigate = useNavigate();\\r\\n\\r\\n  const handleUpdateMenu = () => {\\r\\n    const formData = new FormData();\\r\\n    formData.append('menuName', editedName);\\r\\n    formData.append('menuSize', editedSize);\\r\\n    formData.append('menuPrice', editedPrice);\\r\\n    formData.append('menuContent', editedContent);\\r\\n    formData.append('menuNo',menuNo);\\r\\n\\r\\n    axios.post(`/api/menu/update/${menuNo}`, formData)\\r\\n      .then(response => {\\r\\n        console.log(\\\"Menu updated successfully: \\\", response.data);\\r\\n        alert('메뉴가 수정 되었습니다.');\\r\\n        navigate('/menuEdit');\\r\\n      })\\r\\n      .catch(error => console.error(\\\"Failed to update notice: \\\", error));\\r\\n  };\\r\\n\\r\\n  if (menu === null) {\\r\\n    return <div>Loading...</div>;\\r\\n  } else {\\r\\n    return (\\r\\n      <div className=\\\"container\\\">\\r\\n        <div className=\\\"top-controls\\\"></div>\\r\\n        <div style={{ padding: \\\"0 12px\\\" }}>\\r\\n          <table className=\\\"board_list text-center\\\">\\r\\n            <colgroup>\\r\\n              <col width=\\\"20%\\\" />\\r\\n              <col width=\\\"80%\\\" />\\r\\n            </colgroup>\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>메뉴</th>\\r\\n                <td>\\r\\n                  <input\\r\\n                    type=\\\"text\\\"\\r\\n                    value={editedName}\\r\\n                    onChange={(e) => setEditedName(e.target.value)}\\r\\n                  />\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <th>사이즈</th>\\r\\n                <td>\\r\\n                  <input\\r\\n                    type=\\\"text\\\"\\r\\n                    value={editedSize}\\r\\n                    onChange={(e) => setEditedSize(e.target.value)}\\r\\n                  />\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <th>가격</th>\\r\\n                <td>\\r\\n                  <input\\r\\n                    type=\\\"text\\\"\\r\\n                    value={editedPrice}\\r\\n                    onChange={(e) => setEditedPrice(e.target.value)}\\r\\n                  />\\r\\n                </td>\\r\\n              </tr>\\r\\n              <tr>\\r\\n                <th>내용</th>\\r\\n                <td>\\r\\n                  <input\\r\\n                    type=\\\"text\\\"\\r\\n                    value={editedContent}\\r\\n                    onChange={(e) => setEditedContent(e.target.value)}\\r\\n                  />\\r\\n                </td>\\r\\n              </tr>\\r\\n              <button onClick={handleUpdateMenu}>수정하기</button>\\r\\n            </thead>\\r\\n          </table>\\r\\n        </div>\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default MenuDetail;\",\"C:\\\\Users\\\\think\\\\git\\\\bleuauction_fe\\\\src\\\\components\\\\MyPage\\\\MenuEdit.js\",[\"544\",\"545\",\"546\",\"547\",\"548\",\"549\",\"550\",\"551\",\"552\",\"553\"],[],\"import React, { useState } from 'react';\\r\\nimport { useEffect } from 'react';\\r\\nimport { useLocation, useNavigate } from 'react-router-dom';\\r\\nimport { sendAxiosRequest } from '../utility/common';\\r\\nimport axios, { formToJSON } from 'axios';\\r\\nimport { Link } from 'react-router-dom';\\r\\nimport { useParams } from 'react-router-dom'; // 만약 react-router-dom을 사용한다면 이 부분을 추가합니다.\\r\\nimport  './MenuEdit.css'\\r\\nimport jwt_decode from 'jwt-decode'; // jwt-decode 라이브러리를 import 합니다.\\r\\n\\r\\n\\r\\n\\r\\nfunction MenuEdit() {\\r\\n  let [menuData, setMenuData] = useState([]); // 메뉴 데이터를 저장할 상태\\r\\n  const { menuNo } = useParams(); // 현재 URL의 매개변수를 가져옵니다.\\r\\n  const navigate = useNavigate();\\r\\n  const location = useLocation(); // 추가된 부분\\r\\n  const store = location.state; // 추가된 부분\\r\\n  console.log(store);\\r\\n  const accessToken = sessionStorage.getItem('accessToken');\\r\\n\\r\\n\\r\\n\\r\\n  // useEffect(() => {\\r\\n  //   // 상점 번호가 설정되어 있는 경우에만 메뉴 데이터를 요청합니다.\\r\\n  //   const fetchMenus = async () => {\\r\\n  //     try {\\r\\n  //       const response = await axios.get('/api/menu/store'); // 세션을 기반으로 한 요청\\r\\n  //       if (response.data) {\\r\\n  //         console.log(response.data);\\r\\n  //         setMenuData(response.data);\\r\\n  //       }\\r\\n  //     } catch (error) {\\r\\n  //       console.error(\\\"Error fetching user's menus:\\\", error);\\r\\n  //     }\\r\\n  //   };\\r\\n  \\r\\n  //   fetchMenus();\\r\\n  // }, []); \\r\\n  \\r\\n    // 토큰 디코딩\\r\\n\\r\\n        const tokenMember = jwt_decode(accessToken);\\r\\n        console.log(\\\"디코드된 토큰 정보 출력\\\",tokenMember); // 디코드된 토큰 정보 출력\\r\\n\\r\\n  \\r\\n\\r\\n  useEffect(() => {\\r\\n    sendAxiosRequest(`/api/menu/store`, 'GET', tokenMember, response => {\\r\\n      console.log('응답 data:', response.data);\\r\\n      setMenuData(response.data);\\r\\n    }, error => {\\r\\n      console.error(\\\"메뉴 가져오기 실패:\\\", error);\\r\\n    }, null, accessToken);\\r\\n  }, []); // 의존성 배열이 비어 있으므로 컴포넌트가 마운트될 때 한 번만 실행됩니다.\\r\\n\\r\\n\\r\\n  // const handleDeleteMenu = (menuNo) => {\\r\\n  //   axios.post(`/api/menu/delete/${menuNo}`,)\\r\\n  //     .then(() => {\\r\\n  //       alert('메뉴가 삭제 되었습니다.');\\r\\n  //       console.log(\\\"menuData:\\\",menuData);\\r\\n  //       setMenuData(menuData.filter(menu => menu.menuNo !== menuNo)); // 삭제 후 상태 업데이트\\r\\n  //     })\\r\\n  //     .catch(error => {\\r\\n  //       console.error(\\\"Error deleting menu: \\\", error);\\r\\n  //     });\\r\\n  // };\\r\\n\\r\\n  const handleDeleteMenu = (menuNo) => {\\r\\n    sendAxiosRequest(`/api/menu/delete/${menuNo}`, 'GET', null, response => {\\r\\n      console.log('Data fetched successfully:', response.data);\\r\\n      setMenuData(menuData.filter(menu => menu.menuNo !== menuNo));\\r\\n    }, error => {\\r\\n      console.error(\\\"Error deleting user's menus:\\\", error);\\r\\n    }, null, accessToken);\\r\\n\\r\\n  };\\r\\n\\r\\n\\r\\nconst renderMenus = menuData.map(menu => (\\r\\n  <div key={menu.menuNo} className=\\\"menu-item\\\">\\r\\n    <h2 className=\\\"menu-title\\\">{menu.menuName}</h2>\\r\\n\\r\\n    <p className=\\\"menu-detail\\\">사이즈: {menu.menuSize}</p>\\r\\n    <p className=\\\"menu-detail\\\">가격: {menu.menuPrice}</p>\\r\\n    <p className=\\\"menu-detail\\\">내용: {menu.menuContent}</p>\\r\\n    <div  className=\\\"menu-actions\\\">\\r\\n      <button  className=\\\"delete-button\\\" onClick={() => handleDeleteMenu(menu.menuNo)}>삭제</button>\\r\\n      <Link \\r\\n        to={{\\r\\n          pathname: \\\"/MenuDetail\\\", // 수정할 메뉴의 상세 정보 페이지 경로\\r\\n          state: { detailMenu: menu } // 현재 메뉴의 데이터\\r\\n        }}\\r\\n      >      \\r\\n      <button className=\\\"edit-button\\\">수정하기</button>\\r\\n    </Link>\\r\\n      {/* 추가적인 액션 버튼들이 위치할 수 있습니다. */}\\r\\n    </div>\\r\\n  </div>\\r\\n));\\r\\n\\r\\nreturn (\\r\\n  <div style={containerStyle}>\\r\\n    <Link to=\\\"/MenuRegisterationForm\\\" style={registerButtonLink}>\\r\\n      <button>메뉴 등록하기</button>\\r\\n    </Link>\\r\\n    <div style={menuList}>{renderMenus}</div>\\r\\n  </div>\\r\\n);\\r\\n}\\r\\n\\r\\n// 스타일 섹션\\r\\nconst containerStyle = {\\r\\npadding: '20px',\\r\\nmaxWidth: '800px', // 조금 더 좁은 컨테이너\\r\\nmargin: '0 auto',\\r\\n};\\r\\n\\r\\nconst menuList = {\\r\\nmarginTop: '20px',\\r\\n};\\r\\n\\r\\nconst menuItemStyle = {\\r\\nborderBottom: '1px solid #ddd', // 각 메뉴 아이템 아래에 구분선 추가\\r\\npadding: '10px 0',\\r\\n};\\r\\n\\r\\nconst menuItemTitle = {\\r\\nmargin: '0 0 10px 0',\\r\\nfontSize: '1.5em',\\r\\n};\\r\\n\\r\\nconst menuActions = {\\r\\nmarginTop: '10px',\\r\\n};\\r\\n\\r\\nconst deleteButton = {\\r\\nbackground: '#4169e1', \\r\\ncolor: '#fff',\\r\\nborder: 'none',\\r\\npadding: '5px 10px',\\r\\nborderRadius: '5px',\\r\\ncursor: 'pointer',\\r\\n};\\r\\n\\r\\nconst registerButtonLink = {\\r\\ndisplay: 'block',\\r\\ntextAlign: 'right',\\r\\nmarginBottom: '20px',\\r\\n};\\r\\n\\r\\nconst registerButton = {\\r\\nbackground: '#4169e1', \\r\\ncolor: 'white',\\r\\npadding: '10px 20px',\\r\\ntextDecoration: 'none',\\r\\nborderRadius: '5px',\\r\\ncursor: 'pointer',\\r\\n};\\r\\n\\r\\nexport default MenuEdit;\\r\\n\",{\"ruleId\":\"554\",\"severity\":1,\"message\":\"555\",\"line\":1,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":26},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"558\",\"line\":1,\"column\":28,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":36},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"560\",\"line\":2,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":27},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"561\",\"line\":23,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":23,\"endColumn\":20},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"562\",\"line\":33,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":33,\"endColumn\":26},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"563\",\"line\":46,\"column\":11,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":46,\"endColumn\":15},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"564\",\"line\":46,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":46,\"endColumn\":22},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"565\",\"line\":2,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":24},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"566\",\"line\":3,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"560\",\"line\":12,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":12,\"endColumn\":20},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"558\",\"line\":13,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":13,\"endColumn\":18},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"567\",\"line\":13,\"column\":20,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":13,\"endColumn\":30},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"568\",\"line\":15,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":15,\"endColumn\":19},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":16,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":16,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"563\",\"line\":25,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":25,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":3,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"568\",\"line\":4,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":4,\"endColumn\":19},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"569\",\"line\":31,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":31,\"endColumn\":16},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":15},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"560\",\"line\":2,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":27},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"570\",\"line\":5,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"571\",\"line\":9,\"column\":3,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":9,\"endColumn\":19},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"572\",\"line\":13,\"column\":3,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":13,\"endColumn\":10},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"573\",\"line\":24,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":24,\"endColumn\":19},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"575\",\"line\":43,\"column\":6,\"nodeType\":\"576\",\"endLine\":43,\"endColumn\":8,\"suggestions\":\"577\"},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"578\",\"line\":4,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":4,\"endColumn\":21},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"579\",\"line\":6,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":6,\"endColumn\":16},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"580\",\"line\":6,\"column\":18,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":6,\"endColumn\":23},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"581\",\"line\":7,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":7,\"endColumn\":28},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"582\",\"line\":7,\"column\":30,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":7,\"endColumn\":43},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"583\",\"line\":8,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":8,\"endColumn\":33},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"584\",\"line\":13,\"column\":24,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":13,\"endColumn\":39},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"585\",\"line\":14,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":14,\"endColumn\":20},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"586\",\"line\":55,\"column\":6,\"nodeType\":\"576\",\"endLine\":55,\"endColumn\":8,\"suggestions\":\"587\"},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"555\",\"line\":1,\"column\":16,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":25},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"558\",\"line\":1,\"column\":27,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":35},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":9,\"column\":7,\"nodeType\":\"590\",\"endLine\":9,\"endColumn\":41},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":3,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"591\",\"line\":17,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":17,\"endColumn\":22},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"592\",\"line\":19,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":19,\"endColumn\":26},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"593\",\"line\":34,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":34,\"endColumn\":21},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"594\",\"line\":42,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":42,\"endColumn\":21},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"595\",\"line\":4,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":4,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"596\",\"line\":5,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":16},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"597\",\"line\":7,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":7,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"579\",\"line\":8,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":8,\"endColumn\":16},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"580\",\"line\":8,\"column\":18,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":8,\"endColumn\":23},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"568\",\"line\":9,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":9,\"endColumn\":19},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"565\",\"line\":9,\"column\":54,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":9,\"endColumn\":68},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"598\",\"line\":9,\"column\":70,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":9,\"endColumn\":84},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"566\",\"line\":11,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":11,\"endColumn\":17},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"599\",\"line\":27,\"column\":6,\"nodeType\":\"576\",\"endLine\":27,\"endColumn\":8,\"suggestions\":\"600\"},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"601\",\"line\":56,\"column\":6,\"nodeType\":\"576\",\"endLine\":56,\"endColumn\":30,\"suggestions\":\"602\"},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"565\",\"line\":10,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":10,\"endColumn\":23},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"603\",\"line\":11,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":11,\"endColumn\":18},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"570\",\"line\":13,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":13,\"endColumn\":17},{\"ruleId\":\"604\",\"severity\":2,\"message\":\"605\",\"line\":55,\"column\":16,\"nodeType\":\"556\",\"messageId\":\"606\",\"endLine\":55,\"endColumn\":27},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"607\",\"line\":57,\"column\":6,\"nodeType\":\"576\",\"endLine\":57,\"endColumn\":8,\"suggestions\":\"608\"},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"609\",\"line\":3,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"610\",\"line\":3,\"column\":16,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":20},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"611\",\"line\":3,\"column\":22,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":28},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"612\",\"line\":4,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":4,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"613\",\"line\":4,\"column\":16,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":4,\"endColumn\":27},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":5,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"598\",\"line\":10,\"column\":3,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":10,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"614\",\"line\":10,\"column\":35,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":10,\"endColumn\":57},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"570\",\"line\":12,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":12,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"566\",\"line\":13,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":13,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"615\",\"line\":114,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":114,\"endColumn\":15},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"616\",\"line\":3,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":35},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"613\",\"line\":5,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":21},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"617\",\"line\":5,\"column\":23,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":32},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"558\",\"line\":1,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":25},{\"ruleId\":\"618\",\"severity\":1,\"message\":\"619\",\"line\":125,\"column\":5,\"nodeType\":\"620\",\"messageId\":\"621\",\"endLine\":125,\"endColumn\":15},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"555\",\"line\":1,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":26},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"558\",\"line\":1,\"column\":28,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":36},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":3,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"560\",\"line\":3,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":27},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"568\",\"line\":4,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":4,\"endColumn\":19},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"562\",\"line\":4,\"column\":21,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":4,\"endColumn\":37},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"622\",\"line\":2,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"623\",\"line\":1,\"column\":38,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":44},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"624\",\"line\":3,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":18},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"565\",\"line\":6,\"column\":79,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":6,\"endColumn\":93},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"614\",\"line\":6,\"column\":95,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":6,\"endColumn\":117},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"625\",\"line\":10,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":10,\"endColumn\":20},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"626\",\"line\":13,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":13,\"endColumn\":26},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"627\",\"line\":53,\"column\":7,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":53,\"endColumn\":26},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"628\",\"line\":185,\"column\":21,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":185,\"endColumn\":30},{\"ruleId\":\"629\",\"severity\":1,\"message\":\"630\",\"line\":270,\"column\":41,\"nodeType\":\"631\",\"messageId\":\"621\",\"endLine\":270,\"endColumn\":43},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"632\",\"line\":3,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":26},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"633\",\"line\":34,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":34,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"634\",\"line\":37,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":37,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"635\",\"line\":94,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":94,\"endColumn\":21},{\"ruleId\":\"629\",\"severity\":1,\"message\":\"630\",\"line\":123,\"column\":36,\"nodeType\":\"631\",\"messageId\":\"621\",\"endLine\":123,\"endColumn\":38},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"555\",\"line\":1,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":26},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"636\",\"line\":6,\"column\":22,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":6,\"endColumn\":30},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"570\",\"line\":4,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":4,\"endColumn\":16},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"581\",\"line\":11,\"column\":5,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":11,\"endColumn\":23},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"637\",\"line\":16,\"column\":25,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":16,\"endColumn\":39},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"638\",\"line\":17,\"column\":24,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":17,\"endColumn\":38},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"639\",\"line\":18,\"column\":19,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":18,\"endColumn\":27},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"640\",\"line\":40,\"column\":21,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":40,\"endColumn\":33},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"639\",\"line\":41,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":41,\"endColumn\":25},{\"ruleId\":\"629\",\"severity\":1,\"message\":\"641\",\"line\":44,\"column\":40,\"nodeType\":\"631\",\"messageId\":\"621\",\"endLine\":44,\"endColumn\":42},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":52,\"column\":17,\"nodeType\":\"590\",\"endLine\":53,\"endColumn\":124},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":56,\"column\":73,\"nodeType\":\"590\",\"endLine\":56,\"endColumn\":101},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":60,\"column\":76,\"nodeType\":\"590\",\"endLine\":61,\"endColumn\":44},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":65,\"column\":74,\"nodeType\":\"590\",\"endLine\":66,\"endColumn\":45},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"639\",\"line\":128,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":128,\"endColumn\":25},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"642\",\"line\":129,\"column\":23,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":129,\"endColumn\":37},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"640\",\"line\":130,\"column\":21,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":130,\"endColumn\":33},{\"ruleId\":\"643\",\"severity\":1,\"message\":\"644\",\"line\":149,\"column\":33,\"nodeType\":\"645\",\"messageId\":\"646\",\"endLine\":149,\"endColumn\":107},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"647\",\"line\":167,\"column\":8,\"nodeType\":\"576\",\"endLine\":167,\"endColumn\":33,\"suggestions\":\"648\"},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"649\",\"line\":181,\"column\":8,\"nodeType\":\"576\",\"endLine\":181,\"endColumn\":10,\"suggestions\":\"650\"},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":195,\"column\":33,\"nodeType\":\"590\",\"endLine\":196,\"endColumn\":141},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":207,\"column\":41,\"nodeType\":\"590\",\"endLine\":207,\"endColumn\":69},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":213,\"column\":41,\"nodeType\":\"590\",\"endLine\":213,\"endColumn\":69},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":219,\"column\":41,\"nodeType\":\"590\",\"endLine\":219,\"endColumn\":70},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":231,\"column\":41,\"nodeType\":\"590\",\"endLine\":232,\"endColumn\":197},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":238,\"column\":61,\"nodeType\":\"590\",\"endLine\":247,\"endColumn\":70},{\"ruleId\":\"629\",\"severity\":1,\"message\":\"630\",\"line\":255,\"column\":57,\"nodeType\":\"631\",\"messageId\":\"621\",\"endLine\":255,\"endColumn\":59},{\"ruleId\":\"629\",\"severity\":1,\"message\":\"630\",\"line\":264,\"column\":53,\"nodeType\":\"631\",\"messageId\":\"621\",\"endLine\":264,\"endColumn\":55},{\"ruleId\":\"629\",\"severity\":1,\"message\":\"630\",\"line\":322,\"column\":46,\"nodeType\":\"631\",\"messageId\":\"621\",\"endLine\":322,\"endColumn\":48},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"637\",\"line\":336,\"column\":25,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":336,\"endColumn\":39},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"651\",\"line\":386,\"column\":11,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":386,\"endColumn\":21},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"652\",\"line\":411,\"column\":8,\"nodeType\":\"576\",\"endLine\":411,\"endColumn\":10,\"suggestions\":\"653\"},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":420,\"column\":29,\"nodeType\":\"590\",\"endLine\":421,\"endColumn\":137},{\"ruleId\":\"629\",\"severity\":1,\"message\":\"630\",\"line\":429,\"column\":49,\"nodeType\":\"631\",\"messageId\":\"621\",\"endLine\":429,\"endColumn\":51},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"562\",\"line\":5,\"column\":21,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":37},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"570\",\"line\":6,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":6,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"639\",\"line\":9,\"column\":15,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":9,\"endColumn\":23},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"654\",\"line\":16,\"column\":6,\"nodeType\":\"576\",\"endLine\":16,\"endColumn\":8,\"suggestions\":\"655\"},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":20,\"column\":7,\"nodeType\":\"590\",\"endLine\":20,\"endColumn\":74},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":29,\"column\":11,\"nodeType\":\"590\",\"endLine\":29,\"endColumn\":80},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":32,\"column\":11,\"nodeType\":\"590\",\"endLine\":32,\"endColumn\":84},{\"ruleId\":\"629\",\"severity\":1,\"message\":\"630\",\"line\":33,\"column\":17,\"nodeType\":\"631\",\"messageId\":\"621\",\"endLine\":33,\"endColumn\":19},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"656\",\"line\":12,\"column\":21,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":12,\"endColumn\":33},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"615\",\"line\":13,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":13,\"endColumn\":15},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"595\",\"line\":72,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":72,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"555\",\"line\":1,\"column\":16,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":25},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"657\",\"line\":3,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"658\",\"line\":1,\"column\":28,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":38},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"659\",\"line\":5,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":21},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"660\",\"line\":17,\"column\":6,\"nodeType\":\"576\",\"endLine\":17,\"endColumn\":8,\"suggestions\":\"661\"},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":40,\"column\":9,\"nodeType\":\"590\",\"endLine\":40,\"endColumn\":39},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"555\",\"line\":1,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":26},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"558\",\"line\":1,\"column\":28,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":36},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"555\",\"line\":1,\"column\":16,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":25},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"558\",\"line\":1,\"column\":27,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":35},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"662\",\"line\":4,\"column\":16,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":4,\"endColumn\":23},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"611\",\"line\":5,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"663\",\"line\":7,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":7,\"endColumn\":19},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"613\",\"line\":8,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":8,\"endColumn\":21},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"664\",\"line\":24,\"column\":36,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":24,\"endColumn\":47},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"665\",\"line\":30,\"column\":32,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":30,\"endColumn\":41},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":48,\"column\":9,\"nodeType\":\"590\",\"endLine\":48,\"endColumn\":90},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":52,\"column\":13,\"nodeType\":\"590\",\"endLine\":52,\"endColumn\":80},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":57,\"column\":9,\"nodeType\":\"590\",\"endLine\":57,\"endColumn\":81},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"555\",\"line\":1,\"column\":27,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":36},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":2,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"666\",\"line\":6,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":6,\"endColumn\":16},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"667\",\"line\":54,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":54,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"595\",\"line\":4,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":4,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"596\",\"line\":5,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":16},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"597\",\"line\":7,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":7,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"579\",\"line\":8,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":8,\"endColumn\":16},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"580\",\"line\":8,\"column\":18,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":8,\"endColumn\":23},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"668\",\"line\":8,\"column\":12,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":8,\"endColumn\":20},{\"ruleId\":\"669\",\"severity\":1,\"message\":\"670\",\"line\":120,\"column\":29,\"nodeType\":\"671\",\"messageId\":\"672\",\"endLine\":120,\"endColumn\":48},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"622\",\"line\":3,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":14},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"579\",\"line\":5,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":16},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"580\",\"line\":5,\"column\":18,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":23},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"555\",\"line\":1,\"column\":27,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":36},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"673\",\"line\":6,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":6,\"endColumn\":15},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"560\",\"line\":7,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":7,\"endColumn\":20},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"563\",\"line\":12,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":12,\"endColumn\":12},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"564\",\"line\":12,\"column\":14,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":12,\"endColumn\":19},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"674\",\"line\":12,\"column\":21,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":12,\"endColumn\":27},{\"ruleId\":\"675\",\"severity\":1,\"message\":\"676\",\"line\":68,\"column\":57,\"nodeType\":\"677\",\"messageId\":\"678\",\"endLine\":68,\"endColumn\":59},{\"ruleId\":\"675\",\"severity\":1,\"message\":\"676\",\"line\":104,\"column\":34,\"nodeType\":\"677\",\"messageId\":\"678\",\"endLine\":104,\"endColumn\":36},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"579\",\"line\":5,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":16},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"580\",\"line\":5,\"column\":18,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":23},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":3,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"570\",\"line\":3,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":17},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"679\",\"line\":18,\"column\":6,\"nodeType\":\"576\",\"endLine\":18,\"endColumn\":8,\"suggestions\":\"680\"},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"658\",\"line\":1,\"column\":28,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":1,\"endColumn\":38},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"660\",\"line\":17,\"column\":6,\"nodeType\":\"576\",\"endLine\":17,\"endColumn\":8,\"suggestions\":\"681\"},{\"ruleId\":\"588\",\"severity\":1,\"message\":\"589\",\"line\":37,\"column\":9,\"nodeType\":\"590\",\"endLine\":37,\"endColumn\":39},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"565\",\"line\":2,\"column\":55,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":2,\"endColumn\":69},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":3,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":3,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"570\",\"line\":5,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"639\",\"line\":11,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":11,\"endColumn\":25},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"682\",\"line\":13,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":13,\"endColumn\":19},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"640\",\"line\":13,\"column\":21,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":13,\"endColumn\":33},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"683\",\"line\":26,\"column\":6,\"nodeType\":\"576\",\"endLine\":26,\"endColumn\":8,\"suggestions\":\"684\"},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"685\",\"line\":65,\"column\":7,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":65,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"686\",\"line\":6,\"column\":10,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":6,\"endColumn\":21},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"559\",\"line\":5,\"column\":8,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":13},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"560\",\"line\":5,\"column\":17,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":5,\"endColumn\":27},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"687\",\"line\":15,\"column\":11,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":15,\"endColumn\":17},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"688\",\"line\":16,\"column\":9,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":16,\"endColumn\":17},{\"ruleId\":\"574\",\"severity\":1,\"message\":\"683\",\"line\":55,\"column\":6,\"nodeType\":\"576\",\"endLine\":55,\"endColumn\":8,\"suggestions\":\"689\"},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"690\",\"line\":124,\"column\":7,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":124,\"endColumn\":20},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"691\",\"line\":129,\"column\":7,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":129,\"endColumn\":20},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"692\",\"line\":134,\"column\":7,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":134,\"endColumn\":18},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"693\",\"line\":138,\"column\":7,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":138,\"endColumn\":19},{\"ruleId\":\"554\",\"severity\":1,\"message\":\"694\",\"line\":153,\"column\":7,\"nodeType\":\"556\",\"messageId\":\"557\",\"endLine\":153,\"endColumn\":21},\"no-unused-vars\",\"'useEffect' is defined but never used.\",\"Identifier\",\"unusedVar\",\"'useState' is defined but never used.\",\"'axios' is defined but never used.\",\"'formToJSON' is defined but never used.\",\"'UserProvider' is defined but never used.\",\"'sendAxiosRequest' is defined but never used.\",\"'user' is assigned a value but never used.\",\"'login' is assigned a value but never used.\",\"'getAccessToken' is defined but never used.\",\"'jwtDecode' is defined but never used.\",\"'useContext' is defined but never used.\",\"'isOpenNow' is defined but never used.\",\"'useForm' is assigned a value but never used.\",\"'useUser' is defined but never used.\",\"'getLoginUserInfo' is defined but never used.\",\"'mainUrl' is defined but never used.\",\"'currentURL' is assigned a value but never used.\",\"react-hooks/exhaustive-deps\",\"React Hook useEffect has missing dependencies: 'accessToken' and 'refreshToken'. Either include them or remove the dependency array.\",\"ArrayExpression\",[\"695\"],\"'StoreListItem' is defined but never used.\",\"'Routes' is defined but never used.\",\"'Route' is defined but never used.\",\"'accessTokenRefresh' is defined but never used.\",\"'redirectLogin' is defined but never used.\",\"'accordionSummaryClasses' is defined but never used.\",\"'setPageRowCount' is assigned a value but never used.\",\"'accessToken' is assigned a value but never used.\",\"React Hook useEffect has a missing dependency: 'pageRowCount'. Either include it or remove the dependency array.\",[\"696\"],\"jsx-a11y/alt-text\",\"img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.\",\"JSXOpeningElement\",\"'previewImage' is assigned a value but never used.\",\"'handleImageChange' is assigned a value but never used.\",\"'handleChange' is assigned a value but never used.\",\"'handleSubmit' is assigned a value but never used.\",\"'Coupon' is defined but never used.\",\"'Category' is defined but never used.\",\"'StoreHome' is defined but never used.\",\"'isTokenExpired' is defined but never used.\",\"React Hook useEffect has missing dependencies: 'accessToken' and 'newAddLength'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setStartPageNo' needs the current value of 'newAddLength'.\",[\"697\"],\"React Hook useEffect has missing dependencies: 'accessToken' and 'newAddLength'. Either include them or remove the dependency array.\",[\"698\"],\"'MenuItem' is defined but never used.\",\"no-undef\",\"'accessToken' is not defined.\",\"undef\",\"React Hook useEffect has missing dependencies: 'menuData' and 'store'. Either include them or remove the dependency array.\",[\"699\"],\"'Form' is defined but never used.\",\"'Card' is defined but never used.\",\"'Button' is defined but never used.\",\"'json' is defined but never used.\",\"'useNavigate' is defined but never used.\",\"'isNullUndefinedOrEmpty' is defined but never used.\",\"'store' is assigned a value but never used.\",\"'sendAxiosMultipartRequest' is defined but never used.\",\"'useParams' is defined but never used.\",\"no-dupe-keys\",\"Duplicate key 'transition'.\",\"ObjectExpression\",\"unexpected\",\"'Link' is defined but never used.\",\"'useRef' is defined but never used.\",\"'Carousel' is defined but never used.\",\"'Handsontable' is defined but never used.\",\"'registerRenderer' is defined but never used.\",\"'recommendationItems' is assigned a value but never used.\",\"'cellWidth' is assigned a value but never used.\",\"eqeqeq\",\"Expected '===' and instead saw '=='.\",\"BinaryExpression\",\"'isValidDateValue' is defined but never used.\",\"'payNo' is assigned a value but never used.\",\"'pay' is assigned a value but never used.\",\"'data' is assigned a value but never used.\",\"'setState' is assigned a value but never used.\",\"'setAccessToken' is assigned a value but never used.\",\"'setTokenMember' is assigned a value but never used.\",\"'setStore' is assigned a value but never used.\",\"'setLoginUser' is assigned a value but never used.\",\"Expected '!==' and instead saw '!='.\",\"'setAccessToekn' is assigned a value but never used.\",\"no-template-curly-in-string\",\"Unexpected template string expression.\",\"Literal\",\"unexpectedTemplateExpression\",\"React Hook useEffect has missing dependencies: 'accessToken', 'newAddLength', and 'store.storeNo'. Either include them or remove the dependency array.\",[\"700\"],\"React Hook useEffect has missing dependencies: 'accessToken', 'newAddLength', and 'store.storeNo'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setStartPageNo' needs the current value of 'newAddLength'.\",[\"701\"],\"'pageRowCnt' is assigned a value but never used.\",\"React Hook useEffect has a missing dependency: 'props.reviewNo'. Either include it or remove the dependency array.\",[\"702\"],\"React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.\",[\"703\"],\"'setMenuItems' is assigned a value but never used.\",\"'styles' is defined but never used.\",\"'useReducer' is defined but never used.\",\"'OrderMenuList' is defined but never used.\",\"React Hook useEffect has a missing dependency: 'orders'. Either include it or remove the dependency array.\",[\"704\"],\"'NavLink' is defined but never used.\",\"'Placeholder' is defined but never used.\",\"'startSecond' is assigned a value but never used.\",\"'endSecond' is assigned a value but never used.\",\"'Hidden' is defined but never used.\",\"'codes' is assigned a value but never used.\",\"'response' is assigned a value but never used.\",\"react/jsx-no-duplicate-props\",\"No duplicate props allowed\",\"JSXAttribute\",\"noDuplicateProps\",\"'Payment' is defined but never used.\",\"'logout' is assigned a value but never used.\",\"array-callback-return\",\"Array.prototype.map() expects a return value from arrow function.\",\"ArrowFunctionExpression\",\"expectedInside\",\"React Hook useEffect has missing dependencies: 'localItem' and 'menu.menuNo'. Either include them or remove the dependency array. You can also do a functional update 'setLocalItem(l => ...)' if you only need 'localItem' in the 'setLocalItem' call.\",[\"705\"],[\"706\"],\"'loginUser' is assigned a value but never used.\",\"React Hook useEffect has missing dependencies: 'accessToken' and 'tokenMember'. Either include them or remove the dependency array.\",[\"707\"],\"'imageStyle' is assigned a value but never used.\",\"'useLocation' is defined but never used.\",\"'menuNo' is assigned a value but never used.\",\"'navigate' is assigned a value but never used.\",[\"708\"],\"'menuItemStyle' is assigned a value but never used.\",\"'menuItemTitle' is assigned a value but never used.\",\"'menuActions' is assigned a value but never used.\",\"'deleteButton' is assigned a value but never used.\",\"'registerButton' is assigned a value but never used.\",{\"desc\":\"709\",\"fix\":\"710\"},{\"desc\":\"711\",\"fix\":\"712\"},{\"desc\":\"713\",\"fix\":\"714\"},{\"desc\":\"715\",\"fix\":\"716\"},{\"desc\":\"717\",\"fix\":\"718\"},{\"desc\":\"719\",\"fix\":\"720\"},{\"desc\":\"721\",\"fix\":\"722\"},{\"desc\":\"723\",\"fix\":\"724\"},{\"desc\":\"725\",\"fix\":\"726\"},{\"desc\":\"727\",\"fix\":\"728\"},{\"desc\":\"729\",\"fix\":\"730\"},{\"desc\":\"727\",\"fix\":\"731\"},{\"desc\":\"732\",\"fix\":\"733\"},{\"desc\":\"732\",\"fix\":\"734\"},\"Update the dependencies array to be: [accessToken, refreshToken]\",{\"range\":\"735\",\"text\":\"736\"},\"Update the dependencies array to be: [pageRowCount]\",{\"range\":\"737\",\"text\":\"738\"},\"Update the dependencies array to be: [accessToken, newAddLength]\",{\"range\":\"739\",\"text\":\"740\"},\"Update the dependencies array to be: [accessToken, newAddLength, startPageNo, storeList]\",{\"range\":\"741\",\"text\":\"742\"},\"Update the dependencies array to be: [menuData, store]\",{\"range\":\"743\",\"text\":\"744\"},\"Update the dependencies array to be: [startPageNo, reviewList, newAddLength, store.storeNo, accessToken]\",{\"range\":\"745\",\"text\":\"746\"},\"Update the dependencies array to be: [accessToken, newAddLength, store.storeNo]\",{\"range\":\"747\",\"text\":\"748\"},\"Update the dependencies array to be: [props.reviewNo]\",{\"range\":\"749\",\"text\":\"750\"},\"Update the dependencies array to be: [store]\",{\"range\":\"751\",\"text\":\"752\"},\"Update the dependencies array to be: [orders]\",{\"range\":\"753\",\"text\":\"754\"},\"Update the dependencies array to be: [localItem, menu.menuNo]\",{\"range\":\"755\",\"text\":\"756\"},{\"range\":\"757\",\"text\":\"754\"},\"Update the dependencies array to be: [accessToken, tokenMember]\",{\"range\":\"758\",\"text\":\"759\"},{\"range\":\"760\",\"text\":\"759\"},[1862,1864],\"[accessToken, refreshToken]\",[2051,2053],\"[pageRowCount]\",[1191,1193],\"[accessToken, newAddLength]\",[2232,2256],\"[accessToken, newAddLength, startPageNo, storeList]\",[1893,1895],\"[menuData, store]\",[8362,8387],\"[startPageNo, reviewList, newAddLength, store.storeNo, accessToken]\",[8981,8983],\"[accessToken, newAddLength, store.storeNo]\",[22709,22711],\"[props.reviewNo]\",[599,601],\"[store]\",[486,488],\"[orders]\",[457,459],\"[localItem, menu.menuNo]\",[444,446],[940,942],\"[accessToken, tokenMember]\",[1758,1760]]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/node_modules/.cache/.eslintcache b/node_modules/.cache/.eslintcache
--- a/node_modules/.cache/.eslintcache	(revision 7ebcd99127568e8ca66b2082e5c33510dda42c34)
+++ b/node_modules/.cache/.eslintcache	(date 1698146101664)
@@ -1,1 +1,1 @@
-[{"C:\\Users\\think\\git\\bleuauction_fe\\src\\index.js":"1","C:\\Users\\think\\git\\bleuauction_fe\\src\\App.js":"2","C:\\Users\\think\\git\\bleuauction_fe\\src\\reportWebVitals.js":"3","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\UserContext.js":"4","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\LoginPage.js":"5","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\RegisterPage.js":"6","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuList.js":"7","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\SideBar.js":"8","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\Header.js":"9","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Test\\Test.js":"10","C:\\Users\\think\\git\\bleuauction_fe\\src\\routes\\Home.js":"11","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\Footer.js":"12","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuRegisterationForm.js":"13","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\TabBar.js":"14","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreList.js":"15","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\MarketDetailPage.js":"16","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreMyPage.js":"17","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreItemRegister.js":"18","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\UserEditPage.js":"19","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreRegisterPage.js":"20","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyPage.js":"21","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyOrder.js":"22","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreItemDailyPrice\\StoreItemDailyPrice.js":"23","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\utility\\common.js":"24","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Pay\\Pay.js":"25","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Test\\test2.jsx":"26","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Review\\ReviewForm.js":"27","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreHome.js":"28","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreListItem.js":"29","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuItem.js":"30","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\InputField.js":"31","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreInfo.js":"32","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Category.js":"33","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyOrderContent.js":"34","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Announce.js":"35","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Button.js":"36","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreHomeItem.js":"37","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Review\\ReviewList.js":"38","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Coupon\\Coupon.js":"39","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreItemDailyPrice\\StoreItemAdd.js":"40","C:\\Users\\think\\git\\bleuauction_fe\\src\\routes\\StoreList.js":"41","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Chat\\Chat.js":"42","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeDetail.js":"43","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeList.js":"44","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeListItem.js":"45","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\OrderModal.js":"46","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeList.js":"47","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeDetail.js":"48","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\NoticeRegisterationForm.js":"49","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeListItem.js":"50","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\OrderItem.js":"51","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\OrderMenuList.js":"52","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreOrder.js":"53","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreEdit.js":"54","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\OS\\OS.js":"55","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreInfoDetail.js":"56","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MenuDetail.js":"57","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MenuEdit.js":"58"},{"size":661,"mtime":1697978277777,"results":"59","hashOfConfig":"60"},{"size":6218,"mtime":1698144517010,"results":"61","hashOfConfig":"60"},{"size":375,"mtime":1696236038543,"results":"62","hashOfConfig":"60"},{"size":1736,"mtime":1698143852517,"results":"63","hashOfConfig":"60"},{"size":5571,"mtime":1698144517012,"results":"64","hashOfConfig":"60"},{"size":6672,"mtime":1697693754234,"results":"65","hashOfConfig":"60"},{"size":1074,"mtime":1698143316555,"results":"66","hashOfConfig":"60"},{"size":1670,"mtime":1698144517014,"results":"67","hashOfConfig":"60"},{"size":3321,"mtime":1698143316537,"results":"68","hashOfConfig":"60"},{"size":1115,"mtime":1696943521784,"results":"69","hashOfConfig":"60"},{"size":2483,"mtime":1698144517029,"results":"70","hashOfConfig":"60"},{"size":285,"mtime":1697521231622,"results":"71","hashOfConfig":"60"},{"size":5861,"mtime":1698143316556,"results":"72","hashOfConfig":"60"},{"size":1388,"mtime":1697097424814,"results":"73","hashOfConfig":"60"},{"size":2621,"mtime":1698038999200,"results":"74","hashOfConfig":"60"},{"size":4028,"mtime":1698143713017,"results":"75","hashOfConfig":"60"},{"size":0,"mtime":1697691593162,"results":"76","hashOfConfig":"77"},{"size":8651,"mtime":1698143316569,"results":"78","hashOfConfig":"60"},{"size":6428,"mtime":1698038999208,"results":"79","hashOfConfig":"60"},{"size":7165,"mtime":1697776613319,"results":"80","hashOfConfig":"60"},{"size":5083,"mtime":1698144743582,"results":"81","hashOfConfig":"60"},{"size":2335,"mtime":1697521308636,"results":"82","hashOfConfig":"60"},{"size":9792,"mtime":1698143316581,"results":"83","hashOfConfig":"60"},{"size":6871,"mtime":1698144517026,"results":"84","hashOfConfig":"60"},{"size":4473,"mtime":1697713109592,"results":"85","hashOfConfig":"60"},{"size":470,"mtime":1696943521785,"results":"86","hashOfConfig":"60"},{"size":28674,"mtime":1698143316577,"results":"87","hashOfConfig":"60"},{"size":479,"mtime":1698144517019,"results":"88","hashOfConfig":"60"},{"size":1713,"mtime":1698143735814,"results":"89","hashOfConfig":"60"},{"size":2090,"mtime":1697691593156,"results":"90","hashOfConfig":"91"},{"size":381,"mtime":1698038999204,"results":"92","hashOfConfig":"60"},{"size":3782,"mtime":1698143316547,"results":"93","hashOfConfig":"60"},{"size":642,"mtime":1697097424806,"results":"94","hashOfConfig":"60"},{"size":2332,"mtime":1698052575881,"results":"95","hashOfConfig":"60"},{"size":1633,"mtime":1698144517017,"results":"96","hashOfConfig":"60"},{"size":436,"mtime":1697097424804,"results":"97","hashOfConfig":"60"},{"size":2417,"mtime":1697624654909,"results":"98","hashOfConfig":"60"},{"size":1326,"mtime":1697097424829,"results":"99","hashOfConfig":"60"},{"size":1441,"mtime":1697097424799,"results":"100","hashOfConfig":"60"},{"size":5903,"mtime":1698144517024,"results":"101","hashOfConfig":"60"},{"size":1055,"mtime":1697691593170,"results":"102","hashOfConfig":"77"},{"size":6453,"mtime":1697691593146,"results":"103","hashOfConfig":"60"},{"size":1078,"mtime":1697691593165,"results":"104","hashOfConfig":"60"},{"size":691,"mtime":1697691593167,"results":"105","hashOfConfig":"60"},{"size":1438,"mtime":1697691593168,"results":"106","hashOfConfig":"60"},{"size":6687,"mtime":1698033743056,"results":"107","hashOfConfig":"60"},{"size":728,"mtime":1697792750306,"results":"108","hashOfConfig":"60"},{"size":2560,"mtime":1697792750304,"results":"109","hashOfConfig":"60"},{"size":2666,"mtime":1698143316532,"results":"110","hashOfConfig":"60"},{"size":2545,"mtime":1697792750307,"results":"111","hashOfConfig":"60"},{"size":1650,"mtime":1698059373024,"results":"112","hashOfConfig":"60"},{"size":3032,"mtime":1698038717405,"results":"113","hashOfConfig":"60"},{"size":1926,"mtime":1698038717406,"results":"114","hashOfConfig":"60"},{"size":6825,"mtime":1698139006960,"results":"115","hashOfConfig":"60"},{"size":2236,"mtime":1698143316573,"results":"116","hashOfConfig":"60"},{"size":2455,"mtime":1698143316549,"results":"117","hashOfConfig":"60"},{"size":3798,"mtime":1698143316561,"results":"118","hashOfConfig":"60"},{"size":4955,"mtime":1698143316564,"results":"119","hashOfConfig":"60"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1okf9q7",{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"131ovsd",{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1u8wuzz",{"filePath":"232","messages":"233","suppressedMessages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267"},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274"},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282"},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293"},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","suppressedMessages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300"},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307"},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314"},{"filePath":"315","messages":"316","suppressedMessages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318"},{"filePath":"319","messages":"320","suppressedMessages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","suppressedMessages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325"},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329"},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},"C:\\Users\\think\\git\\bleuauction_fe\\src\\index.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\App.js",["334","335","336","337","338","339","340","341"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios, { formToJSON } from 'axios';\r\nimport './App.css';\r\nimport Header from './components/Common/Header';\r\nimport Footer from './components/Common/Footer';\r\nimport Home from './routes/Home';\r\nimport SideBar from './components/Common/SideBar';\r\nimport { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\r\nimport Test from './components/Test/Test';\r\nimport Test2 from './components/Test/test2';\r\nimport LoginPage from './components/Auth/LoginPage';\r\nimport RegisterPage from './components/Auth/RegisterPage';\r\nimport MenuList from './components/Menu/MenuList';\r\nimport MenuRegisterationForm from './components/Menu/MenuRegisterationForm';\r\nimport StoreList from './components/Market/StoreList';\r\nimport MarketDetailPage from './components/Market/MarketDetailPage';\r\nimport StoreInfoDetail from './components/Market/StoreInfoDetail';\r\nimport ReviewForm from './components/Review/ReviewForm';\r\nimport MyPage from './components/MyPage/MyPage';\r\nimport UserEditPage from './components/MyPage/UserEditPage';\r\nimport MyOrder from './components/MyPage/MyOrder';\r\nimport StoreItemDailyPrice from './components/StoreItemDailyPrice/StoreItemDailyPrice';\r\nimport UserProvider from './components/Auth/UserContext';\r\nimport StoreItemRegister from './components/MyPage/StoreItemRegister'\r\nimport Payment from './components/Pay/Pay';\r\nimport StoreRegisterPage from './components/MyPage/StoreRegisterPage';\r\n// import AdminPage from './components/MyPage/AdminPage';\r\nimport MenuEdit from './components/MyPage/MenuEdit';\r\nimport NoticeList from './components/Notice/NoticeList';\r\nimport NoticeDetail from './components/Notice/NoticeDetail';\r\nimport { useUser } from './components/Auth/UserContext';\r\nimport StoreMyPage from './components/MyPage/StoreItemRegister'; // StoreMyPage 컴포넌트 파일의 경로에 따라 수정\r\nimport { sendAxiosRequest } from './components/utility/common';\r\nimport StoreItemAdd from  './components/StoreItemDailyPrice/StoreItemAdd';\r\nimport NoticeRegisterationForm from  './components/Admin/NoticeRegisterationForm';\r\nimport AdminNoticeList from  './components/Admin/AdminNoticeList';\r\nimport AdminNoticeDetail from  './components/Admin/AdminNoticeDetail';\r\nimport OrderMenuList from './components/MyPage/OrderMenuList';\r\nimport StoreOrder from './components/MyPage/StoreOrder';\r\nimport MenuDetail from './components/MyPage/MenuDetail';\r\nimport StoreEditPage from './components/MyPage/StoreEdit';\r\n\r\n\r\nfunction App() {\r\n\r\n  const { user, login } = useUser();\r\n\r\n\r\n  // useEffect(() => {\r\n  // if (localStorage.getItem('memberEmail') !== null) {\r\n  // const saveUser = {\r\n  //   'memberEmail': localStorage.getItem('memberEmail'),\r\n  //   'memberPwd': localStorage.getItem('memberPwd')\r\n  // };\r\n\r\n  //   if (saveUser !== null) {\r\n  //     sendAxiosRequest(\"/api/member/login\", 'POST', formToJSON(saveUser), response => {\r\n  //       //   //   console.log(response.data);\r\n  //       console.log(localStorage.getItem('memberEmail'));\r\n  //       console.log(localStorage.getItem('memberPwd'));\r\n  //       // if (response.data.loginUser !== null) {\r\n  //         login(response.data.loginUser)\r\n  //       // }\r\n  //       // login(saveUser);\r\n  //       //     login(localStorage.getItem('data'));\r\n  //       //     // console.log(user);\r\n  //       //   // }, error => {\r\n  //         //     // console.log(error);\r\n  //       });\r\n  //     }\r\n  //   }\r\n  //   }, []);\r\n\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <div className='App'>\r\n        {/* <div>{hello}</div> */}\r\n        <RoutingComponent />\r\n      </div>\r\n    </Router>\r\n  );\r\n\r\n}\r\n\r\nfunction RoutingComponent() {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      {location.pathname !== \"/login\" && location.pathname !== \"/register\" && <Header />}\r\n      <Routes>\r\n        <Route path=\"/login\" element={<LoginPage />} />\r\n        <Route path=\"/register\" element={<RegisterPage />} />\r\n        <Route path=\"/\" exact={true} element={<Home />} />\r\n        <Route path=\"/store/list\" element={<StoreList />} />\r\n        <Route path=\"/api/test\" element={<Test />} />\r\n        <Route path=\"/api/test2\" element={<Test2 />} />\r\n        <Route path=\"/menulist\" element={<MenuList />} />\r\n        <Route path=\"/reviewregister\" element={<ReviewForm />} />\r\n        <Route path=\"/market/detail\" element={<MarketDetailPage />} />\r\n        <Route path=\"/mypage\" element={<MyPage />} />\r\n        <Route path=\"/mypage/store/edit\" element={<StoreEditPage />} />\r\n        <Route path=\"/storeRegister\" element={<StoreRegisterPage />} />\r\n        <Route path=\"/useredit\" element={<UserEditPage />} />\r\n        <Route path=\"/menuEdit\" element={<MenuEdit />} />\r\n        <Route path=\"/my-orders\" element={<MyOrder />} />\r\n        <Route path=\"/StoreItemDailyPrice\" element={<StoreItemDailyPrice />} />\r\n        <Route path=\"/MenuRegisterationForm\" element={<MenuRegisterationForm />} />\r\n        <Route path=\"/notice/list\" element={<NoticeList />} />\r\n        <Route path=\"/notice/detail/:noticeNo\" element={<NoticeDetail />} />\r\n        <Route path=\"/storemypage\" element={<StoreMyPage />} />\r\n        <Route path=\"/storeItemRegister\" element={<StoreItemRegister />} />\r\n        <Route path=\"/StoreItemAdd\" element={<StoreItemAdd />} />\r\n        <Route path=\"/pay\" element={<Payment />} />\r\n        <Route path=\"/StoreInfoDetail\" element={<StoreInfoDetail />} />\r\n        <Route path=\"/menuDetail\" element={<MenuDetail />} />\r\n        <Route path=\"/admin/notice/register\" element={<NoticeRegisterationForm />} />\r\n        <Route path=\"/admin/notice/list\" element={<AdminNoticeList />} />\r\n        <Route path=\"/admin/notice/detail/:noticeNo\" element={<AdminNoticeDetail />} />\r\n        <Route path=\"/mypage/ordermenu/detail/:orderNo\" element={<OrderMenuList />} />\r\n        <Route path=\"/order/detail/:orderNo\" element={<OrderMenuList />} />\r\n        <Route path=\"/order-confirmation\" element={<StoreOrder />} />\r\n      </Routes>\r\n      {location.pathname !== \"/login\" && location.pathname !== \"/register\" && <SideBar />}\r\n      {location.pathname !== \"/login\" && location.pathname !== \"/register\" && <Footer />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\reportWebVitals.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\UserContext.js",["342","343"],[],"import { createContext, useContext, useState } from \"react\";\r\nimport { getAccessToken } from \"../utility/common\";\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const useUser = () => {\r\n  return useContext(UserContext);\r\n};\r\n\r\nexport default function UserProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = (userData) => {\r\n    // 로그인 로직을 구현\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    // 로그아웃 로직을 구현\r\n    setUser(null);\r\n  };\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\n\r\n// const Context = createContext({\r\n//     loggedUser: {\r\n//         username: '',\r\n//         email: '',\r\n//         first_name: '',\r\n//     },\r\n//     loggedIn: false,\r\n//     setLoggedUser: () => {},\r\n//     setLoggedIn: () => {}\r\n// });\r\n\r\n// export default Context;\r\n\r\n// const ContextProvider = ({children}) => {\r\n\r\n//   const setLoggedUser = (data) => {\r\n//       setState(prevState => (\r\n//           {\r\n//               ...prevState,\r\n//               loggedUser: data\r\n//           }\r\n//       ))\r\n//   }\r\n\r\n//   const setLoggedIn = () => {\r\n//       setState(prevState => (\r\n//           {\r\n//               ...prevState, \r\n//               loggedIn: !prevState.loggedIn\r\n//           }\r\n//       ))\r\n//   }\r\n\r\n//   const initialState = {\r\n//       loggedUser: {},\r\n//       loggedIn: false,\r\n//       setLoggedUser,\r\n//       setLoggedIn\r\n//   }\r\n\r\n//   const [state, setState] = useState(initialState);\r\n\r\n//   return (\r\n//       <Context.Provider value={state}>\r\n//           {children}\r\n//       </Context.Provider>\r\n//   )\r\n// }","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\LoginPage.js",["344","345","346","347","348","349"],[],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { formToJSON } from 'axios';\r\nimport { useState, useContext } from 'react';\r\nimport { useUser } from './UserContext';\r\nimport { isOpenNow, sendAxiosRequest, isTokenExpired } from '../utility/common';\r\nimport axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nfunction LoginPage() {\r\n  const navigate = useNavigate();\r\n  const {user, login} = useUser();\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.currentTarget);\r\n\r\n    const loginRequest = {\r\n      memberEmail: data.get('memberEmail'),\r\n      memberPwd: data.get('memberPwd')\r\n    };\r\n\r\n    sendAxiosRequest('/api/member/login', 'POST', loginRequest, response => {\r\n      const repDataList = response.data;\r\n      console.log('repDataList',repDataList);\r\n\r\n      if (repDataList) {\r\n        const accessToken = response.data.accessToken;\r\n        const refreshToken = response.data.refreshToken;\r\n        const loginUser = response.data.loginUser;\r\n        login(loginUser);\r\n        if (!isTokenExpired(accessToken) && !isTokenExpired(refreshToken)) {\r\n          sessionStorage.setItem('accessToken', accessToken);\r\n          localStorage.setItem('refreshToken', refreshToken);\r\n\r\n          const decodedAccessToken = jwtDecode(accessToken);\r\n          alert(\"'\" + decodedAccessToken.memberName + \"' 회원님 BLEU AUCTION에 오신 것을 환영합니다!\");\r\n          navigate('/');\r\n        }\r\n      }\r\n\r\n    }, error => console.log(error), 'application/json');\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Grid container component=\"main\" sx={{ height: '100vh' }}>\r\n        <CssBaseline />\r\n        <Grid\r\n          item\r\n          xs={false}\r\n          sm={4}\r\n          md={7}\r\n          sx={{\r\n            backgroundImage: 'url(/images/login.png)',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundColor: (t) =>\r\n              t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n          }}\r\n        />\r\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n          <Box\r\n            sx={{\r\n              my: 27,\r\n              mx: 4,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              안녕하세요 블루옥션입니다.\r\n            </Typography>\r\n            <Box component=\"form\" sx={{ mt: 1 }} noValidate onSubmit={handleSubmit}>\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"memberEmail\"\r\n\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                InputProps={{ style: { borderRadius: '30px' } }}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"memberPwd\"\r\n\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                InputProps={{ style: { borderRadius: '30px' } }}\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                sx={{ mt: 3, mb: 2, borderRadius: '30px' }} // borderRadius 추가\r\n              >\r\n                Login\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                sx={{\r\n                  mt: 3,\r\n                  mb: 2,\r\n                  height: '40px', // 원하는 높이로 설정\r\n                  width: '100%', // LOGIN 버튼과 동일한 너비로 설정\r\n                  borderRadius: '30px',\r\n                  backgroundColor: '#FFEB00', // 카카오 노란색\r\n                  '&:hover': {\r\n                    backgroundColor: '#FFD600', // 노란색의 어두운 톤으로 hover 효과 추가\r\n                  },\r\n                }}\r\n              >\r\n                <img\r\n                  src=\"/images/kakao_login_medium_wide.png\" // 이미지 경로 수정\r\n                  alt=\"kakao-login\"\r\n                  style={{ height: '150%', width: '150%', objectFit: 'contain' }} // objectFit 속성 추가\r\n                />\r\n               </Button>\r\n                  <Grid container sx={{ mt: 2, justifyContent: 'flex-end' }}>\r\n                    <Grid item xs={6}>\r\n                      <Link href=\"/register\" variant=\"body2\">\r\n                        {\"회원가입\"}\r\n                      </Link>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Box>\r\n              </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\RegisterPage.js",["350","351","352"],[],"import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { isOpenNow, sendAxiosRequest } from '../utility/common';\r\n\r\n// import DaumPostcode from 'react-daum-postcode';\r\n\r\n\r\n\r\n\r\nfunction RegisterPage() {\r\n\r\n  // const [showPostcode, setShowPostcode] = useState(false);\r\n\r\n  //   const handleAddress = (data) => {\r\n  //     handleChange({\r\n  //         target: {\r\n  //             name: \"zip\",\r\n  //             value: data.zonecode\r\n  //         }\r\n  //     });\r\n  //     handleChange({\r\n  //         target: {\r\n  //             name: \"address\",\r\n  //             value: data.address\r\n  //         }\r\n  //     });\r\n  //     setShowPostcode(false); // 주소 선택 후, 우편번호 찾기 창을 닫습니다.\r\n  // };\r\n\r\n  const useForm = (initialValues) => {\r\n    const [values, setValues] = useState(initialValues);  // values는 폼 컨트롤의 상태를 나타냄, initialValues로 초기 설정\r\n    const handleChange = (e) => {   //폼 컨트롤의 onChange 이벤트 핸들러\r\n      const { name, value } = e.target;\r\n      setValues({\r\n        ...values,\r\n        [name]: value,\r\n      });\r\n    };\r\n    return [values, handleChange];\r\n  };\r\n\r\n\r\n\r\n  // const [values, handleChange] = useForm({ //useForm은 초기 값 initialValues를 인수로 받음,  그 상태와 상태를 변경하는 함수를 반환하는 useForm 훅을 호출\r\n  //   email: '',\r\n  //   password: '',\r\n  //   name: '',\r\n  //   phone: '',\r\n  //   zip: '',\r\n  //   address: '',\r\n  //   detailAddress: '',\r\n  //   bank: '',\r\n  //   accountNumber: '',\r\n  //   accountType: '',\r\n  // });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // const requestData = { //객체는 폼에서 사용자가 입력한 데이터를 서버로 전송하기 위해 준비되는 데이터 구조\r\n  //   memberCategory: values.accountType,\r\n  //   memberEmail: values.email,      //values 객체의 email 속성 값을 requestData 객체의 email 속성에 할당\r\n  //   memberPwd: values.password,\r\n  //   memberName: values.name,\r\n  //   memberPhone: values.phone,\r\n  //   memberZipcode: values.zip,\r\n  //   memberAddr: values.address,\r\n  //   memberDetailAddr: values.detailAddress,\r\n  //   memberBank: values.bank,\r\n  //   memberAccount: values.accountNumber,\r\n  // };\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let formData = new FormData(e.target);\r\n    let formObj = formToJSON(formData);\r\n    sendAxiosRequest('/api/member/signup', 'POST', formObj, response => {\r\n      console.log('응답값:', response.data);\r\n      alert('회원가입에 성공하셨습니다!');\r\n      navigate('/');\r\n    },\r\n      error => {\r\n        console.error('API 호출 중 에러 발생: ', error);\r\n        alert('회원가입에 실패하셨습니다!');\r\n      }\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div style={styles.background}>\r\n      <div style={styles.logoContainer}>\r\n        <img src=\"/images/logo.png\" alt=\"BLEU AUCTION\" style={styles.logo} />\r\n      </div>\r\n      <div style={styles.container}>\r\n        <form onSubmit={handleSubmit} style={styles.form}>\r\n          <input style={styles.input} type=\"text\" name=\"memberName\" placeholder=\"이름\" />\r\n          <input style={styles.input} type=\"email\" name=\"memberEmail\" placeholder=\"이메일\" />\r\n          <input style={styles.input} type=\"password\" name=\"memberPwd\" placeholder=\"비밀번호\" />\r\n          <input style={styles.input} type=\"text\" name=\"memberPhone\" placeholder=\"전화번호\" />\r\n          {/* {showPostcode && (\r\n                <DaumPostcode\r\n                    onComplete={handleAddress}\r\n                    autoClose={true}\r\n                />\r\n            )} */}\r\n          <input style={styles.input} type=\"text\" name=\"memberZipcode\" placeholder=\"우편번호\" />\r\n          {/* <button onClick={() => setShowPostcode(true)} style={{...styles.button, marginBottom: '10px'}}>우편번호 찾기</button> */}\r\n          <input style={styles.input} type=\"text\" name=\"memberAddr\" placeholder=\"기본주소\" />\r\n          <input style={styles.input} type=\"text\" name=\"memberDetailAddr\" placeholder=\"상세주소\" />\r\n          <input style={styles.input} type=\"text\" name=\"memberBacnk\" placeholder=\"은행\" />\r\n          <input style={styles.input} type=\"text\" name=\"memberAccount\" placeholder=\"계좌번호\" />\r\n          <div style={styles.accountTypeContainer}>\r\n            <label style={styles.accountTypeLabel}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"memberCategory\"\r\n                value=\"M\"\r\n                style={styles.accountTypeInput}\r\n              />\r\n              개인\r\n            </label>\r\n            <label style={styles.accountTypeLabel}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"memberCategory\"\r\n                value=\"S\"\r\n                style={styles.accountTypeInput}\r\n              />\r\n              기업\r\n            </label>\r\n          </div>\r\n          <button type=\"submit\" style={styles.submitButton}>회원 가입</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  background: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    background: 'var(--Blue, linear-gradient(180deg, #0575E6 0%, #02298A 84.79%, #021B79 100%))',\r\n  },\r\n  logoContainer: {\r\n    marginBottom: '10px',\r\n  },\r\n  logo: {\r\n    width: '200px',\r\n  },\r\n  container: {\r\n    background: 'white',\r\n    padding: '20px',\r\n    borderRadius: '8px',\r\n    width: '400px',\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  toggleButtons: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    marginBottom: '20px',\r\n    borderRadius: '8px',\r\n  },\r\n  button: {\r\n    padding: '10px 20px',\r\n    cursor: 'pointer',\r\n    border: 'none',\r\n    backgroundColor: 'white',\r\n    borderRadius: '10px',\r\n  },\r\n  activeButton: {\r\n    padding: '10px 20px',\r\n    cursor: 'pointer',\r\n    border: 'none',\r\n    backgroundColor: 'lightgray',\r\n    borderRadius: '10px',\r\n  },\r\n  input: {\r\n    padding: '10px',\r\n    margin: '5px 0',\r\n    borderRadius: '8px',\r\n    border: '1px solid #ccc',\r\n    outline: 'none',\r\n  },\r\n  submitButton: {\r\n    padding: '10px 20px',\r\n    cursor: 'pointer',\r\n    backgroundColor: '#0575E6',\r\n    border: 'none',\r\n    borderRadius: '8px',\r\n    color: 'white',\r\n\r\n  },\r\n  accountTypeContainer: {\r\n    marginBottom: '10px',\r\n  },\r\n  accountTypeLabel: {\r\n    marginRight: '10px',\r\n    cursor: 'pointer',\r\n  },\r\n  accountTypeInput: {\r\n    marginRight: '5px',\r\n  },\r\n};\r\n\r\nexport default RegisterPage;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuList.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\SideBar.js",["353"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styles from './SideBar.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Chat from '../Chat/Chat';\r\nimport OS from '../OS/OS';\r\n\r\nfunction SideBar() {\r\n\r\n    const [isRaysModalOpen, setIsRaysModalOpen] = useState(false);\r\n    const [isChatModalOpen, setIsChatModalOpen] = useState(false);\r\n    const [scrollPosition, setScrollPosition] = useState(window.pageYOffset);\r\n\r\n    const openRaysModal = () => {\r\n        setIsRaysModalOpen(true);\r\n    };\r\n\r\n    const closeRaysModal = () => {\r\n        setIsRaysModalOpen(false);\r\n    };\r\n\r\n    const toggleChatModal = () => {\r\n        setIsChatModalOpen(!isChatModalOpen);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            setScrollPosition(window.pageYOffset);\r\n        };\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            className={styles.sideBarBox}\r\n            style={{ top: `${200 + scrollPosition}px` }} // 여기서 움직임을 처리합니다.\r\n        >\r\n            <Link to=\"/StoreItemAdd\">등록</Link>\r\n            <Link to=\"#\" onClick={openRaysModal}>\r\n                오늘의 <br />방사능\r\n            </Link>\r\n            <Link to=\"#\" onClick={toggleChatModal}>\r\n                챗봇\r\n            </Link>\r\n            {isRaysModalOpen && <OS closeModal={closeRaysModal} />}\r\n            {isChatModalOpen && <Chat closeModal={toggleChatModal} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SideBar;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\Header.js",["354","355","356","357","358","359","360"],[],"import React, { useEffect, useState } from 'react';\r\nimport { axios, formToJSON } from 'axios';\r\nimport styles from './Header.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport {\r\n  redirectLogin,\r\n  getAccessToken,\r\n  getLoginUserInfo,\r\n  logout,\r\n  accessTokenRefresh,\r\n  isNullUndefinedOrEmpty,\r\n  mainUrl,\r\n  isTokenExpired\r\n} from '../utility/common';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n\r\nfunction Header() {\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n  const refreshToken = localStorage.getItem('refreshToken');\r\n  const decodedAccToken = isTokenExpired(accessToken) ? null : jwtDecode(accessToken);\r\n  const decodedRefToken = isTokenExpired(refreshToken) ? null : jwtDecode(refreshToken);\r\n  const currentURL = window.location.href;\r\n  const [tokenMember, setTokenMember] = useState(accessToken);\r\n\r\n  console.log('Header.js => accessToken 디코딩값 : ', decodedAccToken);\r\n  console.log('Header.js => refreshToken 디코딩값 : ', decodedRefToken);\r\n  // console.log('(currentURL.replace(mainUrl)', currentURL.replace(mainUrl, ''));\r\n\r\n  useEffect(() => {\r\n    if (isTokenExpired(accessToken)) { // accessToken이 유효하지 않은경우\r\n      console.log('Header.js => 엑세스 토큰 만료에 따른 재발급!');\r\n      console.log('accessTokenRefresh(): ', accessTokenRefresh()); // refreshsToken으로 accessToken 재발급\r\n\r\n    } else if (isTokenExpired(accessToken) && isTokenExpired(refreshToken)) { // accessToken 과 refreshsToken이 모두 유효하지 않은경우\r\n      console.log('Header.js => accessToken (X) && refreshToken (X)');\r\n      redirectLogin(); // 로그인 필요 => 로그인 시 refreshsToken으로 accessToken 재발급\r\n    } else { // 둘다 유효하거나 accessToken만 유효한 경우\r\n      console.log('Header.js => accessToken만 유효 OR accessToken과 refreshToken 모두 유효');\r\n      setTokenMember(getAccessToken('d')); //엑세스토큰 디코딩 한 값 으로 tokenMember 객체 초기화\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.headerBox}>\r\n        <div className={styles.headerTop}>\r\n          <Link to=\"/\" id={styles.headerTitle}>BLEU AUCTION</Link>\r\n          <form className={styles.headerSearchForm}>\r\n            <input className={styles.headerSearchBox} type='text'\r\n              placeholder='검색어를 입력하세요.'></input>\r\n            <button id={styles.searchBtn} type=\"submit\"></button>\r\n          </form>\r\n          {isNullUndefinedOrEmpty(tokenMember) ? (\r\n            <>\r\n              <Link to='/mypage'>{tokenMember.memberName}님 환영합니다!</Link>\r\n              <Link onClick={logout}>로그아웃</Link>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Link to='/login'>로그인</Link>\r\n              <Link to='/register'>회원가입</Link>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n\r\n        <div className={styles.headerBottom}>\r\n          <Link to='/'>추천</Link>\r\n          <Link to='/store/list'>시장</Link>\r\n          <Link to='/StoreItemDailyPrice'>시세</Link>\r\n          <Link to='/notice/list'>공지사항</Link>\r\n        </div>\r\n        <hr></hr>\r\n      </div>\r\n      <div className={styles.hidden_block}></div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Test\\Test.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\routes\\Home.js",["361","362","363","364","365","366","367","368","369","370"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Announce from '../components/MainPage/Announce';\r\nimport StoreListItem from '../components/Market/StoreListItem';\r\nimport StoreHome from '../components/StoreHome';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport { accessTokenRefresh, redirectLogin, isNullUndefinedOrEmpty, sendAxiosRequest } from '../components/utility/common';\r\nimport { accordionSummaryClasses } from '@mui/material';\r\n\r\nfunction Home() {\r\n\r\n  const [stores, setStores] = useState([]);\r\n  const [pageRowCount, setPageRowCount] = useState([6]);\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n\r\n  /* 토큰 들고 요청 예시 */\r\n  // useEffect(() => {\r\n  //   if (isNullUndefinedOrEmpty(accessToken)) {   // AccessToken이 있을 때만 요청 \r\n\r\n  //     // 요청 헤더에 엑세스 토큰 추가\r\n  //     const config = {\r\n  //       headers: {\r\n  //         'Authorization': `Bearer ${accessToken}`\r\n  //       }\r\n  //     };\r\n\r\n  //     console.log('Home.js headers: ', config);\r\n\r\n  //     axios.get(`/api/store/list?pageLowCount=${pageRowCount}`, config)\r\n  //       .then(response => {\r\n  //         console.log('response.data: ', response.data);\r\n  //         setStores(response.data);\r\n  //       })\r\n  //       .catch(error => {\r\n  //         const errorData = error.response.data;\r\n  //         console.log('errorData: ', errorData);\r\n  //         if (errorData === 'E') { // 토큰이 있으나 만료\r\n  //           console.log('여기야');\r\n  //           accessTokenRefresh();\r\n  //         } else if (errorData === 'I') { // 토큰이 아예없거나 유효하지 않은 토큰\r\n  //           redirectLogin();\r\n  //         }\r\n  //       });\r\n  //   }\r\n  // }, [accessToken]); // accessToken이 변경될 때만 실행\r\n\r\n  useEffect(() => {\r\n    sendAxiosRequest(`/api/store/list?pageLowCount=${pageRowCount}`, 'GET', null, response => {\r\n      console.log('/api/store/list => response.data: ' + response.data);\r\n      if (isNullUndefinedOrEmpty(response.data)) {\r\n        setStores(response.data);\r\n      }\r\n    }, error => console.log(error), null, 'UA');\r\n\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n      <Announce />\r\n      {stores && (\r\n        <>\r\n          <StoreHome stores={stores} />\r\n          <button onClick={() => { console.log(stores); window.sessionStorage.getItem(\"memberNo\") }}>더보기-></button>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\Footer.js",["371","372","373","374"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport styles from './Footer.module.css';\r\n\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className={styles.footerBox}>\r\n      <img src='/images/LogoPage.png' />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuRegisterationForm.js",["375","376","377","378","379"],[],"import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { sendAxiosRequest } from '../utility/common';\r\nimport './MenuRegistrationForm.css';\r\n\r\n\r\nfunction MenuRegisterationForm() {\r\n  const [menu, setMenu] = useState({\r\n    menuImage: null,\r\n    menuName: '',\r\n    menuSize: '',\r\n    menuPrice: '',\r\n    menuContent: '',\r\n  });\r\n\r\n  const [previewImage, setPreviewImage] = useState(null); // 이미지 미리보기 URL\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) {\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      // 이미지 파일 데이터를 상태에 저장하고 미리보기 설정\r\n      setMenu({ ...menu, menuImage: file });\r\n      setPreviewImage(reader.result);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setMenu({ ...menu, [name]: value });\r\n  };\r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let formData = new FormData(e.target);\r\n    let formObj = formToJSON(formData);\r\n    sendAxiosRequest('/api/menu/new', 'POST', formObj, response => {\r\n      console.log('메뉴 응답값:', response.data);\r\n      alert('메뉴등록에 성공하셨습니다!');\r\n      navigate('/');\r\n    },\r\n      error => {\r\n        console.error('API 호출 중 에러 발생: ', error);\r\n        alert('메뉴등록에 실패하셨습니다!');\r\n      }\r\n    )\r\n  };\r\n\r\n  return (\r\n    // <div className=\"container\">\r\n    //   <form onSubmit={handleSubmit} className=\"form\">\r\n    //   <h2>메뉴 등록</h2>\r\n    //     <div>\r\n    //       <label>메뉴 이미지:</label>\r\n    //       <input className=\"input\" type=\"file\" onChange={handleImageChange} />\r\n    //       {previewImage && (\r\n    //         <div>\r\n    //           <h3>이미지 미리보기:</h3>\r\n    //           <img src={previewImage} alt=\"미리보기\" style={{ height: '100px' }} /> {/* 미리보기 이미지 크기는 조절 가능 */}\r\n    //         </div>\r\n    //       )}\r\n    //     </div>\r\n    //     <div>\r\n    //       <label>메뉴 이름:</label>\r\n    //       <input className=\"input\" type=\"text\" name=\"menuName\" value={menu.menuName} onChange={handleChange} />\r\n    //     </div>\r\n    //     <div>\r\n    //       <label>메뉴 사이즈:</label>\r\n    //       <select \r\n    //         name=\"menuSize\" \r\n    //         value={menu.menuSize} \r\n    //         onChange={handleChange} \r\n    //         className=\"input\"\r\n    //       >\r\n    //         <option value=\"\">-- 선택 --</option>\r\n    //         <option value=\"S\">소 (S)</option>\r\n    //         <option value=\"M\">중 (M)</option>\r\n    //         <option value=\"L\">대 (L)</option>\r\n    //       </select>        \r\n    //       </div>\r\n    //     <div>\r\n    //       <label>메뉴 가격:</label>\r\n    //       <input className=\"input\" type=\"number\" name=\"menuPrice\" value={menu.menuPrice} onChange={handleChange} />\r\n    //     </div>\r\n    //     <div>\r\n    //       <label>메뉴 설명:</label>\r\n    //       <textarea name=\"menuContent\" value={menu.menuContent} onChange={handleChange} />\r\n    //     </div>\r\n    //     <button type=\"submit\" className=\"submitButton\">메뉴 등록</button>\r\n    //   </form>\r\n    // </div>\r\n    <div class=\"container\">\r\n    <form action=\"/submit-menu\" method=\"post\" enctype=\"multipart/form-data\" class=\"form\"> \r\n        <h2>메뉴 등록</h2>\r\n        \r\n        <div class=\"input-group\">\r\n            <label for=\"menuImage\">메뉴 이미지</label>\r\n            <input class=\"input\" type=\"file\" id=\"menuImage\" name=\"menuImage\" placeholder=\"메뉴 이미지\"/>\r\n           \r\n        </div>\r\n\r\n        <div class=\"input-group\">\r\n            \r\n            <input class=\"input\" type=\"text\" id=\"menuName\" name=\"menuName\" placeholder=\"메뉴이름\"/>\r\n        </div>\r\n\r\n        <div class=\"input-group\">\r\n\r\n            <select class=\"input\" id=\"menuSize\" name=\"menuSize\">\r\n                <option value=\"\">-- 메뉴 사이즈 --</option>\r\n                <option value=\"S\">소 (S)</option>\r\n                <option value=\"M\">중 (M)</option>\r\n                <option value=\"L\">대 (L)</option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"input-group\">\r\n            <input class=\"input\" type=\"number\" id=\"menuPrice\" name=\"menuPrice\" placeholder=\"메뉴가격\"/>\r\n        </div>\r\n\r\n        <div class=\"input-group\">\r\n            <textarea class=\"input\" id=\"menuContent\" name=\"menuContent\" placeholder=\"메뉴설명\"></textarea>\r\n        </div>\r\n        \r\n        <button type=\"submit\" class=\"submitButton\">메뉴 등록</button>\r\n    </form>\r\n</div>\r\n  );\r\n}\r\n\r\n// const styles = {\r\n//   container: {\r\n//     display: 'flex',\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//     height: '30vh',\r\n//   },\r\n//   form: {\r\n//     display: 'flex',\r\n//     flexDirection: 'column',\r\n//     alignItems: 'center', // 폼 내용을 중앙 정렬합니다.\r\n//     padding: '20px',  // 내부 패딩을 추가합니다.\r\n//     borderRadius: '12px',  // 모서리를 둥글게 합니다.\r\n//     boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)', // 약간의 그림자 효과를 추가합니다.\r\n//     background: 'white', // 배경색을 흰색으로 설정합니다.\r\n//     width: '800px', \r\n//   },\r\n//   input: {\r\n//     padding: '10px',\r\n//     margin: '5px 0',\r\n//     borderRadius: '6px',\r\n//     border: '1px solid #ccc',\r\n//     outline: 'none',\r\n//     width: '300px', \r\n//   },\r\n//   submitButton: {\r\n//     padding: '10px 20px',\r\n//     cursor: 'pointer',\r\n//     backgroundColor: '#0575E6',\r\n//     border: 'none',\r\n//     borderRadius: '8px',\r\n//     color: 'white',\r\n//   },\r\n// }\r\n\r\n\r\nexport default MenuRegisterationForm;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\TabBar.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreList.js",["380","381","382","383","384","385","386","387","388","389","390","391"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Announce from '../MainPage/Announce';\r\nimport Coupon from '../MainPage/Announce';\r\nimport Category from '../MainPage/Category';\r\nimport StoreListItem from './StoreListItem';\r\nimport StoreHome from '../StoreHome';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport { isOpenNow, sendAxiosRequest, scrollMoveTop, getAccessToken, isTokenExpired } from '../utility/common';\r\nimport styles from './StoreList.module.css'\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nfunction StoreList() {\r\n  const pageLowCount = 3;\r\n  let [startPageNo, setStartPageNo] = useState(0);\r\n  let [storeList, setStoreList] = useState([]);\r\n  let [newAddLength, setNewAddLength] = useState(pageLowCount);\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n\r\n  useEffect(() => {\r\n    sendAxiosRequest(`/api/store/list`, 'GET', null, response => {\r\n      console.log('/api/store/list의 응답값 => ', response.data);\r\n      setStoreList(response.data);\r\n      setNewAddLength(response.data.length);\r\n      setStartPageNo(Math.floor(newAddLength / pageLowCount));\r\n    }, error => console.log(error), null, accessToken);\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      console.log(newAddLength);\r\n      if (newAddLength < pageLowCount) {\r\n        return;\r\n      }\r\n      if (\r\n        window.innerHeight + document.documentElement.scrollTop >=\r\n        document.documentElement.scrollHeight - 100\r\n      ) {\r\n\r\n        console.log(\"스크롤 이벤트 핸들러 작동\");\r\n        sendAxiosRequest(`/api/store/list?startPage=${startPageNo}`, 'GET', null, response => {\r\n          console.log(`/api/store/list?startPage=${startPageNo}의 응답값 => `, response.data);\r\n          let addReviewList = response.data;\r\n          setNewAddLength(addReviewList.length);\r\n          let newReviewList = [...storeList, ...addReviewList];\r\n          setStartPageNo(Math.floor(newReviewList.length / pageLowCount));\r\n          setStoreList(newReviewList);\r\n        }, error => console.log(error), null, accessToken)\r\n      }\r\n    };\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    }\r\n  }, [startPageNo, storeList]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Announce />\r\n      <div className={styles.storeListBox}>\r\n        {storeList.map((store, index) => (\r\n          <StoreListItem key={index} data={store} />\r\n        ))}\r\n      </div>\r\n      <div id=\"topBtnDiv\" onClick={scrollMoveTop}>↑</div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StoreList;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\MarketDetailPage.js",["392","393","394","395","396"],[],"import React, { useState } from 'react';\r\nimport TabBar from './TabBar';\r\nimport MenuList from '../Menu/MenuList';\r\nimport StoreInfoDetail from './StoreInfoDetail';\r\nimport Button from '../MainPage/Button';\r\nimport StoreInfo from './StoreInfo';\r\nimport ReviewForm from '../Review/ReviewForm';\r\nimport { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport {getAccessToken, sendAxiosRequest} from '../utility/common';\r\nimport { MenuItem } from '@mui/material';\r\nimport OrderModal from './OrderModal';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\n\r\nfunction MarketDetailPage() {\r\n  let acc = sessionStorage.getItem('accessToken');\r\n  jwtDecode(acc);\r\n\r\n  const [activeTab, setActiveTab] = useState('info');\r\n  const [modal, setModal] = useState(false);\r\n  const [menuData, setMenuData] = useState([]); // 메뉴 데이터를 저장할 상태\r\n  const [storeDetail, setStoreDetail] = useState(null); // 처음에는 정보가 없으므로 null로 초기화합니다.\r\n\r\n\r\n  const location = useLocation(); // 추가된 부분\r\n  const store = location.state; // 추가된 부분\r\n\r\n\r\n  const storeInfo = {\r\n    image: '/images/storeimage.png',\r\n    name: '대원수산',\r\n    location: '서울특별시 동작구 노들로 674 노량진수산시장 , 2층 활어 2-15호 강변상회',\r\n    hours: '월요일 (오늘) 09:00 ~ 21:00',\r\n    phone: '02-1234-5678',\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (store && store.storeNo) {\r\n      // 상점 번호가 있는 경우에만 요청을 실행합니다.\r\n      sendAxiosRequest(`/api/menu/${store.storeNo}`, 'GET', null, response => {\r\n        if (response.data && response.data.length > 0) {\r\n          console.log(response.data);\r\n          setMenuData(response.data.map((menu) => ({\r\n            ...menu,\r\n            count: 0\r\n          }))); // 받아온 데이터로 상태를 업데이트합니다.\r\n          console.log(menuData);\r\n        }\r\n      }, error => {\r\n        console.error(\"An error occurred while fetching the menus:\", error);\r\n      }, null, accessToken);\r\n    }\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  // 가게 정보 및 메뉴 정보를 불러오는 부분\r\n  useEffect(() => {\r\n    if (store && store.storeNo) {\r\n      // 가게 정보를 불러오는 API 요청\r\n      sendAxiosRequest(`/api/store/${store.storeNo}`, 'GET', null, response => {\r\n        console.log(\"Store details fetched:\", response.data);\r\n        setStoreDetail(response.data); // 받아온 데이터로 상태를 업데이트합니다.\r\n      }, error => {\r\n        console.error(\"An error occurred while fetching the store details:\", error);\r\n      });\r\n\r\n      // 메뉴 정보를 불러오는 API 요청 (기존 로직 유지)\r\n      // ... (기존 메뉴 정보 요청 코드)\r\n    }\r\n  }, [store]); // store가 변경될 때마다 이 훅을 재실행합니다.\r\n\r\n\r\n  const handleOrderClick = () => {\r\n    // alert('주문하기 버튼 클릭!');\r\n    setModal(true);\r\n    console.log(modal);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModal(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={infoContainerStyle}>\r\n      <StoreInfo storeInfo={storeInfo} store={store} />\r\n      </div>\r\n      <div style={tabContainerStyle}>\r\n        <TabBar activeTab={activeTab} onTabClick={setActiveTab} />\r\n        {activeTab === 'menu' && <Button onClick={handleOrderClick} buttonText=\"주문하기\" />}\r\n        <OrderModal store={store} menus={menuData} isOpen={modal} onClose={closeModal} setMenuData={setMenuData} />\r\n      </div>\r\n      {activeTab === 'info' && <StoreInfoDetail storeDetail={storeDetail}/>}\r\n      {activeTab === 'menu' && <MenuList menus={menuData}/>}\r\n      {activeTab === 'review' && <ReviewForm  store={store}/>}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nconst infoContainerStyle = {\r\n  marginBottom: '0px', // 예시: 아래쪽 마진을 추가하여 공간 생성\r\n};\r\n\r\nconst tabContainerStyle = {\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'center'\r\n};\r\n\r\n\r\nexport default MarketDetailPage;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreMyPage.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreItemRegister.js",["397","398","399","400","401","402","403","404","405","406","407"],[],"import '../utility/Common.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Form, Card, Button } from 'react-bootstrap';\r\nimport { json, useNavigate } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\nimport {\r\n  sendAxiosRequest,\r\n  addEventToElements,\r\n  removeEventToElements,\r\n  isTokenExpired, getAccessToken, isNullUndefinedOrEmpty, isNotNullOrNonEmpty\r\n} from '../utility/common';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nfunction formatNumber(number) {\r\n  return number.toLocaleString();\r\n}\r\n\r\nfunction updateItemNames() {\r\n  const itemCodeSelect = document.getElementById(\"itemCode\");\r\n  const itemNameSelect = document.getElementById(\"itemName\");\r\n\r\n  const selectedValue = itemCodeSelect.value;\r\n  const itemNames = itemNameSelect;\r\n\r\n  const options = {\r\n    'N': ['품목구분 항목을 먼저 선택해주세요.'],\r\n    'S': ['광어', '우럭', '도미', '방어', '전복', '참치', '연어', '가리비', '전갱이'],\r\n    'F': ['광어', '우럭', '도미', '방어', '전복', '참치', '연어', '가리비', '전갱이'],\r\n    'C': ['새우'],\r\n    'M': ['가리비', '오징어'],\r\n    'E': ['기타']\r\n  };\r\n\r\n  itemNames.innerHTML = '';\r\n  options[selectedValue].forEach(fishName => {\r\n    const option = document.createElement('option');\r\n    option.value = fishName;\r\n    option.textContent = fishName;\r\n    itemNames.appendChild(option);\r\n  });\r\n}\r\n\r\nconst codeToTextMap = {\r\n  'ES': '동해',\r\n  'WS': '서해',\r\n  'SS': '남해',\r\n  'JJ': '제주',\r\n  'WD': '완도',\r\n  'JP': '일본',\r\n  'CN': '중국',\r\n  'RU': '러시아',\r\n  'NW': '노르웨이',\r\n  'ET': '기타'\r\n};\r\n\r\n\r\nfunction updateOriginStatus() {\r\n  const originStatusSelects = document.querySelectorAll(\"[name=originStatus]\");\r\n  const originPlaceStatusSelect = document.getElementById(\"originPlaceStatus\");\r\n\r\n  let selectedValue;\r\n  originStatusSelects.forEach(input => {\r\n    if (input.checked) {\r\n      selectedValue = input.value;\r\n    }\r\n  })\r\n\r\n  const originPlaceNames = originPlaceStatusSelect;\r\n\r\n  const options = {\r\n    'D': ['ES', 'WS', 'SS', 'JJ', 'WD', 'ET'],\r\n    'I': ['JP', 'CN', 'RU', 'NW', 'ET']\r\n  };\r\n\r\n  originPlaceNames.innerHTML = '';\r\n  options[selectedValue].forEach(regionCode => {\r\n    const option = document.createElement('option');\r\n    option.value = regionCode;\r\n    console.log(regionCode);\r\n    option.textContent = codeToTextMap[regionCode] || regionCode;\r\n    originPlaceNames.appendChild(option);\r\n  });\r\n}\r\n\r\n\r\nfunction insertSidp(tokenMember) {\r\n  let form = document.getElementById('sidpForm');\r\n  let formData = new FormData(form);\r\n  let jsonObj = formToJSON(formData);\r\n  jsonObj.dailyPrice = formatNumber(jsonObj.dailyPrice).replaceAll(',', '');\r\n  console.log('jsonObj: ', jsonObj);\r\n  sendAxiosRequest('api/sidp/add', 'POST', jsonObj, response => {\r\n    if (isNotNullOrNonEmpty(response.data)) {\r\n      console.log('response.data: ', response.data);\r\n      alert('품목 시세를 성공적으로 등록하였습니다.');\r\n      window.location.reload();\r\n    } else {\r\n      alert('품목 등록에 실패하였습니다. 잠시후 다시 시도해주세요!');\r\n    }\r\n\r\n\r\n  }, erorr => console.log(console.log(erorr)), null, tokenMember);\r\n}\r\n\r\n\r\n\r\n\r\nfunction StoreItemRegister() {\r\n  const [tokenMember] = useState(getAccessToken('a'));\r\n  const [dailyPrice, setDailyPrice] = useState(''); // 사용자 입력을 저장할 상태\r\n  const [minPrice] = useState(0); // 최소가격\r\n  const [maxPrice] = useState(1000000); // 최대가격\r\n  const [store] = useState(1);\r\n\r\n  console.log('tokenMember: ', tokenMember);\r\n\r\n  function handleDailyPriceChange(event) {\r\n    let inputNumber = parseInt(event.target.value.replace(/,/g, ''), 10);\r\n\r\n    // 최소 및 최대 값 적용\r\n    if (isNaN(inputNumber) || inputNumber < minPrice) {\r\n      inputNumber = minPrice;\r\n    } else if (inputNumber > maxPrice) {\r\n      alert('입력 가능한 최대 가격을 초과하였습니다!')\r\n      inputNumber = '';\r\n    }\r\n    setDailyPrice(formatNumber(inputNumber));\r\n  }\r\n  // useEffect 내에서 updateItemNames를 호출\r\n  useEffect(() => {\r\n    const itemCodeSelect = document.getElementById(\"itemCode\");\r\n    const originStatusSelects = document.querySelectorAll(\"[name=originStatus]\");\r\n\r\n    itemCodeSelect.addEventListener('change', updateItemNames);\r\n    addEventToElements('change', updateOriginStatus, originStatusSelects);\r\n\r\n    return () => {\r\n      itemCodeSelect.removeEventListener('change', updateItemNames);\r\n      removeEventToElements('change', updateOriginStatus, originStatusSelects);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div className='ba-cursor-pointer-div'>\r\n      <form id='sidpForm' className='ba-form-container'>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"2\">품목 시세등록 </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <th><label htmlFor=\"daliyPriceDate\">기준날짜</label></th>\r\n              <td>\r\n                <input name='storeNo' type='text' hidden value='1' />\r\n                <input type='date' name='daliyPriceDate' />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label htmlFor=\"item_code\">품목구분</label></th>\r\n              <td>\r\n                <select name='itemCode' id=\"itemCode\">\r\n                  <option selected value=\"N\">선택안함</option>\r\n                  <option value=\"S\">생선(횟감)</option>\r\n                  <option value=\"F\">생선(비횟감)</option>\r\n                  <option value=\"C\">갑각류</option>\r\n                  <option value=\"M\">패류</option>\r\n                  <option value=\"E\">기타</option>\r\n                </select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label htmlFor=\"itemName\">품목</label></th>\r\n              <td>\r\n                <select name='itemName' id=\"itemName\">\r\n                  <option selected>품목구분 항목을 먼저 선택해주세요.</option>\r\n                </select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label>크기</label></th>\r\n              <td>\r\n                <label htmlFor=\"itemSizeS\">\r\n                  <input type=\"radio\" id=\"itemSizeS\" name=\"itemSize\" value=\"S\" /> 소\r\n                </label>\r\n                <label htmlFor=\"itemSizeM\">\r\n                  <input type=\"radio\" id=\"itemSizeM\" name=\"itemSize\" value=\"M\" /> 중\r\n                </label>\r\n                <label htmlFor=\"itemSizeL\">\r\n                  <input type=\"radio\" id=\"itemSizeL\" name=\"itemSize\" value=\"L\" /> 대\r\n                </label>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label>원산지</label></th>\r\n              <td>\r\n                <label htmlFor=\"originD\">\r\n                  <input type=\"radio\" id=\"originD\" name=\"originStatus\" value=\"D\" /> 국내산\r\n                </label>\r\n                <label htmlFor=\"originI\">\r\n                  <input type=\"radio\" id=\"originI\" name=\"originStatus\" value=\"I\" /> 수입산\r\n                </label>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label htmlFor=\"originPlaceStatus\">지역명</label></th>\r\n              <td>\r\n                <select name=\"originPlaceStatus\" id=\"originPlaceStatus\">\r\n                  <option selected>원산지 항목을 먼저 선택해주세요.</option>\r\n                </select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label>자연산/양식</label></th>\r\n              <td>\r\n                <label htmlFor=\"wildFarmStatusW\">\r\n                  <input type=\"radio\" id=\"wildFarmStatusW\" name=\"wildFarmStatus\" value=\"W\" /> 자연산\r\n                </label>\r\n                <label htmlFor=\"wildFarmStatusF\">\r\n                  <input type=\"radio\" id=\"wildFarmStatusF\" name=\"wildFarmStatus\" value=\"F\" /> 양식\r\n                </label>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label>금일가격</label></th>\r\n              <td>\r\n                <label htmlFor=\"dailPrice\">\r\n                  <input type=\"text\" id=\"dailyPrice\" name=\"dailyPrice\" value={dailyPrice}\r\n                    onChange={handleDailyPriceChange} />(원)\r\n                </label>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <button type=\"button\" className='ba-btn ba-margin-tb50' onClick={() => insertSidp(tokenMember)}>품목시세 등록</button>\r\n      </form>\r\n    </div >\r\n\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default StoreItemRegister;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\UserEditPage.js",["408","409","410"],[],"import React, { useState, useEffect } from 'react';\r\nimport InputField from './InputField';\r\nimport { sendAxiosMultipartRequest, sendAxiosRequest } from '../utility/common';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nfunction UserEditPage() {\r\n  const [currentImage, setCurrentImage] = useState('http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg');\r\n  const [member, setMember] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n    sendAxiosRequest('api/member/loginCheck', 'GET', null, response => {\r\n      let loginUser = response.data.loginUser;\r\n      console.log(loginUser);\r\n      setMember(loginUser);\r\n      setCurrentImage('http://kr.object.ncloudstorage.com/bleuauction-bucket/' + loginUser.memberAttaches[0].filePath + loginUser.memberAttaches[0].saveFilename);\r\n    }, error => console.log(error))\r\n  }, []);\r\n\r\n\r\n  function memberUpdate() {\r\n    let memberForm = document.getElementById('memberForm');\r\n    const formData = new FormData(memberForm);\r\n    const updateMemberRequest = JSON.stringify(formData);\r\n\r\n    const updateMemberBlob = new Blob([updateMemberRequest], { type: 'application/json' });\r\n    formData.append('updateMemberRequest', updateMemberBlob);\r\n\r\n    const fileInput = document.getElementById('imageInput');\r\n\r\n    if (fileInput && fileInput.files[0]) {\r\n      console.log('조건만족하나?');\r\n      formData.append('profileImage', fileInput.files[0]);\r\n    }\r\n\r\n    console.log('formData: ', formData);\r\n    console.log('formData: ', formToJSON(formData));\r\n    axios.post('/api/member/update', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    })\r\n      .then(response => {\r\n        console.log('서버 응답:', response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('에러 발생:', error);\r\n      });\r\n  }\r\n\r\n\r\n  const handleImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setCurrentImage(e.target.result);\r\n      };\r\n      reader.readAsDataURL(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n\r\n  const handleImageClick = () => {\r\n    document.getElementById('imageInput').click();\r\n  };\r\n\r\n\r\n  if (member === null) {\r\n    return <div>Loading...</div>; // 로딩 표시\r\n  } else {\r\n    return (\r\n      <div style={styles.container}>\r\n        <form id='memberForm' onClick={handleImageChange} style={styles.form}>\r\n          <img src={currentImage} alt={member.memberName} style={styles.profilePicture} onClick={handleImageClick} />\r\n          <br />\r\n          <button type=\"button\" style={styles.buttonStyle} onClick={() => { document.getElementById('imageInput').click() }}>사진 등록</button>\r\n          {/* <form onClick={handleImageChange} style={styles.form}> */}\r\n          <input type=\"file\" style={{ display: 'none' }} id=\"imageInput\" onChange={handleImageChange}\r\n          />\r\n          <div style={styles.formSection}>\r\n            <h1 style={styles.title}>일반 회원 정보 수정</h1>\r\n            <InputField type=\"text\" name=\"memberName\" value={member.memberName} onChange={e => setMember({ ...member, memberName: e.target.value })} placeholder=\"Name\" />\r\n            <InputField type=\"email\" name=\"memberEmail\" value={member.memberEmail} onChange={e => setMember({ ...member, memberEmail: e.target.value })} placeholder=\"Email\" />\r\n            <InputField type=\"password\" name=\"memberPwd\" value={member.memberPwd} onChange={e => setMember({ ...member, memberPwd: e.target.value })} placeholder=\"Password\" />\r\n            <InputField type=\"text\" name=\"memberPhone\" value={member.memberPhone} onChange={e => setMember({ ...member, memberPhone: e.target.value })} placeholder=\"Phone Number\" />\r\n            <InputField type=\"text\" name=\"memberZipcode\" value={member.memberZipcode} onChange={e => setMember({ ...member, memberZipcode: e.target.value })} placeholder=\"Postal Code\" />\r\n            <InputField type=\"text\" name=\"memberAddr\" value={member.memberAddr} onChange={e => setMember({ ...member, memberAddr: e.target.value })} placeholder=\"Primary Address\" />\r\n            <InputField type=\"text\" name=\"memberDetailAddr\" value={member.memberDetailAddr} onChange={e => setMember({ ...member, memberDetailAddr: e.target.value })} placeholder=\"Detail Address\" />\r\n            <InputField type=\"text\" name=\"memberBank\" value={member.memberBank} onChange={e => setMember({ ...member, memberBank: e.target.value })} placeholder=\"Bank\" />\r\n            <InputField type=\"text\" name=\"memberAccount\" value={member.memberAccount} onChange={e => setMember({ ...member, memberAccount: e.target.value })} placeholder=\"Account Number\" />\r\n            <button type='button' onClick={memberUpdate} style={styles.buttonStyle}>수정</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'row', // 행 방향으로 아이템들을 정렬합니다.\r\n    alignItems: 'flex-start', // 아이템들을 컨테이너의 시작 부분에 정렬합니다.\r\n    // margin: '0 auto', // 컨테이너를 화면 가운데 정렬합니다.\r\n    padding: '20px', // 컨테이너의 패딩을 추가합니다.\r\n    // width: '50%',\r\n    justifyContent: 'center'\r\n  },\r\n  profilePicture: {\r\n    width: '200px',\r\n    height: '200px',\r\n    borderRadius: '100px',\r\n    marginBottom: '20px',\r\n    alignSelf: 'flex-start', // 사진을 컨테이너의 시작 부분에 정렬합니다.\r\n  },\r\n  formSection: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n    marginLeft: '20px', // 프로필 사진과 폼 섹션 사이에 마진을 추가합니다.\r\n  },\r\n  title: {\r\n    fontSize: '24px', // 원하는 폰트 크기로 설정합니다.\r\n    fontWeight: 'bold', // 제목의 폰트를 굵게 설정합니다.\r\n    marginBottom: '20px', // 제목 아래에 마진을 추가합니다.\r\n    textAlign: 'center',\r\n  },\r\n  buttonStyle: {\r\n    border: 'none',\r\n    margin: '10px 0',\r\n    padding: '10px',\r\n    borderRadius: '4px',\r\n    backgroundColor: '#C4C4C433',\r\n    textAlign: 'center', // 수정: 텍스트를 중앙에 배치합니다.\r\n    // boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.2)',\r\n    width: '500px',\r\n    cursor: 'pointer',\r\n\r\n  }\r\n};\r\n\r\nexport default UserEditPage;\r\n\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreRegisterPage.js",["411","412"],[],"import React, { useState } from 'react';\r\n// import { Form, Card, Button } from 'react-bootstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\n\r\n\r\n\r\nfunction StoreRegisterPage() {\r\n\r\n\r\n  const navigate = useNavigate();\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log(e.target);\r\n    let formData = new FormData(e.target);\r\n\r\n    let jsonObj = formToJSON(formData);\r\n\r\n    console.log(jsonObj);\r\n\r\n    // POST 요청 생성\r\n    axios.post('/api/store/signup', jsonObj, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(response => {\r\n        // 성공적으로 서버에서 응답을 받은 경우의 처리\r\n        console.log('등록된 가게 정보:', response.data);\r\n        alert('가게 등록 성공!')\r\n        navigate('/mypage');\r\n\r\n      })\r\n      .catch(error => {\r\n        // 오류가 발생한 경우의 처리\r\n        console.error('에러 발생:', error);\r\n      });\r\n\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <form onSubmit={handleSubmit} style={styles.form}>\r\n      <div>\r\n        <h2>가게 등록 </h2>\r\n        </div>\r\n        <div>\r\n        <label>시장명: </label>\r\n        <input style={styles.input} type=\"text\" name=\"marketName\" />\r\n        </div>\r\n        <div>\r\n        <label>가게명: </label>\r\n        <input style={styles.input} type=\"text\" name=\"storeName\" />\r\n        </div>\r\n        <div>\r\n        <label>사업자등록번호: </label>\r\n        <input style={styles.input} type=\"text\" name=\"licenseNo\" />\r\n        </div>\r\n        <div>\r\n        <label>우편번호: </label>\r\n        <input style={styles.input} type=\"text\" name=\"storeZipcode\" />\r\n        </div>\r\n        <div>\r\n        <label>기본주소: </label>\r\n        <input style={styles.input} type=\"text\" name=\"storeAddr\" />\r\n        </div>\r\n        <div>\r\n        <label>상세주소: </label>\r\n        <input style={styles.input} type=\"text\" name=\"storeDetailAddr\" />\r\n        </div>\r\n\r\n\r\n        <div>\r\n          <label>평일운영시작시간: </label>\r\n          <input style={styles.input} type=\"time\" name=\"weekdayStartTime\" />\r\n        </div>\r\n        <div>\r\n          <label>평일운영종료시간: </label>\r\n          <input style={styles.input} type=\"time\" name=\"weekdayEndTime\" />\r\n        </div>\r\n        <div>\r\n          <label>주말운영시작시간: </label>\r\n          <input style={styles.input} type=\"time\" name=\"weekendStartTime\" />\r\n        </div>\r\n        <div>\r\n          <label>주말운영종료시간: </label>\r\n          <input style={styles.input} type=\"time\" name=\"weekendEndTime\" />\r\n        </div>\r\n\r\n        <button type=\"submit\" style={styles.submitButton}> 가게 등록</button>\r\n\r\n      </form>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '60vh',\r\n  },\r\n  card: {\r\n    width: '50%', \r\n    boxShadow: '0 8px 30px rgba(0, 0, 0, 0.12)',\r\n    borderRadius: '20px', \r\n    padding: '20px', \r\n  },\r\n\r\n  title: {\r\n    fontSize: '1.8rem',\r\n    marginBottom: '30px',\r\n    textAlign: 'center',\r\n  },\r\n  button: {\r\n    background: 'linear-gradient(to right, #6a11cb, #2575fc)',\r\n    border: 'none',\r\n    padding: '10px 20px',\r\n    color: 'white',\r\n    borderRadius: '25px',\r\n    transition: 'all 0.2s',\r\n    cursor: 'pointer',\r\n    transition: 'all 0.3s', \r\n    '&:hover': {\r\n      transform: 'scale(1.1)', \r\n    },\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center', // 폼 내용을 중앙 정렬합니다.\r\n    padding: '20px',  // 내부 패딩을 추가합니다.\r\n    borderRadius: '12px',  // 모서리를 둥글게 합니다.\r\n    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)', // 약간의 그림자 효과를 추가합니다.\r\n    background: 'white', // 배경색을 흰색으로 설정합니다.\r\n    width: '800px', \r\n  },\r\n  input: {\r\n    padding: '10px',\r\n    margin: '5px 0',\r\n    borderRadius: '6px',\r\n    border: '1px solid #ccc',\r\n    outline: 'none',\r\n    width: '300px', \r\n  },\r\n  submitButton: {\r\n    padding: '10px 20px',\r\n    cursor: 'pointer',\r\n    backgroundColor: '#0575E6',\r\n    border: 'none',\r\n    borderRadius: '8px',\r\n    color: 'white',\r\n  },\r\n};\r\n\r\n\r\n\r\nexport default StoreRegisterPage;\r\n\r\n\r\n\r\n// import * as React from 'react';\r\n// import { Button, TextField, Box, Typography, Container } from '@mui/material';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n// function StoreRegisterPage() {\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     const formData = new FormData(e.currentTarget);\r\n//     // 폼 데이터를 JSON으로 변환하는 로직이 필요합니다.\r\n//     // formToJSON 함수를 정의하거나 다른 방법을 사용하세요.\r\n\r\n//     // JSON 객체 생성\r\n//     let jsonObj = {}; \r\n//     formData.forEach((value, key) => { jsonObj[key] = value });\r\n\r\n//     console.log(jsonObj);\r\n\r\n//     // POST 요청 생성\r\n//     axios.post('/api/store/signup', jsonObj, {\r\n//       headers: {\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     })\r\n//       .then(response => {\r\n//         console.log('등록된 가게 정보:', response.data);\r\n//         // navigate('/path-after-success'); // 성공 후 리디렉션 경로\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('에러 발생:', error);\r\n//       });\r\n//   };\r\n\r\n//   // Material-UI 컴포넌트를 사용한 레이아웃\r\n//   return (\r\n//     <Container component=\"main\" maxWidth=\"xs\">\r\n//       <Box\r\n//         sx={{\r\n//           marginTop: 8,\r\n//           display: 'flex',\r\n//           flexDirection: 'column',\r\n//           alignItems: 'center',\r\n//         }}\r\n//       >\r\n//         <Typography component=\"h1\" variant=\"h5\">\r\n//           가게 등록\r\n//         </Typography>\r\n//         <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n//           <TextField\r\n//             margin=\"normal\"\r\n//             required\r\n//             fullWidth\r\n//             id=\"marketName\"\r\n//             label=\"시장명\"\r\n//             name=\"marketName\"\r\n//             autoComplete=\"market-name\"\r\n//             autoFocus\r\n//           />\r\n//           {/* 다른 필드들도 이와 유사한 형태로 추가합니다. */}\r\n//           {/* 예시: */}\r\n//           <TextField\r\n//             margin=\"normal\"\r\n//             required\r\n//             fullWidth\r\n//             name=\"storeName\"\r\n//             label=\"가게명\"\r\n//             id=\"storeName\"\r\n//             autoComplete=\"store-name\"\r\n//           />\r\n//           {/* 나머지 필드를 여기에 추가 */}\r\n//           {/* ... */}\r\n//           <Button\r\n//             type=\"submit\"\r\n//             fullWidth\r\n//             variant=\"contained\"\r\n//             sx={{ mt: 3, mb: 2 }}\r\n//           >\r\n//             가게 등록\r\n//           </Button>\r\n//         </Box>\r\n//       </Box>\r\n//     </Container>\r\n//   );\r\n// }\r\n\r\n// export default StoreRegisterPage;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyPage.js",["413","414","415","416","417","418"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { isOpenNow, sendAxiosRequest, isTokenExpired } from '../utility/common';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nfunction MyPage() {\r\n  // 사용자 정보를 상태 혹은 API로부터 불러오기.\r\n  // 예시\r\n  // const user = {\r\n  //   name: 'Rose',\r\n  //   email: 'rose@example.com',\r\n  //   accountType: 'personal', // or 'business'\r\n  //   profilePicture: '/images/rose.png',\r\n  // };\r\n\r\n  const defaultImage = '/images/rose.png';\r\n\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n  const member = isTokenExpired(accessToken) ? null : jwtDecode(accessToken);\r\n\r\n  const outerContainerStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    margin: '0',\r\n  };\r\n\r\n  const styles = {\r\n    container: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      justifyContent: 'center', // 가운데 정렬 추가\r\n      padding: '20px',\r\n      width: '70%',\r\n      height: '30vh', // 화면 높이의 100%를 차지하도록 설정\r\n    },\r\n    profileSection: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      marginBottom: '20px',\r\n      width: '100%', //\r\n    },\r\n    profilePicture: {\r\n      width: '110px',\r\n      height: '110px',\r\n      borderRadius: '80px',\r\n      marginRight: '20px', // 사진과 텍스트 사이의 간격을 조정\r\n    },\r\n    userInfo: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'flex-start', // 왼쪽 정렬\r\n    },\r\n    linkSection: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      width: '100%',\r\n    },\r\n    linkContainer: {\r\n      margin: '20px 0',\r\n      padding: '20px',\r\n      borderRadius: '4px',\r\n      backgroundColor: '#ffffff',\r\n      textAlign: 'center',\r\n      boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.2)',\r\n    },\r\n    link: {\r\n      textDecoration: 'none',\r\n      color: 'black',\r\n      fontWeight: 'bold',\r\n    },\r\n    button: {\r\n      display: 'inline-block',\r\n      padding: '10px 20px',\r\n      margin: '5px 0',\r\n      backgroundColor: '#4CAF50',\r\n      color: 'white',\r\n      textDecoration: 'none',\r\n      textAlign: 'center',\r\n      borderRadius: '8px',\r\n    },\r\n  };\r\n  const personalLinks = (\r\n    <>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/useredit\" style={styles.link}>회원정보 수정</Link>\r\n      </div>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/my-orders\" style={styles.link}>마이 오더</Link>\r\n      </div>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/\" style={styles.link}>찜하기</Link>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  // 비즈니스 사용자용 링크\r\n  const businessLinks = (\r\n    <>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/useredit\" style={styles.link}>회원정보 수정</Link>\r\n      </div>\r\n      <div style={styles.linkContainer}>\r\n          <Link\r\n            to= \"/menuEdit\"\r\n            style={styles.link}\r\n          >\r\n            메뉴 관리\r\n      </Link>\r\n      </div>\r\n        <div style={styles.linkContainer}>\r\n            <Link to=\"/\" style={styles.link}>품목 관리</Link>\r\n      </div>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/order-confirmation\" style={styles.link}>주문확인</Link>\r\n      </div>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/storeRegister\" style={styles.link}>가게등록</Link>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  // 관리자 사용자용 링크\r\n  const adminLinks = (\r\n    <>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/admin/notice/list\" style={styles.link}>공지사항 관리</Link>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n\r\n  if (member === null) {\r\n    return <div>Loading...</div>; // 로딩 표시\r\n  } else {\r\n    return (\r\n      <div style={outerContainerStyle}>\r\n        <div style={styles.container}>\r\n          <div style={styles.profileSection}>\r\n            <img src={defaultImage} alt={member.memberName} style={styles.profilePicture} />\r\n            <div style={styles.userInfo}>\r\n              <h2>{member.memberName}</h2>\r\n              <p> {member.memberCategory === 'M' ? '개인' :\r\n                member.memberCategory === 'S' ? '비즈니스' :\r\n                  member.memberCategory === 'A' ? '관리자' : '기타'}\r\n                계정</p>\r\n              <p>{member.memberEmail}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div style={styles.linkSection}>\r\n            {/* member.memberCategory 값에 따라 링크 섹션을 조건부로 렌더링합니다. */}\r\n            {/* member.memberCategory 값에 따라 링크 섹션을 조건부로 렌더링합니다. */}\r\n            {member.memberCategory === 'M' ? personalLinks :\r\n              member.memberCategory === 'S' ? businessLinks :\r\n                member.memberCategory === 'A' ? adminLinks : undefined}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default MyPage;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyOrder.js",["419"],[],"import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport MyOrderContent from './MyOrderContent';\r\n\r\n\r\nfunction MyOrder() {\r\n\r\n  const order1 = {\r\n    orderPrice:'10000',\r\n    recipientPhone:'01011111111',\r\n    recipientName: '김성주',\r\n    recipientZipcode: '1111',\r\n    recipientAddr: '기본주소',\r\n    recipientDetailAddr: '상세주소',\r\n    regDatetime: '2023-09-01 15:00:00',\r\n    mdfDatetime: '2023-09-01 15:00:00',\r\n    orderStatus: 'Y'\r\n  }\r\n\r\n  const order2 = {\r\n    orderPrice:'20000',\r\n    recipientPhone:'01011111111',\r\n    recipientName: '김성주2',\r\n    recipientZipcode: '1111',\r\n    recipientAddr: '기본주소',\r\n    recipientDetailAddr: '상세주소',\r\n    regDatetime: '2023-09-01 15:00:00',\r\n    mdfDatetime: '2023-09-01 15:00:00',\r\n    orderStatus: 'N'\r\n  }\r\n\r\n  const order3 = {\r\n    orderPrice:'10000',\r\n    recipientPhone:'01011111111',\r\n    recipientName: '김성주',\r\n    recipientZipcode: '1111',\r\n    recipientAddr: '기본주소',\r\n    recipientDetailAddr: '상세주소',\r\n    regDatetime: '2023-09-01 15:00:00',\r\n    mdfDatetime: '2023-09-01 15:00:00',\r\n    orderStatus: 'Y'\r\n  }\r\n\r\n\r\n  const orderlist = [order1, order2, order3]\r\n\r\n  const [selected, setSelected] = useState([]);\r\n\r\n  const onClick = (e) => {\r\n    setSelected(e.target.value);\r\n  };\r\n\r\n  useEffect(()=>{\r\n    console.log(selected);\r\n  }, [selected])\r\n\r\n  // let content = (selected === 'Delivered') ? \r\n  // <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'N')}/> : \r\n  // <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'Y')} />;\r\n\r\n  let content = (\r\n    (selected === 'Delivered') ? <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'Y')}/> : \r\n    (selected === 'Canceled') ? <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'N')} />:\r\n    null\r\n  )\r\n\r\n  return (\r\n      <>\r\n        <h2>마이오더</h2>\r\n        <div>\r\n          <button value={'Delivered'} onClick = {onClick}>Delivered</button>\r\n          <button value={'Canceled'} onClick = {onClick}>Canceled</button>\r\n        </div>\r\n        <div>\r\n          {/* <MyOrderContent /> */}\r\n          {content}\r\n        </div>\r\n      \r\n      \r\n      </>\r\n  );\r\n};\r\n\r\nexport default MyOrder;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreItemDailyPrice\\StoreItemDailyPrice.js",["420","421","422","423","424","425","426","427","428","429"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\r\nimport './StoreItemDailyPrice.css';\r\nimport { sendAxiosRequest, accessTokenRefresh, redirectLogin, isTokenExpired, getAccessToken, isNullUndefinedOrEmpty } from '../utility/common';\r\n\r\n// handsontable라이브러리 관련 import\r\nimport 'handsontable/dist/handsontable.full.min.css';\r\nimport Handsontable from 'handsontable/base';\r\nimport { registerAllModules } from 'handsontable/registry';\r\nimport { HotTable } from '@handsontable/react';\r\nimport { registerRenderer, textRenderer } from 'handsontable/renderers';\r\n\r\nregisterAllModules();\r\n\r\nconst sizeOptions = {\r\n  S: '소 (0KG~1KG 이하)',\r\n  M: '중 (1KG~3KG 이하)',\r\n  L: '대 (3KG 초과)',\r\n};\r\n\r\nconst categoryOptions = {\r\n  S: '생선(횟감)',\r\n  F: '생선(비횟감)',\r\n  C: '갑각류',\r\n  M: '패류',\r\n  E: '기타',\r\n};\r\n\r\nconst originOptions = {\r\n  D: '국내산',\r\n  I: '수입산',\r\n};\r\n\r\nconst originPlaceOptions = {\r\n  ES: '동해',\r\n  WS: '서해',\r\n  SS: '남해',\r\n  JJ: '제주',\r\n  WD: '완도',\r\n  JP: '일본',\r\n  CN: '중국',\r\n  RU: '러시아',\r\n  NW: '노르웨이',\r\n};\r\n\r\nconst wildFarmOptions = {\r\n  W: '자연산',\r\n  F: '양식',\r\n};\r\n\r\nconst recommendationItems = [\r\n  {\r\n    id: 1,\r\n    image: 'item1.jpg',\r\n    name: '추천 상품 1',\r\n  },\r\n  {\r\n    id: 2,\r\n    image: 'item2.jpg',\r\n    name: '추천 상품 2',\r\n  },\r\n];\r\n\r\n\r\nfunction firstRowRenderer(instance, td, row, col, prop, value, cellProperties) {\r\n  textRenderer.apply(this, arguments);\r\n  td.style.fontSize = '20px';\r\n  td.style.padding = '20px';\r\n  td.style.color = 'black';\r\n  td.style.border = 'solid 2px white';\r\n  td.style.background = '#f2f2f2';\r\n}\r\n\r\n\r\nfunction StoreItemDailyPrice() {\r\n  const [totalDailyPrice, setTotalDailyPrice] = useState(0);\r\n  const [averageDailyPrice, setAverageDailyPrice] = useState(0);\r\n  const [items, setItems] = useState([]);\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n\r\n\r\n  useEffect(() => {\r\n    if (!isTokenExpired(accessToken)) {   // AccessToken이 있을 때만 요청\r\n      sendAxiosRequest('/api/sidp/list', 'GET', null, response => {\r\n        if (response.data) {\r\n          let sidpList = response.data;\r\n          const columnData = sidpList.map((sidp) => sidp.dailyPrice);\r\n          const total = columnData.reduce((acc, current) => acc + current, 0);\r\n          const avg = total / (sidpList.length || 1); // 0으로 나누는 것을 방지\r\n\r\n          // 상태 업데이트\r\n          setTotalDailyPrice(total);\r\n          setAverageDailyPrice(avg);\r\n          setItems(sidpList);\r\n        }\r\n      }, error => {\r\n        if (error.response.data) {\r\n          const errorData = error.response.data;\r\n          console.log('errorData: ', errorData);\r\n          if (errorData === 'E') { // 토큰이 있으나 만료\r\n            accessTokenRefresh();\r\n          } else if (errorData === 'I') { // 토큰이 아예없거나 유효하지 않은 토큰\r\n            redirectLogin();\r\n          }\r\n        }\r\n      }, null, accessToken);\r\n    }\r\n  }, [accessToken]); // accessToken이 변경될 때만 실행\r\n\r\n  const transformedData = items.map((item) => {\r\n    return {\r\n      'daliyPriceDate': item.daliyPriceDate,\r\n      'itemCode': categoryOptions[item.itemCode],\r\n      'itemName': item.itemName,\r\n      'itemSize': sizeOptions[item.itemSize],\r\n      'wildFarmStatus': wildFarmOptions[item.wildFarmStatus],\r\n      'originStatus': originOptions[item.originStatus],\r\n      'originPlaceStatus': originPlaceOptions[item.originPlaceStatus],\r\n      'dailyPrice': item.dailyPrice,\r\n    };\r\n  });\r\n\r\n  // items 배열이 비어있을 때, 빈 행 추가\r\n  if (items.length === 0) {\r\n    transformedData.push({\r\n      'daliyPriceDate': '품목에 대한 시세 데이터가 존재하지 않습니다!',\r\n      'itemCode': '',\r\n      'itemName': '',\r\n      'itemSize': '',\r\n      'wildFarmStatus': '',\r\n      'originStatus': '',\r\n      'originPlaceStatus': '',\r\n      'dailyPrice': '',\r\n    });\r\n  }\r\n\r\n  console.log(items.length);\r\n  const mergeCells = items.length === 0 ? [\r\n    {\r\n      row: 0,\r\n      col: 0,\r\n      rowspan: 1,\r\n      colspan: 8,\r\n    }\r\n  ] : [];\r\n  console.log('transformedData: ', transformedData);\r\n\r\n  return (\r\n    <div className=\"daily-box\">\r\n      <h1>오늘의 시세</h1>\r\n      <br />\r\n      <div className=\"ba-price-list-div\">\r\n        <div>\r\n          <HotTable\r\n            mergeCells={mergeCells}\r\n            licenseKey=\"non-commercial-and-evaluation\"\r\n            colHeaders={['기준날짜', '품목구분', '품목명', '품목크기', '자연/양식', '국산/수입', '원산지', '품목가격(원)',]}\r\n            data={transformedData}\r\n            formattedAvg={'0,0,0'}\r\n            rowHeaders={true}\r\n            colWidths={[250, 200, 200, 300, 200, 250, 200, 250]}\r\n            columnHeaderHeight={50}\r\n            filters={true}\r\n            dropdownMenu={true}\r\n            customBorders={true}\r\n            settings={{\r\n              columnSorting: {\r\n                headerAction: true,\r\n                multiColumnSorting: true,\r\n                sortEmptyCells: false, // 빈 셀 정렬제외\r\n                indicator: true, // 정렬순서 표시\r\n                initialConfig: {\r\n                  column: 1,\r\n                  sortOrder: 'desc',\r\n                },\r\n              },\r\n              className: 'customFilterButtonExample1',\r\n              width: 'auto',\r\n              height: 'auto',\r\n              rowHeights: 60,\r\n              readOnly: true,\r\n              afterGetColHeader: function (col, th) {\r\n                var cellWidth = this.getColWidth(col); // 각 열 헤더의 배경색을 셀 넓이만큼 설정\r\n                th.style.backgroundColor = '#0056b3'; // 배경색을 변경하려면 원하는 색상으로 수정\r\n                th.style.color = 'white';\r\n                th.style.fontWeight = 'bold';\r\n                th.className = 'htMiddle';\r\n              },\r\n              afterGetRowHeader: function (row, th) {\r\n                th.style.backgroundColor = '#0056b3';\r\n                th.style.color = 'white';\r\n                th.style.fontWeight = 'bold';\r\n                th.style.fontSize = '20px';\r\n                th.className = 'htMiddle';\r\n              },\r\n              columns: [\r\n                {\r\n                  title: '기준날짜',\r\n                  type: 'date',\r\n                  className: 'htMiddle',\r\n                  dateFormat: 'YYYY-MM-DD',\r\n                  data: 'daliyPriceDate',\r\n                },\r\n                {\r\n                  title: '품목구분',\r\n                  type: 'text',\r\n                  className: 'htLeft htMiddle',\r\n                  data: 'itemCode',\r\n                },\r\n                {\r\n                  title: '품목명',\r\n                  type: 'text',\r\n                  className: 'htLeft htMiddle',\r\n                  data: 'itemName',\r\n                },\r\n                {\r\n                  title: '품목크기',\r\n                  type: 'text',\r\n                  className: 'htLeft htMiddle',\r\n                  data: 'itemSize',\r\n                },\r\n                {\r\n                  title: '자연/양식',\r\n                  type: 'text',\r\n                  className: 'htLeft htMiddle',\r\n                  data: 'wildFarmStatus',\r\n                },\r\n                {\r\n                  title: '국내산/수입산',\r\n                  type: 'text',\r\n                  className: 'htLeft htMiddle',\r\n                  data: 'originStatus',\r\n                },\r\n                {\r\n                  title: '원산지',\r\n                  type: 'text',\r\n                  data: 'originPlaceStatus',\r\n                  className: 'htLeft htMiddle',\r\n                },\r\n                {\r\n                  title: '품목가격(원)',\r\n                  type: 'numeric',\r\n                  data: 'dailyPrice',\r\n                  className: 'htRight htMiddle',\r\n                  numericFormat: {\r\n                    pattern: '0,0'\r\n                  }\r\n                },\r\n              ],\r\n              afterFilter() {\r\n                const handsontableInstance = this;\r\n                const filters = handsontableInstance.getPlugin('Filters');\r\n                console.log('filters: ', filters.filtersRowsMap.indexedValues);\r\n\r\n                let filteredList = filters.filtersRowsMap.indexedValues;\r\n\r\n\r\n                let total = 0;\r\n                let avg = 0;\r\n                let totalCnt = 0;\r\n                for (let i = 0; i < filteredList.length - 1; i++) {\r\n                  if (!filteredList[i]) {\r\n                    total += transformedData[i].dailyPrice;\r\n                    totalCnt++;\r\n                  }\r\n                }\r\n\r\n                avg = total / (totalCnt == 0 ? 1 : totalCnt);\r\n                console.log('total(합계): ', total);\r\n                console.log('avg(평균): ', avg);\r\n\r\n                setTotalDailyPrice(total);\r\n                setAverageDailyPrice(avg);\r\n              },\r\n            }}\r\n\r\n            cells={(row, col) => {\r\n              const cellProperties = {};\r\n              cellProperties.renderer = firstRowRenderer; // 사용자 정의 렌더러 함수를 셀에 적용\r\n              return cellProperties;\r\n            }}\r\n\r\n          />\r\n          <div className=\"ba-span-div\">\r\n            <span><strong>합계:</strong> {totalDailyPrice.toLocaleString()} (원)</span>\r\n            <span><strong>평균:</strong> {Math.floor(averageDailyPrice).toLocaleString()} (원)</span>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoreItemDailyPrice;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\utility\\common.js",["430"],[],"import axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\nimport { isValidDateValue } from \"@testing-library/user-event/dist/utils\";\r\n\r\nexport const mainUrl = 'http://localhost:3000';\r\n\r\nexport function isNotNullOrNonEmpty(value) {\r\n  if (value === null) {\r\n    return false;\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.length > 0;\r\n  }\r\n\r\n  if (typeof value === 'object') {\r\n    return Object.keys(value).length > 0;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/* 토큰 만료 체크 */\r\nexport function isTokenExpired(token) {\r\n  if (!isNullUndefinedOrEmpty(token)) {\r\n    return true;\r\n  }\r\n  const expirationTime = jwtDecode(token).exp * 1000;\r\n  const currentDate = Date.now();\r\n  return currentDate > expirationTime; // 토큰 만료 true 반환\r\n}\r\n\r\n\r\nexport function isNullUndefinedOrEmpty(value) {\r\n  const valueStr = value + '';\r\n  if (valueStr === 'null' || value === 'undefined' || /^\\s*$/.test(valueStr)) {\r\n    return null;\r\n  }\r\n  return value;\r\n}\r\n\r\n\r\nexport function redirectLogin() {\r\n  alert('세션이 만료되어 재로그인이 필요합니다!');\r\n  window.location.href = '/login';\r\n}\r\n\r\nexport function accessTokenRefresh() {\r\n  const refreshToken = localStorage.getItem('refreshToken');\r\n  console.log('accessTokenRefresh() => refreshToken:', refreshToken);\r\n\r\n  if (!isNullUndefinedOrEmpty(refreshToken)) {\r\n    redirectLogin();\r\n  }\r\n\r\n  // 서버로 리프레시 토큰을 사용하여 새 액세스 토큰을 요청\r\n  axios.post('/api/member/accTokRefresh', { refreshToken })\r\n    .then(response => {\r\n      console.log('/api/member/accTokRefresh => response: ', response);\r\n      const newAccessToken = response.data.accessToken;\r\n      if (!isNullUndefinedOrEmpty(newAccessToken)) {\r\n        redirectLogin();\r\n        return;\r\n      }\r\n      sessionStorage.setItem('accessToken', newAccessToken);\r\n      console.log('refreshToken으로 accessToken 재발급 완료! =>');\r\n    })\r\n    .catch(error => {\r\n      redirectLogin();\r\n    });\r\n}\r\n\r\n\r\nexport function logout() {\r\n  const isConfirmed = window.confirm('정말로 로그아웃 하시겠습니까?');\r\n\r\n  if (isConfirmed) {\r\n    sessionStorage.clear();\r\n    localStorage.clear();\r\n    alert('정상적으로 로그아웃 되었습니다!');\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\nexport function getAccessToken(encodingOrDecodingType) {\r\n  encodingOrDecodingType = encodingOrDecodingType.toLowerCase();\r\n\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n\r\n  if (isNullUndefinedOrEmpty(accessToken)) {\r\n    if (encodingOrDecodingType === 'a') {\r\n      return accessToken;\r\n    } else if (encodingOrDecodingType === 'd') {\r\n      return jwtDecode(accessToken);\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function getLoginUserInfo(decodedToken) {\r\n  if (decodedToken != null) {\r\n    const { sub, memberName, memberEmail } = decodedToken;\r\n    return { sub, memberName, memberEmail };\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function sendAxiosRequest(url, method, data, successCallback, errorCallback, contentType, jwtToken) {\r\n  console.log('sendAxiosRequest의 요청 URL: ', url);\r\n  console.log('sendAxiosRequest의 요청 데이터: ', data);\r\n\r\n  const axiosConfig = {\r\n    timeout: 5000,\r\n    url: url,\r\n    method: method,\r\n  };\r\n\r\n  if (data) {\r\n    if (contentType === 'application/json') {\r\n      axiosConfig.headers = {\r\n        'Content-Type': contentType,\r\n        'Authorization': jwtToken !== 'UA' ? `Bearer ${jwtToken}` : 'UA',\r\n      };\r\n      // JSON 객체일시 문자열로 변환\r\n      axiosConfig.data = JSON.stringify(data);\r\n    } else {\r\n      axiosConfig.data = data;\r\n      axiosConfig.headers = {\r\n        'Authorization': jwtToken !== 'UA' ? `Bearer ${jwtToken}` : 'UA',\r\n      };\r\n    }\r\n  } else {\r\n    // 데이터가 없는 경우\r\n    axiosConfig.headers = {\r\n      'Authorization': jwtToken !== 'UA' ? `Bearer ${jwtToken}` : 'UA',\r\n    };\r\n  }\r\n\r\n  console.log('sendAxiosRequest().axiosConfig: ', axiosConfig);\r\n\r\n  axios(axiosConfig)\r\n    .then(successCallback)\r\n    .catch(errorCallback);\r\n}\r\n\r\n\r\nexport function sendAxiosMultipartRequest(url, formData, successCallback, errorCallback) {\r\n  console.log('sendAxiosMultipartRequest의 요청 URL: ', url);\r\n  console.log('sendAxiosMultipartRequest의 요청 데이터: ', formData);\r\n  const axiosConfig = {\r\n    timeout: 5000,\r\n    url: url,\r\n    method: 'POST',\r\n    data: formData,\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    }\r\n  };\r\n  axios(axiosConfig).then(successCallback).catch(errorCallback);\r\n}\r\n\r\n\r\nexport function dateFormatParse(date) {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  const hours = String(date.getHours()).padStart(2, '0');\r\n  const minutes = String(date.getMinutes()).padStart(2, '0');\r\n  const seconds = String(date.getSeconds()).padStart(2, '0');\r\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\nexport function handleInputChange(e, index, state, stateSetter) {\r\n  let { name, value } = e.target;\r\n  let deepCopyState = [...state];\r\n  deepCopyState[index] = {\r\n    ...deepCopyState[index],\r\n    [name]: value,\r\n  };\r\n  stateSetter(deepCopyState);\r\n}\r\n\r\nexport function scrollMoveTop() {\r\n  window.scrollTo({ top: 0, behavior: 'smooth' });\r\n}\r\n\r\n// 현재 일 기준 가게 시작, 종료 시간\r\nexport function startEndTimeInfo(store) {\r\n  const currentDate = new Date();\r\n  const dayOfWeek = currentDate.getDay();\r\n\r\n  let startTime;\r\n  let endTime;\r\n  if (dayOfWeek === 0 || dayOfWeek === 6) { // 주말이면\r\n    startTime = store.weekendStartTime;\r\n    endTime = store.weekendEndTime;\r\n  } else { // 평일이면\r\n    startTime = store.weekdayStartTime;\r\n    endTime = store.weekdayEndTime;\r\n  }\r\n\r\n  return [startTime, endTime];\r\n}\r\n\r\n\r\n// 가게 시작시간, 종료시간 기준으로 영업중인지 확인\r\nexport function isOpenNow(startTime, endTime) {\r\n  const currentDate = new Date();\r\n  const currentTimeMinutes = currentDate.getHours() * 60 + currentDate.getMinutes();\r\n  const start = startTime.split(':').map(Number);\r\n  const end = endTime.split(':').map(Number);\r\n\r\n  const startTimeMinutes = start[0] * 60 + start[1];\r\n  const endTimeMinutes = end[0] * 60 + end[1];\r\n\r\n  // O: 마감 C: 영업중\r\n  return currentTimeMinutes >= startTimeMinutes && currentTimeMinutes <= endTimeMinutes ? 'O' : 'C';\r\n}\r\n\r\n\r\n// 리스트(요소여러 개)에 이벤트 추가\r\nexport function addEventToElements(eventName, eventFunction, elements) {\r\n  for (let element of elements) {\r\n    element.addEventListener(eventName, eventFunction);\r\n  }\r\n}\r\n\r\n// 리스트(요소여러 개)에 이벤트 제거\r\nexport function removeEventToElements(eventName, eventFunction, elements) {\r\n  for (let element of elements) {\r\n    element.removeEventListener(eventName, eventFunction);\r\n  }\r\n}","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Pay\\Pay.js",["431","432","433","434"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n// import swal from 'sweetalert';\r\n// import { response } from 'express';\r\n// import { error } from 'console';\r\n\r\nconst Payment = () => {\r\n  useEffect(() => {\r\n    const jquery = document.createElement(\"script\");\r\n    jquery.src = \"http://code.jquery.com/jquery-1.12.4.min.js\";\r\n    const iamport = document.createElement(\"script\");\r\n    iamport.src = \"https://cdn.iamport.kr/v1/iamport.js\";\r\n    document.head.appendChild(jquery);\r\n    document.head.appendChild(iamport);\r\n    return () => {\r\n      document.head.removeChild(jquery);\r\n      document.head.removeChild(iamport);\r\n    };\r\n  }, []);\r\n\r\n  function sendAxiosRequest(url, method, params, successCallback, errorCallback) {\r\n    console.log(url);\r\n    const axiosConfig = {\r\n      timeout: 5000,\r\n      url: url,\r\n      method: method,\r\n    };\r\n    if (params != null)\r\n      axiosConfig.params = params;\r\n    axios(axiosConfig).then(successCallback).catch(errorCallback);\r\n  }\r\n\r\n  const memberNo = 1;\r\n  const payNo = 1;\r\n  const orderNo = 1;\r\n  const [member, setMember] = useState(null);\r\n  const [pay, setPay] = useState(null);\r\n  const [order, setOrder] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch member data\r\n    sendAxiosRequest(`/api/member/${memberNo}`, 'GET', null,\r\n      response => {\r\n\r\n        console.log('Member data:', response.data);\r\n        setMember(response.data); // Update member state\r\n      },\r\n      error => {\r\n        console.error('Error fetching member data:', error);\r\n      }\r\n    );\r\n\r\n    // Fetch order data\r\n    sendAxiosRequest(`/api/order/detail/${orderNo}`, 'GET', null,\r\n      response => {\r\n        console.log('Order data:', response.data);\r\n        setOrder(response.data); // Update order state\r\n      },\r\n      error => {\r\n        console.error('Error fetching order data:', error);\r\n      }\r\n    );\r\n  }, []); // Empty dependency array to ensure this effect runs only once\r\n\r\n  const requestPay = () => {\r\n    console.log('memberState', member);\r\n    console.log('orderState', order);\r\n\r\n    const { IMP } = window;\r\n    const buyerEmail = member ? member.memberEmail : '';\r\n    const buyerName = member ? member.memberName : '';\r\n    const buyerTel = member ? member.memberPhone : '';\r\n    const name = order ? order.orderNo : '';\r\n    const buyerAddr = order ? order.resipientAddr : '';\r\n    const buyerPostcode = order ? order.resipientZipcode : '';\r\n    const amount = order.orderPrice;\r\n\r\n    IMP.init('imp11340204');\r\n\r\n    IMP.request_pay({\r\n      pg: 'kakaopay.TC0ONETIME',\r\n      pay_method: 'card',\r\n      merchant_uid: new Date().getTime(),\r\n      name: name,\r\n      amount: amount,\r\n      buyer_email: buyerEmail,\r\n      buyer_name: buyerName,\r\n      buyer_tel: buyerTel,\r\n      buyer_addr: buyerAddr,\r\n      buyer_postcode: buyerPostcode,\r\n    }, async (rsp) => {\r\n      console.log('rsp: ', rsp);\r\n      try {\r\n        const { data } = await axios.post('/api/pay/verifyIamport/' + rsp.imp_uid);\r\n        if (rsp.paid_amount === amount) {\r\n          alert('결제 성공!');\r\n          const testPay = {\r\n            // \"payType\": \"C\",\r\n            // \"orderStatus\": \"Y\",\r\n            // \"payNo\": 123,\r\n            orderNo: order.orderNo,\r\n            payPrice: amount,\r\n            payStatus: rsp.success ? 'Y' : 'N'\r\n            // \"payDatetime\": \"2023-10-18T12:34:56\",  // 예: ISO 8601 형식의 날짜 및 시간\r\n            // \"payCancelDatetime\": \"2023-10-18T14:45:00\"  // 예: ISO 8601 형식의 날짜 및 시간\r\n          }\r\n\r\n          console.log('testPay.payStatus: ', testPay.payStatus);\r\n\r\n          axios.post('/api/pay/createPayment', testPay, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          })\r\n            .then(response => {\r\n              console.log('Pay data:', response.data);\r\n              setPay(response.data);\r\n            })\r\n            .catch(error => {\r\n              console.error('Error fetching pay data:', error);\r\n            });\r\n\r\n        } else if (rsp.paid_amount == amount) {\r\n          alert('결제 성공?');\r\n        } else {\r\n          alert('결제 실패?');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error while verifying payment:', error);\r\n        alert('결제 실패');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={requestPay}>결제하기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payment;\r\n\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Test\\test2.jsx",["435","436","437"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './Test.css';\r\n\r\nconst Test = () => {\r\n  const [testStatus, setState] = useState({\r\n    loading: false,\r\n    response: '값을 가져오니라'\r\n  });\r\n\r\n  console.log(\"testStatus : \",testStatus)\r\n  return (\r\n    <>\r\n      <h1>Test API</h1>\r\n      <div className=\"response-container\">\r\n          <p>{testStatus.response}</p>\r\n        </div>\r\n    </>\r\n  );\r\n}\r\nexport default Test;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Review\\ReviewForm.js",["438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469"],[],"import '../utility/Common.css';\r\nimport React, {useState, useEffect} from 'react';\r\nimport {formToJSON} from 'axios';\r\nimport {useUser} from '../Auth/UserContext';\r\nimport {\r\n    scrollMoveTop,\r\n    sendAxiosMultipartRequest,\r\n    sendAxiosRequest,\r\n    dateFormatParse,\r\n    handleInputChange,\r\n    accessTokenRefresh, getAccessToken, isTokenExpired, isNotNullOrNonEmpty\r\n} from '../utility/common';\r\n\r\n\r\nfunction ReviewForm(props) {\r\n    const [accessToken, setAccessToken] = useState(getAccessToken('a'));\r\n    const [tokenMeber, setTokenMember] = useState(getAccessToken('d'));\r\n    const [store, setStore] = useState(props.store);\r\n\r\n    // 로그인 확인\r\n    console.log('accessToken: ', accessToken);\r\n    console.log('tokenMeber: ', tokenMeber);\r\n\r\n    if (!isTokenExpired(accessToken)) {\r\n        return (\r\n            <div id='maindDiv' className=\"review-main-div\">\r\n                <div id='mainContentDiv' className=\"ba-main-content-div\">\r\n                    <ReviewWriteForm accessToken={accessToken} loginUser={tokenMeber}\r\n                                     store={store}></ReviewWriteForm>\r\n                    <ReviewListDiv accessToken={accessToken} store={store} loginUser={tokenMeber}></ReviewListDiv>\r\n                </div>\r\n                <div id=\"topBtnDiv\" onClick={scrollMoveTop}>↑</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction ReviewWriteForm(props) {\r\n    let [loginUser, setLoginUser] = useState(props.loginUser);\r\n    let [store, setStore] = useState(props.store);\r\n    let [reviewFreshness, setReviewFreshness] = useState('M');\r\n\r\n    if (loginUser != null && loginUser != undefined) {\r\n\r\n        return (\r\n            <form id=\"reviewWriteForm\" encType='multipart/form-data' className='ba-form'>\r\n                <label htmlFor='storeNo'><input id='storeNo' name='storeNo' value={store.storeNo}\r\n                                                hidden readOnly></input></label>\r\n                <label htmlFor='memberNo'><input id='memberNo' name='memberNo' value={loginUser.sub}\r\n                                                 hidden readOnly></input></label>\r\n                <img className='ba-member-profile'\r\n                     src='http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg'></img>\r\n                <sapn className='ba-font-name'>{loginUser.memberName}</sapn>\r\n                <span className='ba-font-title'>신선도 :</span>\r\n                <label htmlFor='freshness-low' className='ba-freshness'><img src='/images/low.png'/><input\r\n                    type=\"radio\" id='freshness-low' name='reviewFreshness' value={'L'}\r\n                    checked={reviewFreshness === 'L'}\r\n                    onChange={() => setReviewFreshness('L')}></input></label>\r\n                <label htmlFor='freshness-medium' className='ba-freshness'><img\r\n                    src='/images/mid.png'/><input type=\"radio\" id='freshness-medium'\r\n                                                  name='reviewFreshness' value={'M'}\r\n                                                  checked={reviewFreshness === 'M'}\r\n                                                  onChange={() => setReviewFreshness('M')}></input></label>\r\n                <label htmlFor='freshness-high' className='ba-freshness'><img\r\n                    src='/images/high.png'/><input type=\"radio\" id='freshness-high'\r\n                                                   name='reviewFreshness' value={'H'}\r\n                                                   checked={reviewFreshness === 'H'}\r\n                                                   onChange={() => setReviewFreshness('H')}></input></label>\r\n                <div>\r\n                    <textarea name=\"reviewContent\" className='ba-textarea'/>\r\n                </div>\r\n                <div className='ba-text-left'>\r\n                    <button type='button' className='ba-btn ba-margin-right10' onClick={() => {\r\n                        let formData = new FormData(document.getElementById('reviewWriteForm'));\r\n                        let reviewContentLength = formData.get('reviewContent').trim().length;\r\n                        console.log(reviewContentLength);\r\n\r\n                        if (reviewContentLength < 1) {\r\n                            alert('작성하실 리뷰 내용을 입력해주세요!');\r\n                            return;\r\n                        }\r\n\r\n                        let inputFile = document.querySelector('input[type=\"file\"]');\r\n                        if (inputFile.files.length > 0) {\r\n                            let files = inputFile.files;\r\n                            for (let i = 0; i < files.length; i++) {\r\n                                formData.append(\"multipartFiles\", files[i]);\r\n                            }\r\n                        }\r\n\r\n                        console.log('여기다.');\r\n                        console.log('formToJSON', JSON.stringify(formData));\r\n                        sendAxiosMultipartRequest('/api/review/add', formData,\r\n                            response => {\r\n                                console.log('/api/review/add =======> ', response.data);\r\n                                console.log('props.accessToken', props.accessToken)\r\n                                if (isNotNullOrNonEmpty(response.data)) {\r\n                                    alert('리뷰를 성공적으로 작성하였습니다!');\r\n                                    // window.location.reload();\r\n                                }\r\n\r\n                            }, error => console.log(error), props.accessToken);\r\n\r\n                    }}>리뷰작성\r\n                    </button>\r\n                    <label htmlFor='fileInput' className='ba-file-label'>파일 첨부</label><span\r\n                    id='fileInfoSpan'></span>\r\n                    <input type='file' id='fileInput' multiple hidden className='ba-file-btn'\r\n                           onChange={(e) => {\r\n                               let files = e.target.files;\r\n                               console.log(files);\r\n                               let fileInfoStr;\r\n                               for (let i = 0; i < 2; i++) {\r\n                                   fileInfoStr = (i === 0) ? fileInfoStr + ' ' + files[i].name + ', ' : fileInfoStr + ' ' + files[i].name;\r\n                               }\r\n                               document.getElementById('fileInfoSpan').textContent = '파일명: ' + fileInfoStr + ' 등 ' + files.length + '개의 첨부파일';\r\n                           }}/>\r\n                </div>\r\n\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nfunction ReviewListDiv(props) {\r\n    const pageRowCnt = 4;\r\n    let [store, setStore] = useState(props.store);\r\n    let [accessToken, setAccessToekn] = useState(getAccessToken('a'));\r\n    let [loginUser, setLoginUser] = useState(props.loginUser);\r\n    let [startPageNo, setStartPageNo] = useState(0);\r\n    let [reviewList, setReviewList] = useState([]);\r\n    let [selectedReviewNo, setSelectedReviewNo] = useState(null);\r\n    let [newAddLength, setNewAddLength] = useState(pageRowCnt);\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            console.log(newAddLength);\r\n            if (newAddLength < pageRowCnt) {\r\n                return;\r\n            }\r\n            if (\r\n                window.innerHeight + document.documentElement.scrollTop >=\r\n                document.documentElement.scrollHeight - 100\r\n            ) {\r\n\r\n                console.log(\"스크롤 이벤트 핸들러 작동\");\r\n                sendAxiosRequest(`/api/review/list?storeNo=${store.storeNo}&startPage=${startPageNo}`, 'GET', null, response => {\r\n                    console.log('/api/review/list?storeNo=${store.storeNo}&startPage=${startPageNo} ==> :', response.data);\r\n                    if (isNotNullOrNonEmpty(response.data)) {\r\n                        let addReviewList = response.data;\r\n                        setNewAddLength(response.data.length);\r\n                        let newReviewList = [...reviewList, ...addReviewList];\r\n                        setStartPageNo(Math.floor(newReviewList.length / pageRowCnt));\r\n                        setReviewList(newReviewList);\r\n                    }\r\n\r\n                }, error => console.log(error), null, accessToken)\r\n            }\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n        }\r\n    }, [startPageNo, reviewList]);\r\n\r\n    useEffect(() => {\r\n        sendAxiosRequest(`/api/review/list?storeNo=${store.storeNo}`, \"GET\", null,\r\n            response => {\r\n                console.log('/api/review/list => ', response.data);\r\n                if (isNotNullOrNonEmpty(response.data)) {\r\n                    let reviewList = response.data;\r\n                    setReviewList(reviewList);\r\n                    setNewAddLength(reviewList.length);\r\n                    setStartPageNo(Math.floor(newAddLength / pageRowCnt));\r\n                }\r\n\r\n            }, error => console.log(error), null, accessToken)\r\n    }, []);\r\n\r\n    console.log('reviewList', reviewList);\r\n    console.log('loginUser', loginUser);\r\n    if (reviewList) {\r\n        return (\r\n            <div id=\"reviewListDiv\" className='review-list-div'>\r\n                {reviewList.length > 0 && reviewList.map((review, index) => (\r\n                    <div key={index} className='review-div'>\r\n                        <form id={'reviewUpdateForm' + index}>\r\n                            <input id={'reviewNo' + index} name='reviewNo' hidden\r\n                                   value={review.reviewNo}/>\r\n\r\n                            <div className='ba-title-container'>\r\n                                <img className='ba-member-profile'\r\n                                     src='http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg'/>\r\n                                <div className='ba-title-info'>\r\n                                    <b>{review.member.memberName}</b>\r\n                                    <span><b>작성일:</b><input type='text'\r\n                                                            value={dateFormatParse(new Date(review.mdfDatetime))}\r\n                                                            className='ba-input-text'\r\n                                                            disabled/></span>\r\n                                </div>\r\n                                <div className='ba-title-freshness'>\r\n                                    <span className='ba-font-title'>신선도 :</span>\r\n                                    <label htmlFor='freshness-low'>\r\n                                        <img src='/images/low.png'/>\r\n                                        <input type=\"radio\" name='reviewFreshness' value={'L'}\r\n                                               checked={review.reviewFreshness === 'L'}\r\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>\r\n                                    </label>\r\n                                    <label htmlFor='freshness-mid'>\r\n                                        <img src='/images/mid.png'/>\r\n                                        <input type=\"radio\" name='reviewFreshness' value={'M'}\r\n                                               checked={review.reviewFreshness === 'M'}\r\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>\r\n                                    </label>\r\n                                    <label htmlFor='freshness-high'>\r\n                                        <img src='/images/high.png'/>\r\n                                        <input type=\"radio\" name='reviewFreshness' value={'H'}\r\n                                               checked={review.reviewFreshness === 'H'}\r\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <hr/>\r\n                            <div>\r\n                                {review.reviewAttaches.length > 0 && (\r\n                                    <div className='ba-img-list-div'>\r\n                                        <img id={'defaultImg' + index} className='ba-img-first'\r\n                                             src={`http://kr.object.ncloudstorage.com/bleuauction-bucket/review/${review.reviewAttaches.length > 0 ? review.reviewAttaches[0].saveFilename : ''}`}/>\r\n\r\n                                        <div className='ba-div-col-sort'>\r\n                                            {\r\n                                                review.reviewAttaches.map((attach) => (\r\n                                                        <div>\r\n                                                            <img className='ba-img-sub-list-div'\r\n                                                                 src={`http://kr.object.ncloudstorage.com/bleuauction-bucket/review/${attach.saveFilename}`}\r\n                                                                 onMouseEnter={(e) => {\r\n                                                                     let targetImgSrc = e.target.src;\r\n                                                                     let defaultImgId = 'defaultImg' + index;\r\n                                                                     console.log(targetImgSrc);\r\n                                                                     let defaultImg = document.getElementById(defaultImgId);\r\n                                                                     console.log(defaultImg);\r\n                                                                     defaultImg.src = targetImgSrc;\r\n                                                                 }}/>\r\n                                                        </div>\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                {review.member.memberNo == loginUser.sub ?\r\n                                    (<textarea name='reviewContent' value={review.reviewContent}\r\n                                               className='ba-textarea'\r\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>)\r\n                                    : (<textarea name='reviewContent' value={review.reviewContent}\r\n                                                 className='ba-textarea-disabled' readOnly/>\r\n                                    )}\r\n                            </div>\r\n\r\n                            {review.member.memberNo == loginUser.sub ?\r\n                                (<div className='ba-btn-div'>\r\n                                    <div className='ba-file-list'>\r\n                                        {review.reviewAttaches.map((attach) => (\r\n                                            <div key={attach.fileNo} className=\"ba-file-item\">\r\n                                                <li>{attach.originFilename}</li>\r\n                                                <p className=\"ba-delete-text\" onClick={() => {\r\n                                                    sendAxiosRequest(`/api/review/deleteFile?fileNo=${attach.fileNo}`, 'GET', null,\r\n                                                        response => {\r\n                                                            console.log(response.data);\r\n                                                            window.location.reload();\r\n                                                            alert(response.data.originFilename + '(이)가 삭제되었습니다!');\r\n                                                        },\r\n                                                        error => {\r\n                                                            console.log(error);\r\n                                                        }\r\n                                                    );\r\n                                                }}>[삭제]</p>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n\r\n                                    <button type='button' className='ba-btn ba-margin-right20'\r\n                                            onClick={() => {\r\n                                                let jsonObj = formToJSON(new FormData(document.getElementById('reviewUpdateForm' + index)));\r\n                                                console.log(jsonObj);\r\n                                                sendAxiosRequest('/api/review/update', 'POST', jsonObj, response => {\r\n                                                    console.log(response.data);\r\n                                                    console.log('리뷰변경 성공!');\r\n                                                    window.location.reload();\r\n                                                    alert('리뷰를 성공적으로 변경하였습니다!');\r\n                                                }, error => console.log(error));\r\n                                            }}>리뷰수정\r\n                                    </button>\r\n                                    <button type='button' className='ba-btn ba-margin-right10'\r\n                                            onClick={\r\n                                                () => {\r\n                                                    sendAxiosRequest(`/api/review/delete?reviewNo=${review.reviewNo}`, 'GET', null, response => {\r\n                                                        console.log(response.data);\r\n                                                        window.location.reload();\r\n                                                        alert('리뷰가 성공적으로 삭제되었습니다!');\r\n                                                    }, error => {\r\n                                                        console.log(error);\r\n                                                    });\r\n                                                }}>리뷰삭제\r\n                                    </button>\r\n                                </div>) : (<div></div>)\r\n                            }\r\n\r\n                            <div className='ba-text-right'>\r\n                                <button type='button' className='ba-small-btn' onClick={() => {\r\n                                    selectedReviewNo === review.reviewNo ? setSelectedReviewNo(null) : setSelectedReviewNo(review.reviewNo);\r\n                                }}>답글\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n\r\n                        {\r\n                            selectedReviewNo == review.reviewNo && (\r\n                                <AnswerForm reviewNo={review.reviewNo} loginUser={loginUser}/>\r\n                            )\r\n                        }\r\n                    </div>\r\n                ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction AnswerForm(props) {\r\n    const [accessToken, setAccessToken] = useState(props.accessToken);\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            <div className='ba-text-right'>\r\n                <button type='button' className='ba-small-btn' onClick={() => {\r\n                    document.getElementById('answerWriteFormDiv').style.display = 'block';\r\n                }}>답글작성✍️\r\n                </button>\r\n            </div>\r\n            <div id=\"answerWriteFormDiv\">\r\n                <h4 className='ba-font-title'>답글작성</h4>\r\n                <form id=\"answerWriteForm\">\r\n                    <input name='reviewNo' hidden value={props.reviewNo}></input>\r\n                    <input name='memberNo' hidden value={1}></input>\r\n                    <button type='button' className='ba-close-btn' onClick={\r\n                        () => {\r\n                            document.getElementById('answerWriteFormDiv').style.display = 'none';\r\n\r\n                        }\r\n                    }>x\r\n                    </button>\r\n                    <div>\r\n                        <textarea name='answerContent' className='ba-small-textarea'></textarea>\r\n                    </div>\r\n                    <div className='ba-btn-div'>\r\n                        <button type='button' className='ba-btn ba-margin-right40' onClick={() => {\r\n                            let jsonObj = formToJSON(document.getElementById('answerWriteForm'));\r\n                            console.log(jsonObj);\r\n                            if (jsonObj.answerContent.trim().length < 1) {\r\n                                alert('작성하실 답급 내용을 입력해주세요!');\r\n                                return;\r\n                            }\r\n                            sendAxiosRequest('/api/answer/add', 'POST', jsonObj,\r\n                                response => {\r\n                                    window.location.reload();\r\n                                    alert('답글을 성공적으로 작성하였습니다!');\r\n                                    console.log(response.data);\r\n                                }, error => console.log(error), null, accessToken);\r\n                        }}>작성하기\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <AnswerListDiv reviewNo={props.reviewNo} loginUser={props.loginUser}></AnswerListDiv>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AnswerListDiv(props) {\r\n    const pageRowCnt = 2;\r\n    let [answerList, setAnswerList] = useState([]);\r\n    let [startPageNo, setStartPageNo] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        sendAxiosRequest(`/api/answer/list?reviewNo=${props.reviewNo}`, \"GET\", null,\r\n            response => {\r\n                let asnwerList = response.data.answerList;\r\n                let totalRows = response.data.totalRows;\r\n                console.log('최초 렌더시 totalRow');\r\n                console.log(totalRows);\r\n                console.log('최초 렌더시 asnwerList.length');\r\n                console.log(asnwerList.length);\r\n\r\n                if (totalRows > asnwerList.length) {\r\n                    console.log(document.querySelector('.ba-more-btn'));\r\n                    document.querySelector('.ba-more-btn').hidden = false;\r\n                }\r\n                setAnswerList(response.data.answerList);\r\n                setStartPageNo(response.data.answerList.length / 2);\r\n            }, error => console.log(error));\r\n\r\n        return () => {\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"answerListDiv\" className='answer-list-div'>\r\n            {answerList.map((answer, index) => (\r\n\r\n                < div className='answer-div' key={index}>\r\n                    <form id={'answerUpdateForm' + index}>\r\n                        <div className='ba-title-container'>\r\n                            <img className='ba-member-profile'\r\n                                 src='http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg'/>\r\n                            <div className='ba-title-info'>\r\n                                <b>{answer.member.memberName}</b>\r\n                                <span><b>작성일:</b><input type='text'\r\n                                                        value={dateFormatParse(new Date(answer.mdfDatetime))}\r\n                                                        className='ba-input-text' disabled/></span>\r\n                            </div>\r\n                        </div>\r\n                        {answer.member.memberNo == props.loginUser.sub ?\r\n                            (\r\n                                <div>\r\n                                    <input type='text' name='answerNo' hidden\r\n                                           value={answer.answerNo}/>\r\n                                    <input type='text' name='reviewNo' hidden\r\n                                           value={answer.reviewNo}/>\r\n                                    <input type='text' name='memberNo' hidden\r\n                                           value={answer.member.memberNo}/>\r\n\r\n                                    <textarea name='answerContent' value={answer.answerContent}\r\n                                              className='ba-textarea' onChange={(e) => {\r\n                                        handleInputChange(e, index, answerList, setAnswerList);\r\n                                    }}/>\r\n                                    <div className='ba-btn-div'>\r\n                                        <button type='button' className='ba-btn ba-margin-right20'\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        let jsonObj = formToJSON(new FormData(document.getElementById('answerUpdateForm' + index)));\r\n                                                        console.log(jsonObj);\r\n                                                        sendAxiosRequest(`/api/answer/update?`, 'POST', jsonObj, response => {\r\n                                                            window.location.reload();\r\n                                                            alert('답글이 성공적으로 변경되었습니다!');\r\n                                                        }, error => {\r\n                                                            console.log(error);\r\n                                                        });\r\n                                                    }\r\n                                                }>답글수정\r\n                                        </button>\r\n                                        <button type='button' className='ba-btn ba-margin-right80'\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        sendAxiosRequest(`/api/answer/delete?answerNo=${answer.answerNo}`, 'GET', null, response => {\r\n                                                            window.location.reload();\r\n                                                            alert('답글이 성공적으로 삭제되었습니다!');\r\n                                                        }, error => {\r\n                                                            console.log(error);\r\n                                                        });\r\n                                                    }\r\n                                                }>답글삭제\r\n                                        </button>\r\n                                    </div>\r\n                                </div>)\r\n                            : (<textarea name='answerContent' value={answer.answerContent}\r\n                                         className='ba-textarea-disabled'/>)}\r\n                    </form>\r\n                </div>\r\n            ))\r\n            }\r\n            <div className='ba-btn-div'>\r\n                <button type='button' className='ba-more-btn' hidden onClick={(e) => {\r\n                    sendAxiosRequest(`/api/answer/list?reviewNo=${props.reviewNo}&startPage=${startPageNo}`, \"GET\", null,\r\n                        response => {\r\n                            console.log(response.data);\r\n                            let totalRows = response.data.totalRows;\r\n                            let appendAnswerList = response.data.answerList;\r\n                            let newAnswerList = [...answerList, ...appendAnswerList];\r\n                            setAnswerList(newAnswerList);\r\n                            setStartPageNo(newAnswerList.length / 2);\r\n                            if (totalRows <= newAnswerList.length) {\r\n                                e.target.hidden = true;\r\n                            }\r\n\r\n                        }, error => {\r\n                            console.log(error);\r\n                        })\r\n                }}>더 보기\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ReviewForm;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreHome.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreListItem.js",["470","471","472","473","474","475","476","477","478"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport styles from './StoreListItem.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { isOpenNow, sendAxiosRequest, startEndTimeInfo } from '../utility/common';\r\nimport { useUser } from '../Auth/UserContext';\r\n\r\nfunction StoreListItem(props) {\r\n  let [store, setStore] = useState(props.data);\r\n  let [open, setOpen] = useState('O');\r\n\r\n  useEffect(() => {\r\n    let startEndTime = startEndTimeInfo(store);\r\n    let openStatus = isOpenNow(startEndTime[0], startEndTime[1]);\r\n    setOpen(openStatus);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.storeListItemBox}>\r\n      <img src='/images/boss.png' className={styles.storeListItemBoss} />\r\n      <div className={styles.storeListItemDetailTop}>\r\n        <div className={styles.storeListItemHeader}>\r\n          <strong className={styles.storeListItemDetailName}>{store.storeName}</strong>\r\n          <span className={styles.storeListItemDetailMarket}>{store.marketName}</span>\r\n        </div>\r\n        <p className={styles.storeListItemDetailIntroduce}>{store.storeAddr}</p>\r\n\r\n        <p className={styles.storeListItemBoxReview}>\r\n          <img className={styles.storeListItemFresh} src='/images/fresh.png' />5.0 (1024)\r\n        </p>\r\n        <p className={styles.storeListItemBoxState}>\r\n          <img className={styles.storeListItemStateIcon} src='/images/heart.png' />\r\n          {open == 'O' ? '영업중' : '영업종료'}\r\n        </p>\r\n        <div className={styles.storeListItemDetailBoxMore}>\r\n          <Link to=\"/market/detail\" state={store}>더보기&gt;</Link>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoreListItem;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuItem.js",["479","480","481"],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\InputField.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreInfo.js",["482"],[],"// import React from 'react';\r\n// import Coupon from '../Coupon/Coupon'; \r\n\r\n// function StoreIntro({storeInfo, store, coupons }) {\r\n//   console.log(store);\r\n//   // console.log(storeInfo);\r\n\r\n//   return (\r\n//     <div style={outerContainer}>\r\n//     <div style={introContainer}>\r\n//       <img src={storeInfo.image} alt={storeInfo.name} style={imageStyle} />\r\n//      <div style={storeInfoContainer}>\r\n//       <h2>{store.storeName}</h2>\r\n//       <ul style={infoList}>\r\n//         <li>{store.storeDetailAddr}</li>\r\n//         <li>{store.weekdayStartTime} ~ {store.weekdayEndTime}</li>\r\n//         <li>{store.store}</li>\r\n//       </ul>\r\n//       </div>\r\n//       {/* <div style={couponContainer}>\r\n//         {coupons.map(coupon => (\r\n//           <Coupon key={coupon.id} coupon={coupon} />\r\n//         ))}\r\n//       </div> */}\r\n//     </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// const outerContainer = {\r\n//   display: 'flex',\r\n//   justifyContent: 'center',\r\n//   alignItems: 'center',\r\n//   height: '50vh', // 화면 높이를 100%로 설정 (필요한 경우 조절)\r\n//   };\r\n\r\n// const introContainer = {\r\n//     display: 'flex',\r\n//     flexDirection: 'column', // children들을 열 방향으로 배열\r\n//     alignItems: 'center', // children들을 가운데 정렬\r\n//     backgroundColor: '#f0f0f0', // 연한 회색 배경\r\n//     padding: '0px',\r\n//     borderRadius: '8px', // 소프트한 테두리를 위한 둥근 모서리 추가\r\n//     textAlign: 'center',\r\n//     width : '70%',\r\n//     height: '100%'\r\n// };\r\n\r\n// const storeInfoContainer = {\r\n//     textAlign: 'left', \r\n//     padding: '20px',\r\n//     marginBottom: '50px', // 쿠폰 컨테이너와의 간격을 조절\r\n//     width : '100%',\r\n//   };\r\n\r\n// const imageStyle = {\r\n//   width: '100%',\r\n//   height: 'auto',\r\n//   objectFit: 'cover',\r\n// };\r\n\r\n// const infoList = {\r\n//   listStyleType: 'none',\r\n//   padding: '0',\r\n//   margin: '10px 0',\r\n// };\r\n\r\n\r\n// export default StoreIntro;\r\n\r\nimport React from 'react';\r\nimport Coupon from '../Coupon/Coupon'; \r\n\r\nfunction StoreIntro({storeInfo, store, coupons }) {\r\n\r\n  console.log('storeInfo,',storeInfo);\r\n\r\n  return (\r\n    <div style={outerContainer}>\r\n    <div style={introContainer}>\r\n      <img src={storeInfo.image} alt={storeInfo.name} style={imageStyle} />\r\n     <div style={storeInfoContainer}>\r\n      <h2>{storeInfo.name}</h2>\r\n      <ul style={infoList}>\r\n        <li>{storeInfo.storeDetailAddr}</li>\r\n        <li>{storeInfo.weekdayStartTime} ~ {storeInfo.weekdayEndTime}</li>\r\n        <li>{storeInfo.store}</li>\r\n      </ul>\r\n      </div>\r\n      {/* <div style={couponContainer}>\r\n        {coupons.map(coupon => (\r\n          <Coupon key={coupon.id} coupon={coupon} />\r\n        ))}\r\n      </div> */}\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst outerContainer = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '50vh', // 화면 높이를 100%로 설정 (필요한 경우 조절)\r\n  };\r\n\r\nconst introContainer = {\r\n    display: 'flex',\r\n    flexDirection: 'column', // children들을 열 방향으로 배열\r\n    alignItems: 'center', // children들을 가운데 정렬\r\n    backgroundColor: '#f0f0f0', // 연한 회색 배경\r\n    padding: '0px',\r\n    borderRadius: '8px', // 소프트한 테두리를 위한 둥근 모서리 추가\r\n    textAlign: 'center',\r\n    width : '70%',\r\n    height: '100%'\r\n};\r\n\r\nconst storeInfoContainer = {\r\n    textAlign: 'left', \r\n    padding: '20px',\r\n    marginBottom: '10px', // 쿠폰 컨테이너와의 간격을 조절\r\n    width : '100%',\r\n  };\r\n\r\nconst imageStyle = {\r\n  width: '100%',\r\n  height: 'auto',\r\n  objectFit: 'cover',\r\n};\r\n\r\nconst infoList = {\r\n  listStyleType: 'none',\r\n  padding: '0',\r\n  margin: '10px 0',\r\n};\r\n\r\n\r\nexport default StoreIntro;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Category.js",["483","484","485"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport styles from './Category.module.css';\r\n\r\n\r\nfunction Category() {\r\n\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);}\r\n\r\n  return (\r\n    <>\r\n      <select value={selectedOption} onChange={handleOptionChange}>\r\n        <option value=\"option1\">옵션 1</option>\r\n        <option value=\"option2\">옵션 2</option>\r\n        <option value=\"option3\">옵션 3</option>\r\n      </select>\r\n\r\n      <p>{selectedOption}</p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Category;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyOrderContent.js",["486","487","488","489"],[],"import React, { useEffect, useReducer, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport styles from './MyOrderContent.module.css';\r\nimport OrderMenuList from './OrderMenuList';\r\n\r\n\r\nfunction MyOrderContent() {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    axios.get('/api/order')\r\n    .then(response => setOrders(response.data))\r\n      .catch(error => console.log(error));\r\n    console.log(orders);\r\n  }, [])\r\n\r\n  // function onClick() {\r\n  //   console.log(orders);\r\n  // }\r\n\r\n  // const orders = orderlist;\r\n\r\n  return (\r\n    <>\r\n    {orders.map(order=>(\r\n    <tr key={order.orderNo}>\r\n    <div>\r\n  \r\n    {/* <button onClick={onClick} >버튼</button> */}\r\n    <div className={styles.order_box}>\r\n      <div className={styles.order_store_title}>\r\n      <td>주문 번호 : {order.orderNo}</td>\r\n      <br/>\r\n      <td>주문일: {new Date(order.regDatetime).toLocaleDateString()}</td>\r\n      </div>\r\n      \r\n      <div className={styles.order_item_box}>\r\n        <img src='/images/fresh.png'/>\r\n        <Link className=\"text-ellipsis\" to={`/mypage/ordermenu/detail/${order && order.orderNo}`} style={{ color: '#909090' }}>\r\n        주문 상세보기\r\n        </Link>\r\n        {/* {order.OrderMenus.map(orderMenu => (\r\n          <div key={orderMenu.orderMenuNo}>\r\n            <td>주문메뉴번호{orderMenu.orderMenuNo}</td>\r\n            <td>메뉴번호{orderMenu.menuNo}</td>\r\n            <td>주문수량{orderMenu.menuNo}</td>\r\n          </div>\r\n        ))}  */}       \r\n        \r\n      </div>\r\n      \r\n      <div className={styles.order_result_box}>\r\n      <td>총액: {order.orderPrice}</td>\r\n      <br/>\r\n      <td>주문타입: {order.orderType === 'Q' ? '퀵배송' : order.orderType === 'T' ? '포장' : '기타'}</td>\r\n      <br/>\r\n      <td>요청사항: {order.orderRequest}</td>\r\n      <br/>\r\n      <td>핸드폰 번호: {order.recipientPhone}</td>\r\n      <br/>\r\n      <td>수령자: {order.recipientName}</td>\r\n      <br/>\r\n      <td>우편번호: {order.recipientZipcode}</td>\r\n      <br/>\r\n      <td>주소: {order.recipientAddr}</td>\r\n      <br/>\r\n      <td>상세주소: {order.recipientDetailAddr}</td>\r\n\r\n\r\n      </div>\r\n      </div>\r\n   \r\n    </div>\r\n    </tr>\r\n  ))}\r\n       </>\r\n  );\r\n}\r\n\r\nexport default MyOrderContent;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Announce.js",["490","491","492"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport styles from './Announce.module.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\r\nimport { Carousel } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport ReactPlayer from 'react-player';\r\n\r\nfunction Announce() {\r\n  const carouselContainer = {\r\n    height: '400px',\r\n    width: '60%',\r\n    margin: '0 auto',\r\n    borderRadius: '30px',\r\n    overflow: 'hidden',\r\n    boxShadow: '0px 0px 5px 20px #1565c0', /* 옅은 파랑색 */\r\n  };\r\n\r\n  const location = useLocation();\r\n  const images = location.pathname !== '/store/list' ? [\r\n    \"/images/11ad1.png\",\r\n    \"/images/11ad2.png\",\r\n    \"/images/11ad3.png\",\r\n    \"/images/11ad4.png\",\r\n    \"/images/11ad5.png\",\r\n    \"https://www.youtube.com/watch?v=BTsODTH2SRk\" // Add the video URL here\r\n  ] : [\r\n    \"/images/login.png\"\r\n  ];\r\n\r\n  return (\r\n    <div style={carouselContainer}>\r\n      <Carousel>\r\n        {images.map((image, index) => (\r\n          <Carousel.Item key={index} id={styles.carousel}>\r\n            {index === images.length - 1 ? (\r\n              <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\r\n                <ReactPlayer url={image} playing style={{ margin: 'auto' }} />\r\n              </div>\r\n            ) : (\r\n              <img src={image} alt={`슬라이드 ${index + 1}`} />\r\n            )}\r\n          </Carousel.Item>\r\n        ))}\r\n      </Carousel>\r\n      <div>쿠폰div</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Announce;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Button.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreHomeItem.js",["493","494","495","496","497","498","499","500","501","502","503","504"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport styles from './StoreHomeItem.module.css';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n\r\nfunction StoreHomeItem({store}) {\r\n\r\n  function isCurrentTimeInRange(startTime, endTime) {\r\n    // 현재 날짜와 시간을 생성\r\n    const currentDate = new Date();\r\n    // 시작 시간과 종료 시간을 파싱 (예: \"08:00\" 형식)\r\n    \r\n    // 현재 시간이 시작 시간과 종료 시간 사이에 있는지 확인\r\n    return currentDate >= startTime && currentDate <= endTime;\r\n  }\r\n\r\n  const startTime = new Date();\r\n  const [startHours, startMinutes, startSecond] = store.weekdayStartTime.split(':');\r\n  startTime.setHours(parseInt(startHours, 10));\r\n  startTime.setMinutes(parseInt(startMinutes, 10));\r\n  // startTime.setSecond(parseInt(startSecond, 10));\r\n\r\n  const endTime = new Date();\r\n  const [endHours, endMinutes, endSecond] = store.weekdayEndTime.split(':');\r\n  endTime.setHours(parseInt(endHours, 10));\r\n  endTime.setMinutes(parseInt(endMinutes, 10));\r\n  // endTime.setSecond(parseInt(endSecond, 10));\r\n\r\n  \r\n  const isWorking = isCurrentTimeInRange(startTime, endTime) ? '영업중' : '영업 종료';\r\n\r\n  // console.log(store);\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <Link to={'/market/detail'}\r\n      state= {store}\r\n      className={styles.storeHomeItemDetailBoxMore}>\r\n      <Card style={{ width: '18rem' }}>\r\n        <img className={styles.storeHomeItemBoss} variant=\"top\" src=\"/images/boss.png\" />\r\n        <div className={styles.storeHomeItemHeader}>\r\n          <p className={styles.storeHomeItemTitle}>{store.storeName}</p>\r\n          <p className={styles.storeHomeItemBoxReview}>\r\n            <img className={styles.storeHomeItemFresh}src=\"/images/fresh.png\"/>5.0\r\n          </p>\r\n        </div>\r\n        <div>\r\n        <p className={styles.storeHomeItemBoxReview}>\r\n        <img className={styles.storeHomeItemStateIcon} src=\"/images/heart.png\"/>{isWorking}</p>\r\n        </div>\r\n        {/* <Button className={styles.storeHomeItemDetailBoxMore}>\r\n          <Link to=\"/\" variant=\"primary\">더보기</Link>\r\n        </Button> */}\r\n      </Card>\r\n    </Link>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StoreHomeItem;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Review\\ReviewList.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Coupon\\Coupon.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreItemDailyPrice\\StoreItemAdd.js",["505","506","507","508"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { sendAxiosRequest } from '../utility/common';\r\nimport './StoreItemAdd.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Hidden } from '@mui/material';\r\n\r\n\r\nfunction StroeItemAdd() {\r\n\r\n  const [fish, setFish] = useState('');\r\n  const [code, setCode] = useState('');\r\n  const [size, setSize] = useState('');\r\n  const [origin, setOrigin] = useState('');\r\n  const [place, setPlace] = useState('');\r\n  const [wild, setWild] = useState('');\r\n  const [price, setPrice] = useState('');\r\n\r\n  const handleCode = () => {\r\n    setCode(\r\n      (fish === '광어'||'우럭'||'도미'||'방어'||'참치') ? 'S' :\r\n      (fish === '연어') ? 'F' :\r\n      (fish === '오징어') ? 'E' :\r\n      (fish === '새우') ? 'C' :\r\n      (fish === '가리비'||'전복') ? 'M' : '')\r\n    }\r\n\r\n  const handleSize = (e) => {\r\n    setSize(e.target.value)\r\n  }\r\n\r\n  const handlePrice = (e) => {\r\n    setPrice(e.target.value)\r\n  }\r\n\r\n  const itemSize = \r\n  Number(size) >= 3 ? 'L' :\r\n  Number(size) >= 2 ? 'M' : 'S'\r\n  \r\n\r\n  const fishs = {\r\n    '광어': 1,\r\n    '우럭': 2,\r\n    '도미': 3,\r\n    '방어': 4,\r\n    '참치': 5,\r\n    '연어': 6,\r\n    '오징어': 7,\r\n    '새우': 8,\r\n    '가리비': 9,\r\n    '전복': 10\r\n  }\r\n\r\n  const codes = {\r\n    S: '생선/횟감',\r\n    F: '생선/비횟감',\r\n    C: '갑각류',\r\n    M: '패류',\r\n    E: '기타',\r\n  };\r\n\r\n  const DPlace = {\r\n    ES: '동해',\r\n    WS: '서해',\r\n    SS: '남해',\r\n    JJ: '제주',\r\n    WD: '완도'\r\n  }\r\n\r\n  const IPlace = {\r\n    JP: '일본',\r\n    CN: '중국',\r\n    RU: '러시아',\r\n    NW: '노르웨이'\r\n  }\r\n\r\n  const selectPlace = \r\n  (origin === \"D\") ? DPlace : \r\n  (origin === \"I\") ? IPlace : null;\r\n\r\n  const hiddenButtons = \r\n  (selectPlace !== null) ?\r\n    Object.keys(selectPlace).map((code) => (\r\n      <button\r\n        key={code}\r\n        className={place === code ? 'selected' : ''}\r\n        onClick={() => setPlace(code)}\r\n      >\r\n        {selectPlace[code]}\r\n      </button>\r\n    ))\r\n    : null;\r\n  \r\n  const navigate = useNavigate();\r\n  \r\n  const handleSubmit = () => {\r\n    console.log('dddd');\r\n    sendAxiosRequest ('/api/item/new', 'POST', item, response => {\r\n      console.log(response.data);\r\n      console.log(item);\r\n      navigate('/');\r\n    }, error => {\r\n      console.log(error);\r\n    });\r\n\r\n  };\r\n\r\n  const item = {\r\n    'itemName': fish,\r\n    'itemCode': code,\r\n    'itemSize': itemSize,\r\n    'originStatus': origin,\r\n    'originPlaceStatus': place,\r\n    'wildFarmStatus': wild\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n             <>\r\n               {/* 품목 선택 */}\r\n               <p>품목 선택</p>\r\n               <div className=\"freezer_box\">\r\n                 {Object.keys(fishs).map((name) => (\r\n                   <div\r\n                     key={name}\r\n                     className={`fish_item ${fish === name ? 'selected' : ''}`}\r\n                     onClick={() => {\r\n                       setFish(name);\r\n                       handleCode();\r\n                     }}\r\n                   >\r\n                     <img src={`/images/fish${fishs[name]}.jpg`} alt={name} className=\"fish_image\" />\r\n                     <p>{name}</p>\r\n                   </div>\r\n                 ))}\r\n               </div>\r\n\r\n               {/* 무게 입력 */}\r\n               <div className='fish_size'>\r\n                   <p>무게 입력 (kg)</p>\r\n                   <div>\r\n                       <input\r\n                           type='number'\r\n                           value={size}\r\n                           onChange={handleSize}\r\n                           placeholder='예) 2.5'\r\n                       />\r\n                   </div>\r\n               </div>\r\n\r\n               <div className='fish_price'>\r\n                   <p>금일 판매 가격 (원)</p>\r\n                   <div>\r\n                       <input\r\n                           type='number'\r\n                           value={price}\r\n                           onChange={handlePrice}\r\n                           placeholder='예) 10000'\r\n                       />\r\n                   </div>\r\n               </div>\r\n\r\n               <div className='fish_origin'>\r\n                   <p>원산지</p>\r\n                   <div className='origin_buttons'>\r\n                       <button\r\n                           className={origin === 'D' ? 'selected' : ''}\r\n                           onClick={() => setOrigin('D')}\r\n                       >\r\n                           국내산\r\n                       </button>\r\n                       <button\r\n                           className={origin === 'I' ? 'selected' : ''}\r\n                           onClick={() => setOrigin('I')}\r\n                       >\r\n                           수입산\r\n                       </button>\r\n                   </div>\r\n               </div>\r\n\r\n               {/* 판매 장소 선택 */}\r\n               <div className=\"fish_place\">\r\n                 <div className=\"filter_buttons\">{hiddenButtons}</div>\r\n               </div>\r\n\r\n               {/* 자연산/양식 선택 */}\r\n               <div className=\"fish_origin\">\r\n                 <p>자연산 / 양식</p>\r\n                 <div className=\"origin_buttons\">\r\n                   <button className={wild === 'W' ? 'selected' : ''} onClick={() => setWild('W')}>\r\n                     자연산\r\n                   </button>\r\n                   <button className={wild === 'F' ? 'selected' : ''} onClick={() => setWild('F')}>\r\n                     양식\r\n                   </button>\r\n                 </div>\r\n               </div>\r\n\r\n               {/* 제출하기 버튼 */}\r\n               <div className=\"submit_button\">\r\n                 <button onClick={handleSubmit}>제출하기</button>\r\n               </div>\r\n             </>\r\n           );\r\n         }\r\n\r\nexport default StroeItemAdd;","C:\\Users\\think\\git\\bleuauction_fe\\src\\routes\\StoreList.js",["509","510","511","512","513"],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Chat\\Chat.js",["514","515"],[],"import React, { useState, useRef, useEffect } from 'react';\r\nimport { MessageBox, ChatList } from 'react-chat-elements';\r\nimport 'react-chat-elements/dist/main.css';\r\nimport axios from 'axios';\r\n\r\nconst Chat = ({ closeModal }) => {\r\n    const [chatMessage, setChatMessage] = useState('');\r\n    const [response, setResponse] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const chatContainerRef = useRef(null);\r\n\r\n    const handleMessage = async () => {\r\n        try {\r\n            const response = await axios.post('/api/chat/message', chatMessage, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            setMessages((prevMessages) => [\r\n                ...prevMessages,\r\n                {\r\n                    position: 'right',\r\n                    type: 'text',\r\n                    text: chatMessage,\r\n                    date: new Date(),\r\n                },\r\n                {\r\n                    position: 'left',\r\n                    type: 'text',\r\n                    text: response.data,\r\n                    date: new Date(),\r\n                },\r\n            ]);\r\n\r\n            setResponse(response.data);\r\n            setChatMessage('');\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            handleMessage();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n    }, [messages]);\r\n\r\n    const handleOutsideClick = (e) => {\r\n        if (e.target.classList.contains('chat-modal-container')) {\r\n            closeModal();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"chat-modal-container\"\r\n            style={{\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n                zIndex: 9999,\r\n            }}\r\n            onClick={handleOutsideClick}\r\n        >\r\n            <div\r\n                style={{\r\n                    backgroundColor: '#2F80ED',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    padding: '20px',\r\n                    maxWidth: '600px',\r\n                    width: '70%',\r\n                    borderRadius: '20px',\r\n                    position: 'relative',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                }}\r\n            >\r\n                <ChatList\r\n                    className=\"chat-list\"\r\n                    dataSource={[\r\n                        {\r\n                            avatar: 'https://www.pngfind.com/pngs/m/676-6764066_fish-cartoon-images-fish-logo-png-transparent-png.png',\r\n                            alt: 'Fish',\r\n                            title: 'BA_ChatBot',\r\n                            subtitle: '무엇이든 물어보세요',\r\n                            date: new Date(),\r\n                            unread: 0,\r\n                        },\r\n                    ]}\r\n                    style={{ marginBottom: '20px' }}\r\n                />\r\n                <div\r\n                    ref={chatContainerRef}\r\n                    style={{ flex: '1', overflowY: 'auto', marginTop: '10px' }}\r\n                >\r\n                    {messages.map((message, index) => (\r\n                        <MessageBox\r\n                            key={index}\r\n                            position={message.position}\r\n                            type={message.type}\r\n                            text={message.text}\r\n                            date={message.date}\r\n                            avatar={\r\n                                message.position === 'left'\r\n                                    ? 'https://www.pngfind.com/pngs/m/676-6764066_fish-cartoon-images-fish-logo-png-transparent-png.png'\r\n                                    : null\r\n                            }\r\n                            text={message.text}\r\n                            title={message.position === 'left' ? 'BA_ChatBot' : 'You'}\r\n                            titleColor={message.position === 'left' ? '#FFFFFF' : '#4CAF50'}\r\n                            textFontSize={16}\r\n                            textFontColor=\"#333\"\r\n                            style={{\r\n                                backgroundColor: message.position === 'left' ? '#FFFFFF' : '#DCF8C6',\r\n                                borderRadius: message.position === 'left' ? '0px 10px 10px 10px' : '10px 0px 10px 10px',\r\n                                padding: '10px 15px',\r\n                                maxWidth: '70%',\r\n                                alignSelf: message.position === 'left' ? 'flex-start' : 'flex-end',\r\n                                marginBottom: 10,\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center', marginTop: '20px' }}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={chatMessage}\r\n                        onChange={(e) => setChatMessage(e.target.value)}\r\n                        onKeyPress={handleKeyPress}\r\n                        style={{ flex: '1', padding: '15px', borderRadius: '30px', border: 'none', fontSize: '16px' }}\r\n                        placeholder=\"메시지를 입력하세요...\"\r\n                    />\r\n                    <button\r\n                        onClick={handleMessage}\r\n                        style={{\r\n                            marginLeft: '10px',\r\n                            padding: '15px 25px',\r\n                            borderRadius: '30px',\r\n                            border: 'none',\r\n                            backgroundColor: '#4CAF50',\r\n                            color: '#fff',\r\n                            cursor: 'pointer',\r\n                            fontSize: '16px',\r\n                        }}\r\n                    >\r\n                        보내기\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeDetail.js",["516"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, useParams } from 'react-router-dom';\r\n\r\nfunction NoticeDetail() {\r\n  const [notice, setNotice] = useState({});\r\n  const { noticeNo } = useParams();\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/notice/detail/${noticeNo}`)\r\n      .then(response => setNotice(response.data))\r\n      .catch(error => console.log(error));\r\n  }, [noticeNo]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"top-controls\"></div>\r\n      <div style={{ padding: \"0 12px\" }}>\r\n        <table className=\"board_list text-center\">\r\n          <colgroup>\r\n            <col width=\"20%\" />\r\n            <col width=\"80%\" />\r\n          </colgroup>\r\n          <thead>\r\n          <tr>\r\n          <th>제목</th>\r\n          <td className=\"text-left\">{notice.noticeTitle}</td>\r\n          </tr>\r\n          <tr>\r\n          <th>내용</th>\r\n          <td>{notice.noticeContent}</td>\r\n          </tr>\r\n          </thead>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NoticeDetail;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeList.js",["517","518"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n//import Announce from '/components/MainPage/Announce';\r\nimport NoticeListItem from './NoticeListItem';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport styles from './NoticeList.css'\r\n\r\n\r\nfunction NoticeList() {\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/notice')\r\n      .then(response => setData(response.data))\r\n      .catch(error => console.log(error));\r\n      // console.log(data);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <div className={styles.storeListBox}>\r\n      <NoticeListItem data={data}/>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NoticeList;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeListItem.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\OrderModal.js",["519","520","521","522","523","524","525","526"],[],"import React, { useState, useEffect } from 'react';\r\nimport './OrderModal.css';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport OrderItem from './OrderItem';\r\nimport { sendAxiosRequest } from '../utility/common';\r\nimport Payment from '../Pay/Pay';\r\nimport { formToJSON } from 'axios';\r\n\r\nconst OrderModal = ({ store, menus, isOpen, onClose, setMenuData }) => {\r\n\r\n  \r\nconst {user, login, logout} = useUser();\r\n\r\nconst [order, setOrder] = useState({\r\n  orderType:'Q',\r\n  orderPrice:0,\r\n  orderRequest:'',\r\n  recipientPhone:'',\r\n  recipientName:'',\r\n  recipientZipcode:'',\r\n  recipientAddr:'',\r\n  recipientDetailAddr:'',\r\n  orderStatus:'',\r\n})\r\n\r\n  // OrderItem 변경 사항 적용\r\n    const updateMenuCount = (updateMenu)=> { \r\n      const updatedItems = menus?.map((menu) =>\r\n      menu.menuNo === updateMenu.menuNo ? updateMenu : menu\r\n    );\r\n      setMenuData(\r\n        updatedItems\r\n      )\r\n  };\r\n\r\n\r\n  const [orderMenus, setOrderMenus] = useState([])\r\n\r\n  let totalPrice = 0\r\n  let totalOrders = [];\r\n  \r\n \r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    setActiveSection('deliveryMethod');\r\n\r\n  }\r\n  \r\n\r\n  // 수령 방식 변경 사항을 저장\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setOrder(prevDetails => ({\r\n      ...prevDetails,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n\r\n  // order, orderMenu 생성 및 결제 진행\r\n  const handleOrder = (event) => {\r\n    event.preventDefault();\r\n    // console.log(orderMenus)\r\n\r\n\r\n   // orderMenu 생성\r\n    menus.filter((menu) => menu.count !== 0).map((menu) => {\r\n      \r\n      totalPrice += menu.count * menu.menuPrice\r\n\r\n      totalOrders.push({\r\n        menuNo: Number(menu.menuNo),\r\n        orderMenuCount: Number(menu.count),\r\n        // orderNo: 0,\r\n        // memberNo:0,\r\n      })\r\n    })\r\n    \r\n    setOrderMenus(totalOrders)\r\n\r\n\r\n\r\n    setOrder({\r\n      ...order, orderPrice: totalPrice\r\n    })\r\n\r\n    // console.log(orderMenus)\r\n    // console.log(typeof(orderMenus[0].menuNo))\r\n\r\n\r\n    // 주문 생성\r\n    sendAxiosRequest('/api/order/new', 'POST', order, response => {\r\n      if (response.data && response.data.length > 0) {\r\n        console.log(\"주문 생성에 성공했습니다:\", response.data);\r\n      }\r\n    }, error => {\r\n      console.error(\"주문 생성에 실패했습니다:\", error);\r\n    });\r\n\r\n    \r\n    //주문 메뉴 추가 생성\r\n    setTimeout(() => {\r\n      orderMenus.map((orderMenu) => {\r\n        console.log('orderMenu=> : ', orderMenu);\r\n\r\n        sendAxiosRequest('/api/ordermenu/new', 'POST', orderMenu, response => {\r\n          if (response.data && response.data.length > 0) {\r\n            console.log(\"주문메뉴 생성에 성공했습니다:\", response.data);\r\n            // console.log('orderMenu=> : ', orderMenu);\r\n            console.log(typeof(orderMenu.menuNo))\r\n          }\r\n        }, error => {\r\n          console.error(\"주문메뉴 생성에 실패했습니다:\", error);\r\n        });\r\n      })\r\n    }, 6000);\r\n\r\n    \r\n    \r\n  }\r\n\r\n\r\n  const [activeSection, setActiveSection] = useState('orderInfo'); // 현재 활성화된 섹션을 추적\r\n\r\n  const switchSection = (section) => {\r\n    setActiveSection(section);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n\r\n  return (\r\n    <div className=\"orderModalBackground\">\r\n      <div className=\"orderModalContainer\">\r\n        <div className=\"orderModalHeader\">\r\n          <button className=\"closeButton\" onClick={onClose}>X</button>\r\n        </div>\r\n\r\n        <div className=\"sectionButtons\">\r\n          <button onClick={() => switchSection('orderInfo')}>주문 정보</button>\r\n          <button onClick={() => switchSection('deliveryMethod')}>수령 방식</button>\r\n        </div>\r\n\r\n        {activeSection === 'orderInfo' && (\r\n          <form onSubmit={handleSubmit}>\r\n            <h2>주문 정보</h2>\r\n\r\n            <div>\r\n              {menus?.map((menu) => \r\n                <OrderItem key={menu.menuNo} menu={menu}  update = {updateMenuCount} />\r\n              )}\r\n            </div>\r\n\r\n            <button type=\"submit\">주문 정보 제출</button>\r\n          </form>\r\n        )}\r\n\r\n\r\n\r\n        {activeSection === 'deliveryMethod' && (\r\n          <div>\r\n            {/* 수령 방식 선택 부분 */}\r\n            <h2>수령 방식</h2>\r\n\r\n            <div>\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"orderType\"\r\n                  value='Q'\r\n                  checked={order.orderType === 'Q'}\r\n                  onChange={handleInputChange}\r\n                />\r\n                퀵배송\r\n              </label>\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"orderType\"\r\n                  value='T'\r\n                  checked={order.orderType === 'T'}\r\n                  onChange={handleInputChange}\r\n                />\r\n                포장\r\n              </label>\r\n            </div>\r\n\r\n            <h2>수령 정보</h2>\r\n            <input\r\n            type=\"text\"\r\n            name=\"recipientName\"\r\n            placeholder=\"이름\"\r\n            value={order.recipientName}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"recipientPhone\"\r\n            placeholder=\"전화번호\"\r\n            value={order.recipientPhone}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"recipientZipcode\"\r\n            placeholder=\"우편번호\"\r\n            value={order.recipientZipcode}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"recipientAddr\"\r\n            placeholder=\"기본주소\"\r\n            value={order.recipientAddr}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"recipientDetailAddr\"\r\n            placeholder=\"상세주소\"\r\n            value={order.recipientDetailAddr}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"orderRequest\"\r\n            placeholder=\"요청사항\"\r\n            value={order.orderRequest}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n            <button onClick={handleOrder}>결제하기</button>\r\n            {/* <Payment onClick={handleOrder}>결제하기</Payment> */}\r\n          </div>\r\n        )}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n          \r\n\r\nexport default OrderModal;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeList.js",["527","528"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n//import Announce from '/components/MainPage/Announce';\r\nimport AdminNoticeListItem from './AdminNoticeListItem';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport styles from '../Notice/NoticeList.css'\r\n\r\n\r\nfunction AdminNoticeList() {\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/notice')\r\n      .then(response => setData(response.data))\r\n      .catch(error => console.log(error));\r\n      // console.log(data);\r\n  }, []);\r\n  \r\n\r\n  return (\r\n    <>\r\n    <div className={styles.storeListBox}>\r\n      <AdminNoticeListItem data={data}/>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AdminNoticeList;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeDetail.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\NoticeRegisterationForm.js",["529"],[],"import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { sendAxiosRequest } from '../utility/common';\r\n\r\nfunction NoticeRegisterationForm() {\r\n  const [notice, setNotice] = useState({\r\n    noticeTitle: 'title',\r\n    noticeContent: 'content',\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNotice({ ...notice, [name]: value });\r\n  };\r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let formData = new FormData(e.target);\r\n    let formObj = formToJSON(formData);\r\n    sendAxiosRequest('/api/notice/new', 'POST', formObj, response => {\r\n      console.log('응답값:', response.data);\r\n      alert('공지사항이 등록 되었습니다.');\r\n      navigate('/admin/notice/list');\r\n    },\r\n      error => {\r\n        console.error('API 호출 중 에러 발생: ', error);\r\n        alert('공지사항 등록에 실패하셨습니다!');\r\n      }\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <form onSubmit={handleSubmit} style={styles.form}>\r\n      <h2>공지사항 등록</h2>\r\n        <div>\r\n          <label>제목 </label>\r\n          <input style={styles.input} type=\"text\" name=\"noticeTitle\" value={notice.noticeTitle} onChange={handleChange} />\r\n        </div>\r\n        <div>\r\n          <label>내용 </label>\r\n          <input style={styles.input} type=\"text\" name=\"noticeContent\" value={notice.noticeContent} onChange={handleChange} />\r\n        </div>\r\n        <button type=\"submit\" style={styles.submitButton}>등록</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '30vh',\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center', // 폼 내용을 중앙 정렬합니다.\r\n    padding: '20px',  // 내부 패딩을 추가합니다.\r\n    borderRadius: '12px',  // 모서리를 둥글게 합니다.\r\n    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)', // 약간의 그림자 효과를 추가합니다.\r\n    background: 'white', // 배경색을 흰색으로 설정합니다.\r\n    width: '800px',\r\n  },\r\n  input: {\r\n    padding: '10px',\r\n    margin: '5px 0',\r\n    borderRadius: '6px',\r\n    border: '1px solid #ccc',\r\n    outline: 'none',\r\n    width: '300px',\r\n  },\r\n  submitButton: {\r\n    padding: '10px 20px',\r\n    cursor: 'pointer',\r\n    backgroundColor: '#0575E6',\r\n    border: 'none',\r\n    borderRadius: '8px',\r\n    color: 'white',\r\n  },\r\n}\r\n\r\n\r\nexport default NoticeRegisterationForm;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeListItem.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\OrderItem.js",["530","531"],[],"import React, { useState, useEffect } from 'react';\r\nimport './OrderModal.css';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport axios from 'axios';\r\n\r\nfunction OrderItem({ key, menu, orderMenu, update }) {\r\n  // console.log(menu)\r\n  const [localItem, setLocalItem] = useState(menu);\r\n\r\n\r\n\r\n  useEffect(()=> {\r\n    const imgs = axios.get(`/api/menu/detail/${menu.menuNo}`);\r\n    setLocalItem({\r\n      ...localItem,\r\n      menuImg: imgs\r\n    })\r\n  }, [])\r\n\r\n  const handleNameChange = (e) => {\r\n    if (e.target.value >= 0) {\r\n      const newName = e.target.value;\r\n      setLocalItem({ ...localItem, count: newName });\r\n      update({ ...localItem, count: newName });\r\n      // update(localItem)\r\n      console.log('발동')\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n    <div className='order-item-box'>\r\n      \r\n      <div style={{overflow:'hidden'}}>\r\n        <img src={`https:kr.object.ncloudstorage.com/bleuauction-bucket/menu/${menu.menuAttaches[0].saveFilename}`}\r\n              alt={menu.menuAttaches[0].originFilename}/>\r\n      </div>\r\n\r\n      <div>\r\n        <p>{menu.menuName}</p>\r\n      </div>\r\n\r\n      <div>\r\n        <p>{menu.menuSize}</p>\r\n      </div>\r\n\r\n      <div>\r\n       <p>{menu.menuPrice}</p>\r\n      </div>\r\n\r\n      <div>\r\n        {/* <button onClick={()=>setCount(count + 1)}>+</button> */}\r\n        <input\r\n              type=\"number\"\r\n              name='count'\r\n              value={localItem.count}\r\n              onChange={handleNameChange}\r\n            />\r\n        {/* <button onClick={()=>setCount(count + 1)}>-</button> */}\r\n      </div>\r\n      \r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\n          \r\n\r\nexport default OrderItem;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\OrderMenuList.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreOrder.js",["532","533","534"],[],"import React, { useEffect, useReducer, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport styles from './MyOrderContent.module.css';\r\n\r\n\r\n\r\nfunction StoreOrder() {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    axios.get('/api/store/order')\r\n    .then(response => setOrders(response.data))\r\n      .catch(error => console.log(error));\r\n    console.log(orders);\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <>\r\n    <h1>주문확인</h1>\r\n    {orders.map(order=>(\r\n    <tr key={order.orderNo}>\r\n      \r\n    <div>\r\n    \r\n    {/* <button onClick={onClick} >버튼</button> */}\r\n    <div className={styles.order_box}>\r\n      <div className={styles.order_store_title}>\r\n      <td>주문 번호 : {order.orderNo}</td>\r\n      <br/>\r\n      <td>주문일: {new Date(order.regDatetime).toLocaleDateString()}</td>\r\n      </div>\r\n      \r\n      <div className={styles.order_item_box}>\r\n        <img src='/images/fresh.png'/>\r\n        <Link className=\"text-ellipsis\" to={`/order/detail/${order && order.orderNo}`} style={{ color: '#909090' }}>\r\n        주문 상세보기\r\n        </Link>\r\n\r\n      \r\n        </div>\r\n      \r\n      <div className={styles.order_result_box}>\r\n      <td>총액: {order.orderPrice}</td>\r\n      <br/>\r\n      <td>주문타입: {order.orderType === 'Q' ? '퀵배송' : order.orderType === 'T' ? '포장' : '기타'}</td>\r\n      <br/>\r\n      <td>요청사항: {order.orderRequest}</td>\r\n      <br/>\r\n      <td>핸드폰 번호: {order.recipientPhone}</td>\r\n      <br/>\r\n      <td>수령자: {order.recipientName}</td>\r\n      <br/>\r\n      <td>우편번호: {order.recipientZipcode}</td>\r\n      <br/>\r\n      <td>주소: {order.recipientAddr}</td>\r\n      <br/>\r\n      <td>상세주소: {order.recipientDetailAddr}</td>\r\n      \r\n      \r\n\r\n\r\n\r\n      </div>\r\n      </div>\r\n   \r\n    </div>\r\n    </tr>\r\n  ))}\r\n       </>\r\n  );\r\n}\r\n\r\nexport default StoreOrder;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreEdit.js",["535","536","537","538","539","540","541"],[],"import React, { useState, useEffect } from 'react';\r\nimport { sendAxiosRequest, sendAxiosMultipartRequest, getAccessToken } from '../utility/common';\r\nimport axios from 'axios';\r\nimport { formToJSON } from 'axios';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n// \r\nfunction StoreEditPage() {\r\n  const defaultImage = '/images/rose.png';\r\n  const [store, setStore] = useState(null);\r\n  const [currentImage, setCurrentImage] = useState(defaultImage);\r\n  const [loginUser, setLoginUser] = useState(null);\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n  const tokenMember = jwtDecode(accessToken);\r\n console.log(\"토큰멤버\",tokenMember);\r\n \r\n\r\n  // 메뉴 확인 테스트용\r\n  useEffect(() => {\r\n    sendAxiosRequest('/api/menu/store', 'GET', tokenMember, (response) => {\r\n      console.log(\"응답 성공\",response.data)\r\n    }, (error) => {\r\n      console.log(\"응답 실패\",error);\r\n    }, null, accessToken);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   sendAxiosRequest('/api/store/loginCheck', 'GET', null, (response) => {\r\n  //     setLoginUser(response.data.loginUser);\r\n  //   }, (error) => {\r\n  //     console.log(error);\r\n  //   });\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (loginUser) {\r\n  //     sendAxiosRequest(`/api/store/detailByMember?member=${loginUser?.memberNo}`, 'GET', null, (res) => {\r\n  //       setStore(res.data);\r\n  //     }, (err) => {\r\n  //       console.error('Failed to fetch store details', err);\r\n  //     });\r\n  //   }\r\n  // }, [loginUser]);\r\n\r\n  function updateStore(e) {\r\n    e.preventDefault();\r\n    let storeForm = new FormData(document.getElementById('storeForm'));\r\n\r\n    // 이미지 파일 추가 (있는 경우)\r\n    const fileInput = document.getElementById('imageInput');\r\n    if (fileInput.files[0]) {\r\n      storeForm.append('profileImage', fileInput.files[0]);\r\n    }\r\n\r\n    console.log('formData: ', storeForm);\r\n    // Axios를 이용하여 멀티파트 폼 데이터를 서버로 전송합니다.\r\n    sendAxiosMultipartRequest('/api/store/update', formToJSON(storeForm), (response) => {\r\n      console.log(\"수정한 정보\", formToJSON(storeForm))\r\n      console.log(response.data);\r\n      // 성공적으로 업데이트된 경우에 수행할 작업을 추가하세요\r\n    }, (error) => {\r\n      console.error('가게 업데이트 중에 오류가 발생했습니다', error);\r\n      // 오류 발생 시 처리를 추가하세요\r\n    }, null, accessToken);\r\n  }\r\n\r\n  const handleImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = (e) => {\r\n        setCurrentImage(e.target.result);\r\n      };\r\n\r\n      reader.readAsDataURL(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleImageClick = () => {\r\n    document.getElementById('imageInput').click();\r\n  };\r\n\r\n  const styles = {\r\n    container: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      alignItems: 'flex-start',\r\n      padding: '20px',\r\n      justifyContent: 'center'\r\n    },\r\n    profilePicture: {\r\n      width: '200px',\r\n      height: '200px',\r\n      borderRadius: '100px',\r\n      marginBottom: '20px',\r\n      alignSelf: 'flex-start',\r\n    },\r\n    formSection: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'flex-start',\r\n      marginLeft: '20px',\r\n    },\r\n    title: {\r\n      fontSize: '24px',\r\n      fontWeight: 'bold',\r\n      marginBottom: '20px',\r\n      textAlign: 'center',\r\n    },\r\n    buttonStyle: {\r\n      border: 'none',\r\n      margin: '10px 0',\r\n      padding: '10px',\r\n      borderRadius: '4px',\r\n      backgroundColor: '#C4C4C433',\r\n      textAlign: 'center',\r\n      width: '500px',\r\n      cursor: 'pointer',\r\n    },\r\n  };\r\n\r\n  // if (store === null) {\r\n  //   return <div>Loading...</div>;\r\n  // } else {\r\n    const { marketName, storeName, licenseNo, storeZipcode, storeAddr, storeDetailAddr, weekdayStartTime, weekdayEndTime, weekendStartTime, weekendEndTime } = store || {};\r\n\r\n    return (\r\n      <div style={styles.container}>\r\n        <form id='storeForm' onSubmit={updateStore}>\r\n          <img src={currentImage} alt={storeName} style={styles.profilePicture} onClick={handleImageClick} />\r\n          <button type=\"button\" style={styles.buttonStyle} onClick={() => { document.getElementById('imageInput').click() }}>사진 등록</button>\r\n          <input\r\n            type=\"file\"\r\n            style={{ display: 'none' }}\r\n            id=\"imageInput\"\r\n            onChange={handleImageChange}\r\n          />\r\n          <div style={styles.formSection}>\r\n            <h1 style={styles.title}>가게 정보 수정</h1>\r\n            <div>\r\n              <label>시장명: </label>\r\n              <input style={styles.input} type=\"text\" name=\"marketName\" defaultValue={marketName} />\r\n            </div>\r\n            <div>\r\n              <label>가게명: </label>\r\n              <input style={styles.input} type=\"text\" name=\"storeName\" defaultValue={storeName} />\r\n            </div>\r\n            <div>\r\n              <label>사업자등록번호: </label>\r\n              <input style={styles.input} type=\"text\" name=\"licenseNo\" defaultValue={licenseNo} />\r\n            </div>\r\n            <div>\r\n              <label>우편번호: </label>\r\n              <input style={styles.input} type=\"text\" name=\"storeZipcode\" defaultValue={storeZipcode} />\r\n            </div>\r\n            <div>\r\n              <label>기본주소: </label>\r\n              <input style={styles.input} type=\"text\" name=\"storeAddr\" defaultValue={storeAddr} />\r\n            </div>\r\n            <div>\r\n              <label>상세주소: </label>\r\n              <input style={styles.input} type=\"text\" name=\"storeDetailAddr\" defaultValue={storeDetailAddr} />\r\n            </div>\r\n            <div>\r\n              <label>평일운영시작시간: </label>\r\n              <input style={styles.input} type=\"time\" name=\"weekdayStartTime\" defaultValue={weekdayStartTime} />\r\n            </div>\r\n            <div>\r\n              <label>평일운영종료시간: </label>\r\n              <input style={styles.input} type=\"time\" name=\"weekdayEndTime\" defaultValue={weekdayEndTime} />\r\n            </div>\r\n            <div>\r\n              <label>주말운영시작시간: </label>\r\n              <input style={styles.input} type=\"time\" name=\"weekendStartTime\" defaultValue={weekendStartTime} />\r\n            </div>\r\n            <div>\r\n              <label>주말운영종료시간: </label>\r\n              <input style={styles.input} type=\"time\" name=\"weekendEndTime\" defaultValue={weekendEndTime} />\r\n            </div>\r\n            <button type=\"submit\" style={styles.submitButton} onClick={updateStore}>수정</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n// }\r\n\r\nexport default StoreEditPage;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\OS\\OS.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreInfoDetail.js",["542"],[],"\r\nimport React from 'react';\r\n\r\nfunction StoreInfoDetail({storeDetail}) {\r\n\r\n  console.log('storeDetail,',storeDetail);\r\n  // console.log(storeInfo);\r\n\r\n    // storeDetail아 null이거나 필요한 속성이 없으면 렌더링하지 않습니다.\r\n    if (!storeDetail) {\r\n        return <div>Loading...</div>; // 혹은 다른 대체 컨텐츠\r\n      }\r\n  return (\r\n    <div style={outerContainer}>\r\n    <div style={introContainer}>\r\n      {/* <img src={storeDetail.image} alt={storeDetail.name} style={imageStyle} /> */}\r\n     <div style={storeInfoContainer}>\r\n      <h2>{storeDetail.storeName}</h2>\r\n      <ul style={infoList}>\r\n        <li style={listItem}>시장 이름:{storeDetail.marketName}</li>\r\n        <li style={listItem}>기본 주소:{storeDetail.storeAddr}</li>\r\n        <li style={listItem}>상세 주소:{storeDetail.storeDetailAddr}</li>\r\n        <li style={listItem}>사업등록번호:{storeDetail.licenseNo}</li>\r\n        <li style={listItem}>운영시간:{storeDetail.weekdayStartTime} ~ {storeDetail.weekdayEndTime}</li>\r\n        <li style={listItem}>{storeDetail.store}</li>\r\n      </ul>\r\n      </div>\r\n      {/* <div style={couponContainer}>\r\n        {coupons.map(coupon => (\r\n          <Coupon key={coupon.id} coupon={coupon} />\r\n        ))}\r\n      </div> */}\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst outerContainer = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    // backgroundColor: '#f7f7f7', // 아주 연한 회색 배경으로 조정\r\n  };\r\n\r\nconst introContainer = {\r\n    display: 'flex',\r\n    flexDirection: 'column', // children들을 열 방향으로 배열\r\n    alignItems: 'center', // children들을 가운데 정렬\r\n    // backgroundColor: '#f0f0f0',// 연한 회색 배경\r\n    padding: '0px',\r\n    borderRadius: '8px', // 소프트한 테두리를 위한 둥근 모서리 추가\r\n    textAlign: 'center',\r\n    width : '70%',\r\n    height: '100%'\r\n};\r\n\r\nconst storeInfoContainer = {\r\n    textAlign: 'left', \r\n    padding: '20px',\r\n    marginBottom: '10px', // 쿠폰 컨테이너와의 간격을 조절\r\n    width : '100%',\r\n  };\r\n\r\nconst imageStyle = {\r\n//   width: '100%',\r\n//   height: 'auto',\r\n//   objectFit: 'cover',\r\n};\r\n\r\nconst infoList = {\r\n  listStyleType: 'none',\r\n  padding: '0',\r\n  margin: '10px 0',\r\n  fontSize: '25px', // larger font size\r\n\r\n};\r\n\r\nconst listItem = {\r\n    marginBottom: '10px',\r\n}\r\n\r\n\r\nexport default StoreInfoDetail;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MenuDetail.js",["543"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n// import { sendAxiosMultipartRequest, sendAxiosRequest } from '../utility/common';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n\r\nfunction MenuDetail() {\r\n\r\n\r\n  const { menuNo } = useParams();\r\n  const [editedName, setEditedName] = useState('');\r\n  const [editedSize, setEditedSize] = useState('');\r\n  const [editedPrice, setEditedPrice] = useState('');\r\n  const [editedContent, setEditedContent] = useState('');\r\n  const [menu, setMenu] = useState(null);\r\n  \r\n  // 만약 menuNo가 undefined라면, 잘못된 요청을 보내고 있을 수 있습니다.\r\nconsole.log('보내기 전 menuNo 확인:', menuNo);\r\n\r\n\r\n  useEffect(() => {\r\n      axios.get(`/api/menu/detail/${menuNo}`)\r\n      .then(response => {\r\n\r\n        console.log('응답 데이터:', response.data); \r\n          setMenu(response.data);\r\n          setEditedName(response.data.menuName);\r\n          setEditedSize(response.data.menuSize);\r\n          setEditedPrice(response.data.menuPrice);\r\n          setEditedContent(response.data.menuContent);\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, [menuNo]);\r\n    \r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleUpdateMenu = () => {\r\n    const formData = new FormData();\r\n    formData.append('menuName', editedName);\r\n    formData.append('menuSize', editedSize);\r\n    formData.append('menuPrice', editedPrice);\r\n    formData.append('menuContent', editedContent);\r\n    formData.append('menuNo',menuNo);\r\n\r\n    axios.post(`/api/menu/update/${menuNo}`, formData)\r\n      .then(response => {\r\n        console.log(\"Menu updated successfully: \", response.data);\r\n        alert('메뉴가 수정 되었습니다.');\r\n        navigate('/menuEdit');\r\n      })\r\n      .catch(error => console.error(\"Failed to update notice: \", error));\r\n  };\r\n\r\n  if (menu === null) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"top-controls\"></div>\r\n        <div style={{ padding: \"0 12px\" }}>\r\n          <table className=\"board_list text-center\">\r\n            <colgroup>\r\n              <col width=\"20%\" />\r\n              <col width=\"80%\" />\r\n            </colgroup>\r\n            <thead>\r\n              <tr>\r\n                <th>메뉴</th>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedName}\r\n                    onChange={(e) => setEditedName(e.target.value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>사이즈</th>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedSize}\r\n                    onChange={(e) => setEditedSize(e.target.value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>가격</th>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedPrice}\r\n                    onChange={(e) => setEditedPrice(e.target.value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>내용</th>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedContent}\r\n                    onChange={(e) => setEditedContent(e.target.value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <button onClick={handleUpdateMenu}>수정하기</button>\r\n            </thead>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuDetail;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MenuEdit.js",["544","545","546","547","548","549","550","551","552","553"],[],"import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { sendAxiosRequest } from '../utility/common';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom'; // 만약 react-router-dom을 사용한다면 이 부분을 추가합니다.\r\nimport  './MenuEdit.css'\r\nimport jwt_decode from 'jwt-decode'; // jwt-decode 라이브러리를 import 합니다.\r\n\r\n\r\n\r\nfunction MenuEdit() {\r\n  let [menuData, setMenuData] = useState([]); // 메뉴 데이터를 저장할 상태\r\n  const { menuNo } = useParams(); // 현재 URL의 매개변수를 가져옵니다.\r\n  const navigate = useNavigate();\r\n  const location = useLocation(); // 추가된 부분\r\n  const store = location.state; // 추가된 부분\r\n  console.log(store);\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   // 상점 번호가 설정되어 있는 경우에만 메뉴 데이터를 요청합니다.\r\n  //   const fetchMenus = async () => {\r\n  //     try {\r\n  //       const response = await axios.get('/api/menu/store'); // 세션을 기반으로 한 요청\r\n  //       if (response.data) {\r\n  //         console.log(response.data);\r\n  //         setMenuData(response.data);\r\n  //       }\r\n  //     } catch (error) {\r\n  //       console.error(\"Error fetching user's menus:\", error);\r\n  //     }\r\n  //   };\r\n  \r\n  //   fetchMenus();\r\n  // }, []); \r\n  \r\n    // 토큰 디코딩\r\n\r\n        const tokenMember = jwt_decode(accessToken);\r\n        console.log(\"디코드된 토큰 정보 출력\",tokenMember); // 디코드된 토큰 정보 출력\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    sendAxiosRequest(`/api/menu/store`, 'GET', tokenMember, response => {\r\n      console.log('응답 data:', response.data);\r\n      setMenuData(response.data);\r\n    }, error => {\r\n      console.error(\"메뉴 가져오기 실패:\", error);\r\n    }, null, accessToken);\r\n  }, []); // 의존성 배열이 비어 있으므로 컴포넌트가 마운트될 때 한 번만 실행됩니다.\r\n\r\n\r\n  // const handleDeleteMenu = (menuNo) => {\r\n  //   axios.post(`/api/menu/delete/${menuNo}`,)\r\n  //     .then(() => {\r\n  //       alert('메뉴가 삭제 되었습니다.');\r\n  //       console.log(\"menuData:\",menuData);\r\n  //       setMenuData(menuData.filter(menu => menu.menuNo !== menuNo)); // 삭제 후 상태 업데이트\r\n  //     })\r\n  //     .catch(error => {\r\n  //       console.error(\"Error deleting menu: \", error);\r\n  //     });\r\n  // };\r\n\r\n  const handleDeleteMenu = (menuNo) => {\r\n    sendAxiosRequest(`/api/menu/delete/${menuNo}`, 'GET', null, response => {\r\n      console.log('Data fetched successfully:', response.data);\r\n      setMenuData(menuData.filter(menu => menu.menuNo !== menuNo));\r\n    }, error => {\r\n      console.error(\"Error deleting user's menus:\", error);\r\n    }, null, accessToken);\r\n\r\n  };\r\n\r\n\r\nconst renderMenus = menuData.map(menu => (\r\n  <div key={menu.menuNo} className=\"menu-item\">\r\n    <h2 className=\"menu-title\">{menu.menuName}</h2>\r\n\r\n    <p className=\"menu-detail\">사이즈: {menu.menuSize}</p>\r\n    <p className=\"menu-detail\">가격: {menu.menuPrice}</p>\r\n    <p className=\"menu-detail\">내용: {menu.menuContent}</p>\r\n    <div  className=\"menu-actions\">\r\n      <button  className=\"delete-button\" onClick={() => handleDeleteMenu(menu.menuNo)}>삭제</button>\r\n      <Link \r\n        to={{\r\n          pathname: \"/MenuDetail\", // 수정할 메뉴의 상세 정보 페이지 경로\r\n          state: { detailMenu: menu } // 현재 메뉴의 데이터\r\n        }}\r\n      >      \r\n      <button className=\"edit-button\">수정하기</button>\r\n    </Link>\r\n      {/* 추가적인 액션 버튼들이 위치할 수 있습니다. */}\r\n    </div>\r\n  </div>\r\n));\r\n\r\nreturn (\r\n  <div style={containerStyle}>\r\n    <Link to=\"/MenuRegisterationForm\" style={registerButtonLink}>\r\n      <button>메뉴 등록하기</button>\r\n    </Link>\r\n    <div style={menuList}>{renderMenus}</div>\r\n  </div>\r\n);\r\n}\r\n\r\n// 스타일 섹션\r\nconst containerStyle = {\r\npadding: '20px',\r\nmaxWidth: '800px', // 조금 더 좁은 컨테이너\r\nmargin: '0 auto',\r\n};\r\n\r\nconst menuList = {\r\nmarginTop: '20px',\r\n};\r\n\r\nconst menuItemStyle = {\r\nborderBottom: '1px solid #ddd', // 각 메뉴 아이템 아래에 구분선 추가\r\npadding: '10px 0',\r\n};\r\n\r\nconst menuItemTitle = {\r\nmargin: '0 0 10px 0',\r\nfontSize: '1.5em',\r\n};\r\n\r\nconst menuActions = {\r\nmarginTop: '10px',\r\n};\r\n\r\nconst deleteButton = {\r\nbackground: '#4169e1', \r\ncolor: '#fff',\r\nborder: 'none',\r\npadding: '5px 10px',\r\nborderRadius: '5px',\r\ncursor: 'pointer',\r\n};\r\n\r\nconst registerButtonLink = {\r\ndisplay: 'block',\r\ntextAlign: 'right',\r\nmarginBottom: '20px',\r\n};\r\n\r\nconst registerButton = {\r\nbackground: '#4169e1', \r\ncolor: 'white',\r\npadding: '10px 20px',\r\ntextDecoration: 'none',\r\nborderRadius: '5px',\r\ncursor: 'pointer',\r\n};\r\n\r\nexport default MenuEdit;\r\n",{"ruleId":"554","severity":1,"message":"555","line":1,"column":17,"nodeType":"556","messageId":"557","endLine":1,"endColumn":26},{"ruleId":"554","severity":1,"message":"558","line":1,"column":28,"nodeType":"556","messageId":"557","endLine":1,"endColumn":36},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"560","line":2,"column":17,"nodeType":"556","messageId":"557","endLine":2,"endColumn":27},{"ruleId":"554","severity":1,"message":"561","line":23,"column":8,"nodeType":"556","messageId":"557","endLine":23,"endColumn":20},{"ruleId":"554","severity":1,"message":"562","line":33,"column":10,"nodeType":"556","messageId":"557","endLine":33,"endColumn":26},{"ruleId":"554","severity":1,"message":"563","line":46,"column":11,"nodeType":"556","messageId":"557","endLine":46,"endColumn":15},{"ruleId":"554","severity":1,"message":"564","line":46,"column":17,"nodeType":"556","messageId":"557","endLine":46,"endColumn":22},{"ruleId":"554","severity":1,"message":"565","line":2,"column":10,"nodeType":"556","messageId":"557","endLine":2,"endColumn":24},{"ruleId":"554","severity":1,"message":"566","line":3,"column":8,"nodeType":"556","messageId":"557","endLine":3,"endColumn":17},{"ruleId":"554","severity":1,"message":"560","line":12,"column":10,"nodeType":"556","messageId":"557","endLine":12,"endColumn":20},{"ruleId":"554","severity":1,"message":"558","line":13,"column":10,"nodeType":"556","messageId":"557","endLine":13,"endColumn":18},{"ruleId":"554","severity":1,"message":"567","line":13,"column":20,"nodeType":"556","messageId":"557","endLine":13,"endColumn":30},{"ruleId":"554","severity":1,"message":"568","line":15,"column":10,"nodeType":"556","messageId":"557","endLine":15,"endColumn":19},{"ruleId":"554","severity":1,"message":"559","line":16,"column":8,"nodeType":"556","messageId":"557","endLine":16,"endColumn":13},{"ruleId":"554","severity":1,"message":"563","line":25,"column":10,"nodeType":"556","messageId":"557","endLine":25,"endColumn":14},{"ruleId":"554","severity":1,"message":"559","line":3,"column":8,"nodeType":"556","messageId":"557","endLine":3,"endColumn":13},{"ruleId":"554","severity":1,"message":"568","line":4,"column":10,"nodeType":"556","messageId":"557","endLine":4,"endColumn":19},{"ruleId":"554","severity":1,"message":"569","line":31,"column":9,"nodeType":"556","messageId":"557","endLine":31,"endColumn":16},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"559","line":2,"column":10,"nodeType":"556","messageId":"557","endLine":2,"endColumn":15},{"ruleId":"554","severity":1,"message":"560","line":2,"column":17,"nodeType":"556","messageId":"557","endLine":2,"endColumn":27},{"ruleId":"554","severity":1,"message":"570","line":5,"column":10,"nodeType":"556","messageId":"557","endLine":5,"endColumn":17},{"ruleId":"554","severity":1,"message":"571","line":9,"column":3,"nodeType":"556","messageId":"557","endLine":9,"endColumn":19},{"ruleId":"554","severity":1,"message":"572","line":13,"column":3,"nodeType":"556","messageId":"557","endLine":13,"endColumn":10},{"ruleId":"554","severity":1,"message":"573","line":24,"column":9,"nodeType":"556","messageId":"557","endLine":24,"endColumn":19},{"ruleId":"574","severity":1,"message":"575","line":43,"column":6,"nodeType":"576","endLine":43,"endColumn":8,"suggestions":"577"},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"578","line":4,"column":8,"nodeType":"556","messageId":"557","endLine":4,"endColumn":21},{"ruleId":"554","severity":1,"message":"579","line":6,"column":10,"nodeType":"556","messageId":"557","endLine":6,"endColumn":16},{"ruleId":"554","severity":1,"message":"580","line":6,"column":18,"nodeType":"556","messageId":"557","endLine":6,"endColumn":23},{"ruleId":"554","severity":1,"message":"581","line":7,"column":10,"nodeType":"556","messageId":"557","endLine":7,"endColumn":28},{"ruleId":"554","severity":1,"message":"582","line":7,"column":30,"nodeType":"556","messageId":"557","endLine":7,"endColumn":43},{"ruleId":"554","severity":1,"message":"583","line":8,"column":10,"nodeType":"556","messageId":"557","endLine":8,"endColumn":33},{"ruleId":"554","severity":1,"message":"584","line":13,"column":24,"nodeType":"556","messageId":"557","endLine":13,"endColumn":39},{"ruleId":"554","severity":1,"message":"585","line":14,"column":9,"nodeType":"556","messageId":"557","endLine":14,"endColumn":20},{"ruleId":"574","severity":1,"message":"586","line":55,"column":6,"nodeType":"576","endLine":55,"endColumn":8,"suggestions":"587"},{"ruleId":"554","severity":1,"message":"555","line":1,"column":16,"nodeType":"556","messageId":"557","endLine":1,"endColumn":25},{"ruleId":"554","severity":1,"message":"558","line":1,"column":27,"nodeType":"556","messageId":"557","endLine":1,"endColumn":35},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"588","severity":1,"message":"589","line":9,"column":7,"nodeType":"590","endLine":9,"endColumn":41},{"ruleId":"554","severity":1,"message":"559","line":3,"column":8,"nodeType":"556","messageId":"557","endLine":3,"endColumn":13},{"ruleId":"554","severity":1,"message":"591","line":17,"column":10,"nodeType":"556","messageId":"557","endLine":17,"endColumn":22},{"ruleId":"554","severity":1,"message":"592","line":19,"column":9,"nodeType":"556","messageId":"557","endLine":19,"endColumn":26},{"ruleId":"554","severity":1,"message":"593","line":34,"column":9,"nodeType":"556","messageId":"557","endLine":34,"endColumn":21},{"ruleId":"554","severity":1,"message":"594","line":42,"column":9,"nodeType":"556","messageId":"557","endLine":42,"endColumn":21},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"595","line":4,"column":8,"nodeType":"556","messageId":"557","endLine":4,"endColumn":14},{"ruleId":"554","severity":1,"message":"596","line":5,"column":8,"nodeType":"556","messageId":"557","endLine":5,"endColumn":16},{"ruleId":"554","severity":1,"message":"597","line":7,"column":8,"nodeType":"556","messageId":"557","endLine":7,"endColumn":17},{"ruleId":"554","severity":1,"message":"579","line":8,"column":10,"nodeType":"556","messageId":"557","endLine":8,"endColumn":16},{"ruleId":"554","severity":1,"message":"580","line":8,"column":18,"nodeType":"556","messageId":"557","endLine":8,"endColumn":23},{"ruleId":"554","severity":1,"message":"568","line":9,"column":10,"nodeType":"556","messageId":"557","endLine":9,"endColumn":19},{"ruleId":"554","severity":1,"message":"565","line":9,"column":54,"nodeType":"556","messageId":"557","endLine":9,"endColumn":68},{"ruleId":"554","severity":1,"message":"598","line":9,"column":70,"nodeType":"556","messageId":"557","endLine":9,"endColumn":84},{"ruleId":"554","severity":1,"message":"566","line":11,"column":8,"nodeType":"556","messageId":"557","endLine":11,"endColumn":17},{"ruleId":"574","severity":1,"message":"599","line":27,"column":6,"nodeType":"576","endLine":27,"endColumn":8,"suggestions":"600"},{"ruleId":"574","severity":1,"message":"601","line":56,"column":6,"nodeType":"576","endLine":56,"endColumn":30,"suggestions":"602"},{"ruleId":"554","severity":1,"message":"565","line":10,"column":9,"nodeType":"556","messageId":"557","endLine":10,"endColumn":23},{"ruleId":"554","severity":1,"message":"603","line":11,"column":10,"nodeType":"556","messageId":"557","endLine":11,"endColumn":18},{"ruleId":"554","severity":1,"message":"570","line":13,"column":10,"nodeType":"556","messageId":"557","endLine":13,"endColumn":17},{"ruleId":"604","severity":2,"message":"605","line":55,"column":16,"nodeType":"556","messageId":"606","endLine":55,"endColumn":27},{"ruleId":"574","severity":1,"message":"607","line":57,"column":6,"nodeType":"576","endLine":57,"endColumn":8,"suggestions":"608"},{"ruleId":"554","severity":1,"message":"609","line":3,"column":10,"nodeType":"556","messageId":"557","endLine":3,"endColumn":14},{"ruleId":"554","severity":1,"message":"610","line":3,"column":16,"nodeType":"556","messageId":"557","endLine":3,"endColumn":20},{"ruleId":"554","severity":1,"message":"611","line":3,"column":22,"nodeType":"556","messageId":"557","endLine":3,"endColumn":28},{"ruleId":"554","severity":1,"message":"612","line":4,"column":10,"nodeType":"556","messageId":"557","endLine":4,"endColumn":14},{"ruleId":"554","severity":1,"message":"613","line":4,"column":16,"nodeType":"556","messageId":"557","endLine":4,"endColumn":27},{"ruleId":"554","severity":1,"message":"559","line":5,"column":8,"nodeType":"556","messageId":"557","endLine":5,"endColumn":13},{"ruleId":"554","severity":1,"message":"598","line":10,"column":3,"nodeType":"556","messageId":"557","endLine":10,"endColumn":17},{"ruleId":"554","severity":1,"message":"614","line":10,"column":35,"nodeType":"556","messageId":"557","endLine":10,"endColumn":57},{"ruleId":"554","severity":1,"message":"570","line":12,"column":10,"nodeType":"556","messageId":"557","endLine":12,"endColumn":17},{"ruleId":"554","severity":1,"message":"566","line":13,"column":8,"nodeType":"556","messageId":"557","endLine":13,"endColumn":17},{"ruleId":"554","severity":1,"message":"615","line":114,"column":10,"nodeType":"556","messageId":"557","endLine":114,"endColumn":15},{"ruleId":"554","severity":1,"message":"616","line":3,"column":10,"nodeType":"556","messageId":"557","endLine":3,"endColumn":35},{"ruleId":"554","severity":1,"message":"613","line":5,"column":10,"nodeType":"556","messageId":"557","endLine":5,"endColumn":21},{"ruleId":"554","severity":1,"message":"617","line":5,"column":23,"nodeType":"556","messageId":"557","endLine":5,"endColumn":32},{"ruleId":"554","severity":1,"message":"558","line":1,"column":17,"nodeType":"556","messageId":"557","endLine":1,"endColumn":25},{"ruleId":"618","severity":1,"message":"619","line":125,"column":5,"nodeType":"620","messageId":"621","endLine":125,"endColumn":15},{"ruleId":"554","severity":1,"message":"555","line":1,"column":17,"nodeType":"556","messageId":"557","endLine":1,"endColumn":26},{"ruleId":"554","severity":1,"message":"558","line":1,"column":28,"nodeType":"556","messageId":"557","endLine":1,"endColumn":36},{"ruleId":"554","severity":1,"message":"559","line":3,"column":8,"nodeType":"556","messageId":"557","endLine":3,"endColumn":13},{"ruleId":"554","severity":1,"message":"560","line":3,"column":17,"nodeType":"556","messageId":"557","endLine":3,"endColumn":27},{"ruleId":"554","severity":1,"message":"568","line":4,"column":10,"nodeType":"556","messageId":"557","endLine":4,"endColumn":19},{"ruleId":"554","severity":1,"message":"562","line":4,"column":21,"nodeType":"556","messageId":"557","endLine":4,"endColumn":37},{"ruleId":"554","severity":1,"message":"622","line":2,"column":10,"nodeType":"556","messageId":"557","endLine":2,"endColumn":14},{"ruleId":"554","severity":1,"message":"623","line":1,"column":38,"nodeType":"556","messageId":"557","endLine":1,"endColumn":44},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"624","line":3,"column":10,"nodeType":"556","messageId":"557","endLine":3,"endColumn":18},{"ruleId":"554","severity":1,"message":"565","line":6,"column":79,"nodeType":"556","messageId":"557","endLine":6,"endColumn":93},{"ruleId":"554","severity":1,"message":"614","line":6,"column":95,"nodeType":"556","messageId":"557","endLine":6,"endColumn":117},{"ruleId":"554","severity":1,"message":"625","line":10,"column":8,"nodeType":"556","messageId":"557","endLine":10,"endColumn":20},{"ruleId":"554","severity":1,"message":"626","line":13,"column":10,"nodeType":"556","messageId":"557","endLine":13,"endColumn":26},{"ruleId":"554","severity":1,"message":"627","line":53,"column":7,"nodeType":"556","messageId":"557","endLine":53,"endColumn":26},{"ruleId":"554","severity":1,"message":"628","line":185,"column":21,"nodeType":"556","messageId":"557","endLine":185,"endColumn":30},{"ruleId":"629","severity":1,"message":"630","line":270,"column":41,"nodeType":"631","messageId":"621","endLine":270,"endColumn":43},{"ruleId":"554","severity":1,"message":"632","line":3,"column":10,"nodeType":"556","messageId":"557","endLine":3,"endColumn":26},{"ruleId":"554","severity":1,"message":"633","line":34,"column":9,"nodeType":"556","messageId":"557","endLine":34,"endColumn":14},{"ruleId":"554","severity":1,"message":"634","line":37,"column":10,"nodeType":"556","messageId":"557","endLine":37,"endColumn":13},{"ruleId":"554","severity":1,"message":"635","line":94,"column":17,"nodeType":"556","messageId":"557","endLine":94,"endColumn":21},{"ruleId":"629","severity":1,"message":"630","line":123,"column":36,"nodeType":"631","messageId":"621","endLine":123,"endColumn":38},{"ruleId":"554","severity":1,"message":"555","line":1,"column":17,"nodeType":"556","messageId":"557","endLine":1,"endColumn":26},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"636","line":6,"column":22,"nodeType":"556","messageId":"557","endLine":6,"endColumn":30},{"ruleId":"554","severity":1,"message":"570","line":4,"column":9,"nodeType":"556","messageId":"557","endLine":4,"endColumn":16},{"ruleId":"554","severity":1,"message":"581","line":11,"column":5,"nodeType":"556","messageId":"557","endLine":11,"endColumn":23},{"ruleId":"554","severity":1,"message":"637","line":16,"column":25,"nodeType":"556","messageId":"557","endLine":16,"endColumn":39},{"ruleId":"554","severity":1,"message":"638","line":17,"column":24,"nodeType":"556","messageId":"557","endLine":17,"endColumn":38},{"ruleId":"554","severity":1,"message":"639","line":18,"column":19,"nodeType":"556","messageId":"557","endLine":18,"endColumn":27},{"ruleId":"554","severity":1,"message":"640","line":40,"column":21,"nodeType":"556","messageId":"557","endLine":40,"endColumn":33},{"ruleId":"554","severity":1,"message":"639","line":41,"column":17,"nodeType":"556","messageId":"557","endLine":41,"endColumn":25},{"ruleId":"629","severity":1,"message":"641","line":44,"column":40,"nodeType":"631","messageId":"621","endLine":44,"endColumn":42},{"ruleId":"588","severity":1,"message":"589","line":52,"column":17,"nodeType":"590","endLine":53,"endColumn":124},{"ruleId":"588","severity":1,"message":"589","line":56,"column":73,"nodeType":"590","endLine":56,"endColumn":101},{"ruleId":"588","severity":1,"message":"589","line":60,"column":76,"nodeType":"590","endLine":61,"endColumn":44},{"ruleId":"588","severity":1,"message":"589","line":65,"column":74,"nodeType":"590","endLine":66,"endColumn":45},{"ruleId":"554","severity":1,"message":"639","line":128,"column":17,"nodeType":"556","messageId":"557","endLine":128,"endColumn":25},{"ruleId":"554","severity":1,"message":"642","line":129,"column":23,"nodeType":"556","messageId":"557","endLine":129,"endColumn":37},{"ruleId":"554","severity":1,"message":"640","line":130,"column":21,"nodeType":"556","messageId":"557","endLine":130,"endColumn":33},{"ruleId":"643","severity":1,"message":"644","line":149,"column":33,"nodeType":"645","messageId":"646","endLine":149,"endColumn":107},{"ruleId":"574","severity":1,"message":"647","line":167,"column":8,"nodeType":"576","endLine":167,"endColumn":33,"suggestions":"648"},{"ruleId":"574","severity":1,"message":"649","line":181,"column":8,"nodeType":"576","endLine":181,"endColumn":10,"suggestions":"650"},{"ruleId":"588","severity":1,"message":"589","line":195,"column":33,"nodeType":"590","endLine":196,"endColumn":141},{"ruleId":"588","severity":1,"message":"589","line":207,"column":41,"nodeType":"590","endLine":207,"endColumn":69},{"ruleId":"588","severity":1,"message":"589","line":213,"column":41,"nodeType":"590","endLine":213,"endColumn":69},{"ruleId":"588","severity":1,"message":"589","line":219,"column":41,"nodeType":"590","endLine":219,"endColumn":70},{"ruleId":"588","severity":1,"message":"589","line":231,"column":41,"nodeType":"590","endLine":232,"endColumn":197},{"ruleId":"588","severity":1,"message":"589","line":238,"column":61,"nodeType":"590","endLine":247,"endColumn":70},{"ruleId":"629","severity":1,"message":"630","line":255,"column":57,"nodeType":"631","messageId":"621","endLine":255,"endColumn":59},{"ruleId":"629","severity":1,"message":"630","line":264,"column":53,"nodeType":"631","messageId":"621","endLine":264,"endColumn":55},{"ruleId":"629","severity":1,"message":"630","line":322,"column":46,"nodeType":"631","messageId":"621","endLine":322,"endColumn":48},{"ruleId":"554","severity":1,"message":"637","line":336,"column":25,"nodeType":"556","messageId":"557","endLine":336,"endColumn":39},{"ruleId":"554","severity":1,"message":"651","line":386,"column":11,"nodeType":"556","messageId":"557","endLine":386,"endColumn":21},{"ruleId":"574","severity":1,"message":"652","line":411,"column":8,"nodeType":"576","endLine":411,"endColumn":10,"suggestions":"653"},{"ruleId":"588","severity":1,"message":"589","line":420,"column":29,"nodeType":"590","endLine":421,"endColumn":137},{"ruleId":"629","severity":1,"message":"630","line":429,"column":49,"nodeType":"631","messageId":"621","endLine":429,"endColumn":51},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"562","line":5,"column":21,"nodeType":"556","messageId":"557","endLine":5,"endColumn":37},{"ruleId":"554","severity":1,"message":"570","line":6,"column":10,"nodeType":"556","messageId":"557","endLine":6,"endColumn":17},{"ruleId":"554","severity":1,"message":"639","line":9,"column":15,"nodeType":"556","messageId":"557","endLine":9,"endColumn":23},{"ruleId":"574","severity":1,"message":"654","line":16,"column":6,"nodeType":"576","endLine":16,"endColumn":8,"suggestions":"655"},{"ruleId":"588","severity":1,"message":"589","line":20,"column":7,"nodeType":"590","endLine":20,"endColumn":74},{"ruleId":"588","severity":1,"message":"589","line":29,"column":11,"nodeType":"590","endLine":29,"endColumn":80},{"ruleId":"588","severity":1,"message":"589","line":32,"column":11,"nodeType":"590","endLine":32,"endColumn":84},{"ruleId":"629","severity":1,"message":"630","line":33,"column":17,"nodeType":"631","messageId":"621","endLine":33,"endColumn":19},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"656","line":12,"column":21,"nodeType":"556","messageId":"557","endLine":12,"endColumn":33},{"ruleId":"554","severity":1,"message":"615","line":13,"column":10,"nodeType":"556","messageId":"557","endLine":13,"endColumn":15},{"ruleId":"554","severity":1,"message":"595","line":72,"column":8,"nodeType":"556","messageId":"557","endLine":72,"endColumn":14},{"ruleId":"554","severity":1,"message":"555","line":1,"column":16,"nodeType":"556","messageId":"557","endLine":1,"endColumn":25},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"657","line":3,"column":8,"nodeType":"556","messageId":"557","endLine":3,"endColumn":14},{"ruleId":"554","severity":1,"message":"658","line":1,"column":28,"nodeType":"556","messageId":"557","endLine":1,"endColumn":38},{"ruleId":"554","severity":1,"message":"659","line":5,"column":8,"nodeType":"556","messageId":"557","endLine":5,"endColumn":21},{"ruleId":"574","severity":1,"message":"660","line":17,"column":6,"nodeType":"576","endLine":17,"endColumn":8,"suggestions":"661"},{"ruleId":"588","severity":1,"message":"589","line":40,"column":9,"nodeType":"590","endLine":40,"endColumn":39},{"ruleId":"554","severity":1,"message":"555","line":1,"column":17,"nodeType":"556","messageId":"557","endLine":1,"endColumn":26},{"ruleId":"554","severity":1,"message":"558","line":1,"column":28,"nodeType":"556","messageId":"557","endLine":1,"endColumn":36},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"555","line":1,"column":16,"nodeType":"556","messageId":"557","endLine":1,"endColumn":25},{"ruleId":"554","severity":1,"message":"558","line":1,"column":27,"nodeType":"556","messageId":"557","endLine":1,"endColumn":35},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"662","line":4,"column":16,"nodeType":"556","messageId":"557","endLine":4,"endColumn":23},{"ruleId":"554","severity":1,"message":"611","line":5,"column":8,"nodeType":"556","messageId":"557","endLine":5,"endColumn":14},{"ruleId":"554","severity":1,"message":"663","line":7,"column":8,"nodeType":"556","messageId":"557","endLine":7,"endColumn":19},{"ruleId":"554","severity":1,"message":"613","line":8,"column":10,"nodeType":"556","messageId":"557","endLine":8,"endColumn":21},{"ruleId":"554","severity":1,"message":"664","line":24,"column":36,"nodeType":"556","messageId":"557","endLine":24,"endColumn":47},{"ruleId":"554","severity":1,"message":"665","line":30,"column":32,"nodeType":"556","messageId":"557","endLine":30,"endColumn":41},{"ruleId":"588","severity":1,"message":"589","line":48,"column":9,"nodeType":"590","endLine":48,"endColumn":90},{"ruleId":"588","severity":1,"message":"589","line":52,"column":13,"nodeType":"590","endLine":52,"endColumn":80},{"ruleId":"588","severity":1,"message":"589","line":57,"column":9,"nodeType":"590","endLine":57,"endColumn":81},{"ruleId":"554","severity":1,"message":"555","line":1,"column":27,"nodeType":"556","messageId":"557","endLine":1,"endColumn":36},{"ruleId":"554","severity":1,"message":"559","line":2,"column":8,"nodeType":"556","messageId":"557","endLine":2,"endColumn":13},{"ruleId":"554","severity":1,"message":"666","line":6,"column":10,"nodeType":"556","messageId":"557","endLine":6,"endColumn":16},{"ruleId":"554","severity":1,"message":"667","line":54,"column":9,"nodeType":"556","messageId":"557","endLine":54,"endColumn":14},{"ruleId":"554","severity":1,"message":"595","line":4,"column":8,"nodeType":"556","messageId":"557","endLine":4,"endColumn":14},{"ruleId":"554","severity":1,"message":"596","line":5,"column":8,"nodeType":"556","messageId":"557","endLine":5,"endColumn":16},{"ruleId":"554","severity":1,"message":"597","line":7,"column":8,"nodeType":"556","messageId":"557","endLine":7,"endColumn":17},{"ruleId":"554","severity":1,"message":"579","line":8,"column":10,"nodeType":"556","messageId":"557","endLine":8,"endColumn":16},{"ruleId":"554","severity":1,"message":"580","line":8,"column":18,"nodeType":"556","messageId":"557","endLine":8,"endColumn":23},{"ruleId":"554","severity":1,"message":"668","line":8,"column":12,"nodeType":"556","messageId":"557","endLine":8,"endColumn":20},{"ruleId":"669","severity":1,"message":"670","line":120,"column":29,"nodeType":"671","messageId":"672","endLine":120,"endColumn":48},{"ruleId":"554","severity":1,"message":"622","line":3,"column":10,"nodeType":"556","messageId":"557","endLine":3,"endColumn":14},{"ruleId":"554","severity":1,"message":"579","line":5,"column":10,"nodeType":"556","messageId":"557","endLine":5,"endColumn":16},{"ruleId":"554","severity":1,"message":"580","line":5,"column":18,"nodeType":"556","messageId":"557","endLine":5,"endColumn":23},{"ruleId":"554","severity":1,"message":"555","line":1,"column":27,"nodeType":"556","messageId":"557","endLine":1,"endColumn":36},{"ruleId":"554","severity":1,"message":"673","line":6,"column":8,"nodeType":"556","messageId":"557","endLine":6,"endColumn":15},{"ruleId":"554","severity":1,"message":"560","line":7,"column":10,"nodeType":"556","messageId":"557","endLine":7,"endColumn":20},{"ruleId":"554","severity":1,"message":"563","line":12,"column":8,"nodeType":"556","messageId":"557","endLine":12,"endColumn":12},{"ruleId":"554","severity":1,"message":"564","line":12,"column":14,"nodeType":"556","messageId":"557","endLine":12,"endColumn":19},{"ruleId":"554","severity":1,"message":"674","line":12,"column":21,"nodeType":"556","messageId":"557","endLine":12,"endColumn":27},{"ruleId":"675","severity":1,"message":"676","line":68,"column":57,"nodeType":"677","messageId":"678","endLine":68,"endColumn":59},{"ruleId":"675","severity":1,"message":"676","line":104,"column":34,"nodeType":"677","messageId":"678","endLine":104,"endColumn":36},{"ruleId":"554","severity":1,"message":"579","line":5,"column":10,"nodeType":"556","messageId":"557","endLine":5,"endColumn":16},{"ruleId":"554","severity":1,"message":"580","line":5,"column":18,"nodeType":"556","messageId":"557","endLine":5,"endColumn":23},{"ruleId":"554","severity":1,"message":"559","line":3,"column":8,"nodeType":"556","messageId":"557","endLine":3,"endColumn":13},{"ruleId":"554","severity":1,"message":"570","line":3,"column":10,"nodeType":"556","messageId":"557","endLine":3,"endColumn":17},{"ruleId":"574","severity":1,"message":"679","line":18,"column":6,"nodeType":"576","endLine":18,"endColumn":8,"suggestions":"680"},{"ruleId":"554","severity":1,"message":"658","line":1,"column":28,"nodeType":"556","messageId":"557","endLine":1,"endColumn":38},{"ruleId":"574","severity":1,"message":"660","line":17,"column":6,"nodeType":"576","endLine":17,"endColumn":8,"suggestions":"681"},{"ruleId":"588","severity":1,"message":"589","line":37,"column":9,"nodeType":"590","endLine":37,"endColumn":39},{"ruleId":"554","severity":1,"message":"565","line":2,"column":55,"nodeType":"556","messageId":"557","endLine":2,"endColumn":69},{"ruleId":"554","severity":1,"message":"559","line":3,"column":8,"nodeType":"556","messageId":"557","endLine":3,"endColumn":13},{"ruleId":"554","severity":1,"message":"570","line":5,"column":10,"nodeType":"556","messageId":"557","endLine":5,"endColumn":17},{"ruleId":"554","severity":1,"message":"639","line":11,"column":17,"nodeType":"556","messageId":"557","endLine":11,"endColumn":25},{"ruleId":"554","severity":1,"message":"682","line":13,"column":10,"nodeType":"556","messageId":"557","endLine":13,"endColumn":19},{"ruleId":"554","severity":1,"message":"640","line":13,"column":21,"nodeType":"556","messageId":"557","endLine":13,"endColumn":33},{"ruleId":"574","severity":1,"message":"683","line":26,"column":6,"nodeType":"576","endLine":26,"endColumn":8,"suggestions":"684"},{"ruleId":"554","severity":1,"message":"685","line":65,"column":7,"nodeType":"556","messageId":"557","endLine":65,"endColumn":17},{"ruleId":"554","severity":1,"message":"686","line":6,"column":10,"nodeType":"556","messageId":"557","endLine":6,"endColumn":21},{"ruleId":"554","severity":1,"message":"559","line":5,"column":8,"nodeType":"556","messageId":"557","endLine":5,"endColumn":13},{"ruleId":"554","severity":1,"message":"560","line":5,"column":17,"nodeType":"556","messageId":"557","endLine":5,"endColumn":27},{"ruleId":"554","severity":1,"message":"687","line":15,"column":11,"nodeType":"556","messageId":"557","endLine":15,"endColumn":17},{"ruleId":"554","severity":1,"message":"688","line":16,"column":9,"nodeType":"556","messageId":"557","endLine":16,"endColumn":17},{"ruleId":"574","severity":1,"message":"683","line":55,"column":6,"nodeType":"576","endLine":55,"endColumn":8,"suggestions":"689"},{"ruleId":"554","severity":1,"message":"690","line":124,"column":7,"nodeType":"556","messageId":"557","endLine":124,"endColumn":20},{"ruleId":"554","severity":1,"message":"691","line":129,"column":7,"nodeType":"556","messageId":"557","endLine":129,"endColumn":20},{"ruleId":"554","severity":1,"message":"692","line":134,"column":7,"nodeType":"556","messageId":"557","endLine":134,"endColumn":18},{"ruleId":"554","severity":1,"message":"693","line":138,"column":7,"nodeType":"556","messageId":"557","endLine":138,"endColumn":19},{"ruleId":"554","severity":1,"message":"694","line":153,"column":7,"nodeType":"556","messageId":"557","endLine":153,"endColumn":21},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'axios' is defined but never used.","'formToJSON' is defined but never used.","'UserProvider' is defined but never used.","'sendAxiosRequest' is defined but never used.","'user' is assigned a value but never used.","'login' is assigned a value but never used.","'getAccessToken' is defined but never used.","'jwtDecode' is defined but never used.","'useContext' is defined but never used.","'isOpenNow' is defined but never used.","'useForm' is assigned a value but never used.","'useUser' is defined but never used.","'getLoginUserInfo' is defined but never used.","'mainUrl' is defined but never used.","'currentURL' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'accessToken' and 'refreshToken'. Either include them or remove the dependency array.","ArrayExpression",["695"],"'StoreListItem' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'accessTokenRefresh' is defined but never used.","'redirectLogin' is defined but never used.","'accordionSummaryClasses' is defined but never used.","'setPageRowCount' is assigned a value but never used.","'accessToken' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'pageRowCount'. Either include it or remove the dependency array.",["696"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'previewImage' is assigned a value but never used.","'handleImageChange' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'Coupon' is defined but never used.","'Category' is defined but never used.","'StoreHome' is defined but never used.","'isTokenExpired' is defined but never used.","React Hook useEffect has missing dependencies: 'accessToken' and 'newAddLength'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setStartPageNo' needs the current value of 'newAddLength'.",["697"],"React Hook useEffect has missing dependencies: 'accessToken' and 'newAddLength'. Either include them or remove the dependency array.",["698"],"'MenuItem' is defined but never used.","no-undef","'accessToken' is not defined.","undef","React Hook useEffect has missing dependencies: 'menuData' and 'store'. Either include them or remove the dependency array.",["699"],"'Form' is defined but never used.","'Card' is defined but never used.","'Button' is defined but never used.","'json' is defined but never used.","'useNavigate' is defined but never used.","'isNullUndefinedOrEmpty' is defined but never used.","'store' is assigned a value but never used.","'sendAxiosMultipartRequest' is defined but never used.","'useParams' is defined but never used.","no-dupe-keys","Duplicate key 'transition'.","ObjectExpression","unexpected","'Link' is defined but never used.","'useRef' is defined but never used.","'Carousel' is defined but never used.","'Handsontable' is defined but never used.","'registerRenderer' is defined but never used.","'recommendationItems' is assigned a value but never used.","'cellWidth' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'isValidDateValue' is defined but never used.","'payNo' is assigned a value but never used.","'pay' is assigned a value but never used.","'data' is assigned a value but never used.","'setState' is assigned a value but never used.","'setAccessToken' is assigned a value but never used.","'setTokenMember' is assigned a value but never used.","'setStore' is assigned a value but never used.","'setLoginUser' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'setAccessToekn' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has missing dependencies: 'accessToken', 'newAddLength', and 'store.storeNo'. Either include them or remove the dependency array.",["700"],"React Hook useEffect has missing dependencies: 'accessToken', 'newAddLength', and 'store.storeNo'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setStartPageNo' needs the current value of 'newAddLength'.",["701"],"'pageRowCnt' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.reviewNo'. Either include it or remove the dependency array.",["702"],"React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.",["703"],"'setMenuItems' is assigned a value but never used.","'styles' is defined but never used.","'useReducer' is defined but never used.","'OrderMenuList' is defined but never used.","React Hook useEffect has a missing dependency: 'orders'. Either include it or remove the dependency array.",["704"],"'NavLink' is defined but never used.","'Placeholder' is defined but never used.","'startSecond' is assigned a value but never used.","'endSecond' is assigned a value but never used.","'Hidden' is defined but never used.","'codes' is assigned a value but never used.","'response' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Payment' is defined but never used.","'logout' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'localItem' and 'menu.menuNo'. Either include them or remove the dependency array. You can also do a functional update 'setLocalItem(l => ...)' if you only need 'localItem' in the 'setLocalItem' call.",["705"],["706"],"'loginUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accessToken' and 'tokenMember'. Either include them or remove the dependency array.",["707"],"'imageStyle' is assigned a value but never used.","'useLocation' is defined but never used.","'menuNo' is assigned a value but never used.","'navigate' is assigned a value but never used.",["708"],"'menuItemStyle' is assigned a value but never used.","'menuItemTitle' is assigned a value but never used.","'menuActions' is assigned a value but never used.","'deleteButton' is assigned a value but never used.","'registerButton' is assigned a value but never used.",{"desc":"709","fix":"710"},{"desc":"711","fix":"712"},{"desc":"713","fix":"714"},{"desc":"715","fix":"716"},{"desc":"717","fix":"718"},{"desc":"719","fix":"720"},{"desc":"721","fix":"722"},{"desc":"723","fix":"724"},{"desc":"725","fix":"726"},{"desc":"727","fix":"728"},{"desc":"729","fix":"730"},{"desc":"727","fix":"731"},{"desc":"732","fix":"733"},{"desc":"732","fix":"734"},"Update the dependencies array to be: [accessToken, refreshToken]",{"range":"735","text":"736"},"Update the dependencies array to be: [pageRowCount]",{"range":"737","text":"738"},"Update the dependencies array to be: [accessToken, newAddLength]",{"range":"739","text":"740"},"Update the dependencies array to be: [accessToken, newAddLength, startPageNo, storeList]",{"range":"741","text":"742"},"Update the dependencies array to be: [menuData, store]",{"range":"743","text":"744"},"Update the dependencies array to be: [startPageNo, reviewList, newAddLength, store.storeNo, accessToken]",{"range":"745","text":"746"},"Update the dependencies array to be: [accessToken, newAddLength, store.storeNo]",{"range":"747","text":"748"},"Update the dependencies array to be: [props.reviewNo]",{"range":"749","text":"750"},"Update the dependencies array to be: [store]",{"range":"751","text":"752"},"Update the dependencies array to be: [orders]",{"range":"753","text":"754"},"Update the dependencies array to be: [localItem, menu.menuNo]",{"range":"755","text":"756"},{"range":"757","text":"754"},"Update the dependencies array to be: [accessToken, tokenMember]",{"range":"758","text":"759"},{"range":"760","text":"759"},[1862,1864],"[accessToken, refreshToken]",[2051,2053],"[pageRowCount]",[1191,1193],"[accessToken, newAddLength]",[2232,2256],"[accessToken, newAddLength, startPageNo, storeList]",[1893,1895],"[menuData, store]",[8362,8387],"[startPageNo, reviewList, newAddLength, store.storeNo, accessToken]",[8981,8983],"[accessToken, newAddLength, store.storeNo]",[22709,22711],"[props.reviewNo]",[599,601],"[store]",[486,488],"[orders]",[457,459],"[localItem, menu.menuNo]",[444,446],[940,942],"[accessToken, tokenMember]",[1758,1760]]
\ No newline at end of file
+[{"C:\\Users\\think\\git\\bleuauction_fe\\src\\index.js":"1","C:\\Users\\think\\git\\bleuauction_fe\\src\\App.js":"2","C:\\Users\\think\\git\\bleuauction_fe\\src\\reportWebVitals.js":"3","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\UserContext.js":"4","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\LoginPage.js":"5","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\RegisterPage.js":"6","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuList.js":"7","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\SideBar.js":"8","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\Header.js":"9","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Test\\Test.js":"10","C:\\Users\\think\\git\\bleuauction_fe\\src\\routes\\Home.js":"11","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\Footer.js":"12","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuRegisterationForm.js":"13","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\TabBar.js":"14","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreList.js":"15","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\MarketDetailPage.js":"16","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreMyPage.js":"17","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreItemRegister.js":"18","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\UserEditPage.js":"19","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreRegisterPage.js":"20","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyPage.js":"21","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyOrder.js":"22","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreItemDailyPrice\\StoreItemDailyPrice.js":"23","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\utility\\common.js":"24","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Pay\\Pay.js":"25","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Test\\test2.jsx":"26","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Review\\ReviewForm.js":"27","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreHome.js":"28","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreListItem.js":"29","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuItem.js":"30","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\InputField.js":"31","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreInfo.js":"32","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Category.js":"33","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyOrderContent.js":"34","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Announce.js":"35","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Button.js":"36","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreHomeItem.js":"37","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Review\\ReviewList.js":"38","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Coupon\\Coupon.js":"39","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreItemDailyPrice\\StoreItemAdd.js":"40","C:\\Users\\think\\git\\bleuauction_fe\\src\\routes\\StoreList.js":"41","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Chat\\Chat.js":"42","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeDetail.js":"43","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeList.js":"44","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeListItem.js":"45","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\OrderModal.js":"46","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeList.js":"47","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeDetail.js":"48","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\NoticeRegisterationForm.js":"49","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeListItem.js":"50","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\OrderItem.js":"51","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\OrderMenuList.js":"52","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreOrder.js":"53","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreEdit.js":"54","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\OS\\OS.js":"55","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreInfoDetail.js":"56","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MenuDetail.js":"57","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MenuEdit.js":"58"},{"size":661,"mtime":1697978277777,"results":"59","hashOfConfig":"60"},{"size":6218,"mtime":1698144517010,"results":"61","hashOfConfig":"60"},{"size":375,"mtime":1696236038543,"results":"62","hashOfConfig":"60"},{"size":1736,"mtime":1698143852517,"results":"63","hashOfConfig":"60"},{"size":5571,"mtime":1698144517012,"results":"64","hashOfConfig":"60"},{"size":6672,"mtime":1697693754234,"results":"65","hashOfConfig":"60"},{"size":1074,"mtime":1698143316555,"results":"66","hashOfConfig":"60"},{"size":1670,"mtime":1698144517014,"results":"67","hashOfConfig":"60"},{"size":3321,"mtime":1698143316537,"results":"68","hashOfConfig":"60"},{"size":1115,"mtime":1696943521784,"results":"69","hashOfConfig":"60"},{"size":2483,"mtime":1698144517029,"results":"70","hashOfConfig":"60"},{"size":285,"mtime":1697521231622,"results":"71","hashOfConfig":"60"},{"size":5861,"mtime":1698143316556,"results":"72","hashOfConfig":"60"},{"size":1388,"mtime":1697097424814,"results":"73","hashOfConfig":"60"},{"size":2621,"mtime":1698038999200,"results":"74","hashOfConfig":"60"},{"size":3055,"mtime":1698145763744,"results":"75","hashOfConfig":"60"},{"size":0,"mtime":1697691593162,"results":"76","hashOfConfig":"77"},{"size":8651,"mtime":1698143316569,"results":"78","hashOfConfig":"60"},{"size":6428,"mtime":1698038999208,"results":"79","hashOfConfig":"60"},{"size":7165,"mtime":1697776613319,"results":"80","hashOfConfig":"60"},{"size":5083,"mtime":1698144743582,"results":"81","hashOfConfig":"60"},{"size":2335,"mtime":1697521308636,"results":"82","hashOfConfig":"60"},{"size":9792,"mtime":1698143316581,"results":"83","hashOfConfig":"60"},{"size":6871,"mtime":1698144517026,"results":"84","hashOfConfig":"60"},{"size":4473,"mtime":1697713109592,"results":"85","hashOfConfig":"60"},{"size":470,"mtime":1696943521785,"results":"86","hashOfConfig":"60"},{"size":28674,"mtime":1698143316577,"results":"87","hashOfConfig":"60"},{"size":479,"mtime":1698144517019,"results":"88","hashOfConfig":"60"},{"size":1713,"mtime":1698143735814,"results":"89","hashOfConfig":"60"},{"size":2090,"mtime":1697691593156,"results":"90","hashOfConfig":"91"},{"size":381,"mtime":1698038999204,"results":"92","hashOfConfig":"60"},{"size":3782,"mtime":1698143316547,"results":"93","hashOfConfig":"60"},{"size":642,"mtime":1697097424806,"results":"94","hashOfConfig":"60"},{"size":2332,"mtime":1698052575881,"results":"95","hashOfConfig":"60"},{"size":1633,"mtime":1698144517017,"results":"96","hashOfConfig":"60"},{"size":436,"mtime":1697097424804,"results":"97","hashOfConfig":"60"},{"size":2417,"mtime":1697624654909,"results":"98","hashOfConfig":"60"},{"size":1326,"mtime":1697097424829,"results":"99","hashOfConfig":"60"},{"size":1441,"mtime":1697097424799,"results":"100","hashOfConfig":"60"},{"size":5903,"mtime":1698144517024,"results":"101","hashOfConfig":"60"},{"size":1055,"mtime":1697691593170,"results":"102","hashOfConfig":"77"},{"size":6453,"mtime":1697691593146,"results":"103","hashOfConfig":"60"},{"size":1078,"mtime":1697691593165,"results":"104","hashOfConfig":"60"},{"size":691,"mtime":1697691593167,"results":"105","hashOfConfig":"60"},{"size":1438,"mtime":1697691593168,"results":"106","hashOfConfig":"60"},{"size":6785,"mtime":1698146101283,"results":"107","hashOfConfig":"60"},{"size":728,"mtime":1697792750306,"results":"108","hashOfConfig":"60"},{"size":2560,"mtime":1697792750304,"results":"109","hashOfConfig":"60"},{"size":2666,"mtime":1698143316532,"results":"110","hashOfConfig":"60"},{"size":2545,"mtime":1697792750307,"results":"111","hashOfConfig":"60"},{"size":1650,"mtime":1698059373024,"results":"112","hashOfConfig":"60"},{"size":3032,"mtime":1698038717405,"results":"113","hashOfConfig":"60"},{"size":1926,"mtime":1698038717406,"results":"114","hashOfConfig":"60"},{"size":6825,"mtime":1698139006960,"results":"115","hashOfConfig":"60"},{"size":2236,"mtime":1698143316573,"results":"116","hashOfConfig":"60"},{"size":2455,"mtime":1698143316549,"results":"117","hashOfConfig":"60"},{"size":3798,"mtime":1698143316561,"results":"118","hashOfConfig":"60"},{"size":4955,"mtime":1698143316564,"results":"119","hashOfConfig":"60"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1okf9q7",{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"131ovsd",{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1u8wuzz",{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283"},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293"},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","suppressedMessages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300"},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307"},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","suppressedMessages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314"},{"filePath":"315","messages":"316","suppressedMessages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318"},{"filePath":"319","messages":"320","suppressedMessages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","suppressedMessages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325"},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329"},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},"C:\\Users\\think\\git\\bleuauction_fe\\src\\index.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\App.js",["334","335","336","337","338","339","340","341"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios, { formToJSON } from 'axios';\r\nimport './App.css';\r\nimport Header from './components/Common/Header';\r\nimport Footer from './components/Common/Footer';\r\nimport Home from './routes/Home';\r\nimport SideBar from './components/Common/SideBar';\r\nimport { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\r\nimport Test from './components/Test/Test';\r\nimport Test2 from './components/Test/test2';\r\nimport LoginPage from './components/Auth/LoginPage';\r\nimport RegisterPage from './components/Auth/RegisterPage';\r\nimport MenuList from './components/Menu/MenuList';\r\nimport MenuRegisterationForm from './components/Menu/MenuRegisterationForm';\r\nimport StoreList from './components/Market/StoreList';\r\nimport MarketDetailPage from './components/Market/MarketDetailPage';\r\nimport StoreInfoDetail from './components/Market/StoreInfoDetail';\r\nimport ReviewForm from './components/Review/ReviewForm';\r\nimport MyPage from './components/MyPage/MyPage';\r\nimport UserEditPage from './components/MyPage/UserEditPage';\r\nimport MyOrder from './components/MyPage/MyOrder';\r\nimport StoreItemDailyPrice from './components/StoreItemDailyPrice/StoreItemDailyPrice';\r\nimport UserProvider from './components/Auth/UserContext';\r\nimport StoreItemRegister from './components/MyPage/StoreItemRegister'\r\nimport Payment from './components/Pay/Pay';\r\nimport StoreRegisterPage from './components/MyPage/StoreRegisterPage';\r\n// import AdminPage from './components/MyPage/AdminPage';\r\nimport MenuEdit from './components/MyPage/MenuEdit';\r\nimport NoticeList from './components/Notice/NoticeList';\r\nimport NoticeDetail from './components/Notice/NoticeDetail';\r\nimport { useUser } from './components/Auth/UserContext';\r\nimport StoreMyPage from './components/MyPage/StoreItemRegister'; // StoreMyPage 컴포넌트 파일의 경로에 따라 수정\r\nimport { sendAxiosRequest } from './components/utility/common';\r\nimport StoreItemAdd from  './components/StoreItemDailyPrice/StoreItemAdd';\r\nimport NoticeRegisterationForm from  './components/Admin/NoticeRegisterationForm';\r\nimport AdminNoticeList from  './components/Admin/AdminNoticeList';\r\nimport AdminNoticeDetail from  './components/Admin/AdminNoticeDetail';\r\nimport OrderMenuList from './components/MyPage/OrderMenuList';\r\nimport StoreOrder from './components/MyPage/StoreOrder';\r\nimport MenuDetail from './components/MyPage/MenuDetail';\r\nimport StoreEditPage from './components/MyPage/StoreEdit';\r\n\r\n\r\nfunction App() {\r\n\r\n  const { user, login } = useUser();\r\n\r\n\r\n  // useEffect(() => {\r\n  // if (localStorage.getItem('memberEmail') !== null) {\r\n  // const saveUser = {\r\n  //   'memberEmail': localStorage.getItem('memberEmail'),\r\n  //   'memberPwd': localStorage.getItem('memberPwd')\r\n  // };\r\n\r\n  //   if (saveUser !== null) {\r\n  //     sendAxiosRequest(\"/api/member/login\", 'POST', formToJSON(saveUser), response => {\r\n  //       //   //   console.log(response.data);\r\n  //       console.log(localStorage.getItem('memberEmail'));\r\n  //       console.log(localStorage.getItem('memberPwd'));\r\n  //       // if (response.data.loginUser !== null) {\r\n  //         login(response.data.loginUser)\r\n  //       // }\r\n  //       // login(saveUser);\r\n  //       //     login(localStorage.getItem('data'));\r\n  //       //     // console.log(user);\r\n  //       //   // }, error => {\r\n  //         //     // console.log(error);\r\n  //       });\r\n  //     }\r\n  //   }\r\n  //   }, []);\r\n\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <div className='App'>\r\n        {/* <div>{hello}</div> */}\r\n        <RoutingComponent />\r\n      </div>\r\n    </Router>\r\n  );\r\n\r\n}\r\n\r\nfunction RoutingComponent() {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      {location.pathname !== \"/login\" && location.pathname !== \"/register\" && <Header />}\r\n      <Routes>\r\n        <Route path=\"/login\" element={<LoginPage />} />\r\n        <Route path=\"/register\" element={<RegisterPage />} />\r\n        <Route path=\"/\" exact={true} element={<Home />} />\r\n        <Route path=\"/store/list\" element={<StoreList />} />\r\n        <Route path=\"/api/test\" element={<Test />} />\r\n        <Route path=\"/api/test2\" element={<Test2 />} />\r\n        <Route path=\"/menulist\" element={<MenuList />} />\r\n        <Route path=\"/reviewregister\" element={<ReviewForm />} />\r\n        <Route path=\"/market/detail\" element={<MarketDetailPage />} />\r\n        <Route path=\"/mypage\" element={<MyPage />} />\r\n        <Route path=\"/mypage/store/edit\" element={<StoreEditPage />} />\r\n        <Route path=\"/storeRegister\" element={<StoreRegisterPage />} />\r\n        <Route path=\"/useredit\" element={<UserEditPage />} />\r\n        <Route path=\"/menuEdit\" element={<MenuEdit />} />\r\n        <Route path=\"/my-orders\" element={<MyOrder />} />\r\n        <Route path=\"/StoreItemDailyPrice\" element={<StoreItemDailyPrice />} />\r\n        <Route path=\"/MenuRegisterationForm\" element={<MenuRegisterationForm />} />\r\n        <Route path=\"/notice/list\" element={<NoticeList />} />\r\n        <Route path=\"/notice/detail/:noticeNo\" element={<NoticeDetail />} />\r\n        <Route path=\"/storemypage\" element={<StoreMyPage />} />\r\n        <Route path=\"/storeItemRegister\" element={<StoreItemRegister />} />\r\n        <Route path=\"/StoreItemAdd\" element={<StoreItemAdd />} />\r\n        <Route path=\"/pay\" element={<Payment />} />\r\n        <Route path=\"/StoreInfoDetail\" element={<StoreInfoDetail />} />\r\n        <Route path=\"/menuDetail\" element={<MenuDetail />} />\r\n        <Route path=\"/admin/notice/register\" element={<NoticeRegisterationForm />} />\r\n        <Route path=\"/admin/notice/list\" element={<AdminNoticeList />} />\r\n        <Route path=\"/admin/notice/detail/:noticeNo\" element={<AdminNoticeDetail />} />\r\n        <Route path=\"/mypage/ordermenu/detail/:orderNo\" element={<OrderMenuList />} />\r\n        <Route path=\"/order/detail/:orderNo\" element={<OrderMenuList />} />\r\n        <Route path=\"/order-confirmation\" element={<StoreOrder />} />\r\n      </Routes>\r\n      {location.pathname !== \"/login\" && location.pathname !== \"/register\" && <SideBar />}\r\n      {location.pathname !== \"/login\" && location.pathname !== \"/register\" && <Footer />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\reportWebVitals.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\UserContext.js",["342","343"],[],"import { createContext, useContext, useState } from \"react\";\r\nimport { getAccessToken } from \"../utility/common\";\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst UserContext = createContext();\r\n\r\nexport const useUser = () => {\r\n  return useContext(UserContext);\r\n};\r\n\r\nexport default function UserProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = (userData) => {\r\n    // 로그인 로직을 구현\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    // 로그아웃 로직을 구현\r\n    setUser(null);\r\n  };\r\n\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n}\r\n\r\n\r\n// const Context = createContext({\r\n//     loggedUser: {\r\n//         username: '',\r\n//         email: '',\r\n//         first_name: '',\r\n//     },\r\n//     loggedIn: false,\r\n//     setLoggedUser: () => {},\r\n//     setLoggedIn: () => {}\r\n// });\r\n\r\n// export default Context;\r\n\r\n// const ContextProvider = ({children}) => {\r\n\r\n//   const setLoggedUser = (data) => {\r\n//       setState(prevState => (\r\n//           {\r\n//               ...prevState,\r\n//               loggedUser: data\r\n//           }\r\n//       ))\r\n//   }\r\n\r\n//   const setLoggedIn = () => {\r\n//       setState(prevState => (\r\n//           {\r\n//               ...prevState, \r\n//               loggedIn: !prevState.loggedIn\r\n//           }\r\n//       ))\r\n//   }\r\n\r\n//   const initialState = {\r\n//       loggedUser: {},\r\n//       loggedIn: false,\r\n//       setLoggedUser,\r\n//       setLoggedIn\r\n//   }\r\n\r\n//   const [state, setState] = useState(initialState);\r\n\r\n//   return (\r\n//       <Context.Provider value={state}>\r\n//           {children}\r\n//       </Context.Provider>\r\n//   )\r\n// }","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\LoginPage.js",["344","345","346","347","348","349"],[],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Box from '@mui/material/Box';\r\nimport Link from '@mui/material/Link';\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { formToJSON } from 'axios';\r\nimport { useState, useContext } from 'react';\r\nimport { useUser } from './UserContext';\r\nimport { isOpenNow, sendAxiosRequest, isTokenExpired } from '../utility/common';\r\nimport axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nfunction LoginPage() {\r\n  const navigate = useNavigate();\r\n  const {user, login} = useUser();\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.currentTarget);\r\n\r\n    const loginRequest = {\r\n      memberEmail: data.get('memberEmail'),\r\n      memberPwd: data.get('memberPwd')\r\n    };\r\n\r\n    sendAxiosRequest('/api/member/login', 'POST', loginRequest, response => {\r\n      const repDataList = response.data;\r\n      console.log('repDataList',repDataList);\r\n\r\n      if (repDataList) {\r\n        const accessToken = response.data.accessToken;\r\n        const refreshToken = response.data.refreshToken;\r\n        const loginUser = response.data.loginUser;\r\n        login(loginUser);\r\n        if (!isTokenExpired(accessToken) && !isTokenExpired(refreshToken)) {\r\n          sessionStorage.setItem('accessToken', accessToken);\r\n          localStorage.setItem('refreshToken', refreshToken);\r\n\r\n          const decodedAccessToken = jwtDecode(accessToken);\r\n          alert(\"'\" + decodedAccessToken.memberName + \"' 회원님 BLEU AUCTION에 오신 것을 환영합니다!\");\r\n          navigate('/');\r\n        }\r\n      }\r\n\r\n    }, error => console.log(error), 'application/json');\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <Grid container component=\"main\" sx={{ height: '100vh' }}>\r\n        <CssBaseline />\r\n        <Grid\r\n          item\r\n          xs={false}\r\n          sm={4}\r\n          md={7}\r\n          sx={{\r\n            backgroundImage: 'url(/images/login.png)',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundColor: (t) =>\r\n              t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center',\r\n          }}\r\n        />\r\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n          <Box\r\n            sx={{\r\n              my: 27,\r\n              mx: 4,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              안녕하세요 블루옥션입니다.\r\n            </Typography>\r\n            <Box component=\"form\" sx={{ mt: 1 }} noValidate onSubmit={handleSubmit}>\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"memberEmail\"\r\n\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                InputProps={{ style: { borderRadius: '30px' } }}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"memberPwd\"\r\n\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                InputProps={{ style: { borderRadius: '30px' } }}\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                sx={{ mt: 3, mb: 2, borderRadius: '30px' }} // borderRadius 추가\r\n              >\r\n                Login\r\n              </Button>\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                sx={{\r\n                  mt: 3,\r\n                  mb: 2,\r\n                  height: '40px', // 원하는 높이로 설정\r\n                  width: '100%', // LOGIN 버튼과 동일한 너비로 설정\r\n                  borderRadius: '30px',\r\n                  backgroundColor: '#FFEB00', // 카카오 노란색\r\n                  '&:hover': {\r\n                    backgroundColor: '#FFD600', // 노란색의 어두운 톤으로 hover 효과 추가\r\n                  },\r\n                }}\r\n              >\r\n                <img\r\n                  src=\"/images/kakao_login_medium_wide.png\" // 이미지 경로 수정\r\n                  alt=\"kakao-login\"\r\n                  style={{ height: '150%', width: '150%', objectFit: 'contain' }} // objectFit 속성 추가\r\n                />\r\n               </Button>\r\n                  <Grid container sx={{ mt: 2, justifyContent: 'flex-end' }}>\r\n                    <Grid item xs={6}>\r\n                      <Link href=\"/register\" variant=\"body2\">\r\n                        {\"회원가입\"}\r\n                      </Link>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Box>\r\n              </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Auth\\RegisterPage.js",["350","351","352"],[],"import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { isOpenNow, sendAxiosRequest } from '../utility/common';\r\n\r\n// import DaumPostcode from 'react-daum-postcode';\r\n\r\n\r\n\r\n\r\nfunction RegisterPage() {\r\n\r\n  // const [showPostcode, setShowPostcode] = useState(false);\r\n\r\n  //   const handleAddress = (data) => {\r\n  //     handleChange({\r\n  //         target: {\r\n  //             name: \"zip\",\r\n  //             value: data.zonecode\r\n  //         }\r\n  //     });\r\n  //     handleChange({\r\n  //         target: {\r\n  //             name: \"address\",\r\n  //             value: data.address\r\n  //         }\r\n  //     });\r\n  //     setShowPostcode(false); // 주소 선택 후, 우편번호 찾기 창을 닫습니다.\r\n  // };\r\n\r\n  const useForm = (initialValues) => {\r\n    const [values, setValues] = useState(initialValues);  // values는 폼 컨트롤의 상태를 나타냄, initialValues로 초기 설정\r\n    const handleChange = (e) => {   //폼 컨트롤의 onChange 이벤트 핸들러\r\n      const { name, value } = e.target;\r\n      setValues({\r\n        ...values,\r\n        [name]: value,\r\n      });\r\n    };\r\n    return [values, handleChange];\r\n  };\r\n\r\n\r\n\r\n  // const [values, handleChange] = useForm({ //useForm은 초기 값 initialValues를 인수로 받음,  그 상태와 상태를 변경하는 함수를 반환하는 useForm 훅을 호출\r\n  //   email: '',\r\n  //   password: '',\r\n  //   name: '',\r\n  //   phone: '',\r\n  //   zip: '',\r\n  //   address: '',\r\n  //   detailAddress: '',\r\n  //   bank: '',\r\n  //   accountNumber: '',\r\n  //   accountType: '',\r\n  // });\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // const requestData = { //객체는 폼에서 사용자가 입력한 데이터를 서버로 전송하기 위해 준비되는 데이터 구조\r\n  //   memberCategory: values.accountType,\r\n  //   memberEmail: values.email,      //values 객체의 email 속성 값을 requestData 객체의 email 속성에 할당\r\n  //   memberPwd: values.password,\r\n  //   memberName: values.name,\r\n  //   memberPhone: values.phone,\r\n  //   memberZipcode: values.zip,\r\n  //   memberAddr: values.address,\r\n  //   memberDetailAddr: values.detailAddress,\r\n  //   memberBank: values.bank,\r\n  //   memberAccount: values.accountNumber,\r\n  // };\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    let formData = new FormData(e.target);\r\n    let formObj = formToJSON(formData);\r\n    sendAxiosRequest('/api/member/signup', 'POST', formObj, response => {\r\n      console.log('응답값:', response.data);\r\n      alert('회원가입에 성공하셨습니다!');\r\n      navigate('/');\r\n    },\r\n      error => {\r\n        console.error('API 호출 중 에러 발생: ', error);\r\n        alert('회원가입에 실패하셨습니다!');\r\n      }\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div style={styles.background}>\r\n      <div style={styles.logoContainer}>\r\n        <img src=\"/images/logo.png\" alt=\"BLEU AUCTION\" style={styles.logo} />\r\n      </div>\r\n      <div style={styles.container}>\r\n        <form onSubmit={handleSubmit} style={styles.form}>\r\n          <input style={styles.input} type=\"text\" name=\"memberName\" placeholder=\"이름\" />\r\n          <input style={styles.input} type=\"email\" name=\"memberEmail\" placeholder=\"이메일\" />\r\n          <input style={styles.input} type=\"password\" name=\"memberPwd\" placeholder=\"비밀번호\" />\r\n          <input style={styles.input} type=\"text\" name=\"memberPhone\" placeholder=\"전화번호\" />\r\n          {/* {showPostcode && (\r\n                <DaumPostcode\r\n                    onComplete={handleAddress}\r\n                    autoClose={true}\r\n                />\r\n            )} */}\r\n          <input style={styles.input} type=\"text\" name=\"memberZipcode\" placeholder=\"우편번호\" />\r\n          {/* <button onClick={() => setShowPostcode(true)} style={{...styles.button, marginBottom: '10px'}}>우편번호 찾기</button> */}\r\n          <input style={styles.input} type=\"text\" name=\"memberAddr\" placeholder=\"기본주소\" />\r\n          <input style={styles.input} type=\"text\" name=\"memberDetailAddr\" placeholder=\"상세주소\" />\r\n          <input style={styles.input} type=\"text\" name=\"memberBacnk\" placeholder=\"은행\" />\r\n          <input style={styles.input} type=\"text\" name=\"memberAccount\" placeholder=\"계좌번호\" />\r\n          <div style={styles.accountTypeContainer}>\r\n            <label style={styles.accountTypeLabel}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"memberCategory\"\r\n                value=\"M\"\r\n                style={styles.accountTypeInput}\r\n              />\r\n              개인\r\n            </label>\r\n            <label style={styles.accountTypeLabel}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"memberCategory\"\r\n                value=\"S\"\r\n                style={styles.accountTypeInput}\r\n              />\r\n              기업\r\n            </label>\r\n          </div>\r\n          <button type=\"submit\" style={styles.submitButton}>회원 가입</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  background: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    background: 'var(--Blue, linear-gradient(180deg, #0575E6 0%, #02298A 84.79%, #021B79 100%))',\r\n  },\r\n  logoContainer: {\r\n    marginBottom: '10px',\r\n  },\r\n  logo: {\r\n    width: '200px',\r\n  },\r\n  container: {\r\n    background: 'white',\r\n    padding: '20px',\r\n    borderRadius: '8px',\r\n    width: '400px',\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  toggleButtons: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    marginBottom: '20px',\r\n    borderRadius: '8px',\r\n  },\r\n  button: {\r\n    padding: '10px 20px',\r\n    cursor: 'pointer',\r\n    border: 'none',\r\n    backgroundColor: 'white',\r\n    borderRadius: '10px',\r\n  },\r\n  activeButton: {\r\n    padding: '10px 20px',\r\n    cursor: 'pointer',\r\n    border: 'none',\r\n    backgroundColor: 'lightgray',\r\n    borderRadius: '10px',\r\n  },\r\n  input: {\r\n    padding: '10px',\r\n    margin: '5px 0',\r\n    borderRadius: '8px',\r\n    border: '1px solid #ccc',\r\n    outline: 'none',\r\n  },\r\n  submitButton: {\r\n    padding: '10px 20px',\r\n    cursor: 'pointer',\r\n    backgroundColor: '#0575E6',\r\n    border: 'none',\r\n    borderRadius: '8px',\r\n    color: 'white',\r\n\r\n  },\r\n  accountTypeContainer: {\r\n    marginBottom: '10px',\r\n  },\r\n  accountTypeLabel: {\r\n    marginRight: '10px',\r\n    cursor: 'pointer',\r\n  },\r\n  accountTypeInput: {\r\n    marginRight: '5px',\r\n  },\r\n};\r\n\r\nexport default RegisterPage;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuList.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\SideBar.js",["353"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport styles from './SideBar.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport Chat from '../Chat/Chat';\r\nimport OS from '../OS/OS';\r\n\r\nfunction SideBar() {\r\n\r\n    const [isRaysModalOpen, setIsRaysModalOpen] = useState(false);\r\n    const [isChatModalOpen, setIsChatModalOpen] = useState(false);\r\n    const [scrollPosition, setScrollPosition] = useState(window.pageYOffset);\r\n\r\n    const openRaysModal = () => {\r\n        setIsRaysModalOpen(true);\r\n    };\r\n\r\n    const closeRaysModal = () => {\r\n        setIsRaysModalOpen(false);\r\n    };\r\n\r\n    const toggleChatModal = () => {\r\n        setIsChatModalOpen(!isChatModalOpen);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            setScrollPosition(window.pageYOffset);\r\n        };\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            className={styles.sideBarBox}\r\n            style={{ top: `${200 + scrollPosition}px` }} // 여기서 움직임을 처리합니다.\r\n        >\r\n            <Link to=\"/StoreItemAdd\">등록</Link>\r\n            <Link to=\"#\" onClick={openRaysModal}>\r\n                오늘의 <br />방사능\r\n            </Link>\r\n            <Link to=\"#\" onClick={toggleChatModal}>\r\n                챗봇\r\n            </Link>\r\n            {isRaysModalOpen && <OS closeModal={closeRaysModal} />}\r\n            {isChatModalOpen && <Chat closeModal={toggleChatModal} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SideBar;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\Header.js",["354","355","356","357","358","359","360"],[],"import React, { useEffect, useState } from 'react';\r\nimport { axios, formToJSON } from 'axios';\r\nimport styles from './Header.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport {\r\n  redirectLogin,\r\n  getAccessToken,\r\n  getLoginUserInfo,\r\n  logout,\r\n  accessTokenRefresh,\r\n  isNullUndefinedOrEmpty,\r\n  mainUrl,\r\n  isTokenExpired\r\n} from '../utility/common';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n\r\nfunction Header() {\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n  const refreshToken = localStorage.getItem('refreshToken');\r\n  const decodedAccToken = isTokenExpired(accessToken) ? null : jwtDecode(accessToken);\r\n  const decodedRefToken = isTokenExpired(refreshToken) ? null : jwtDecode(refreshToken);\r\n  const currentURL = window.location.href;\r\n  const [tokenMember, setTokenMember] = useState(accessToken);\r\n\r\n  console.log('Header.js => accessToken 디코딩값 : ', decodedAccToken);\r\n  console.log('Header.js => refreshToken 디코딩값 : ', decodedRefToken);\r\n  // console.log('(currentURL.replace(mainUrl)', currentURL.replace(mainUrl, ''));\r\n\r\n  useEffect(() => {\r\n    if (isTokenExpired(accessToken)) { // accessToken이 유효하지 않은경우\r\n      console.log('Header.js => 엑세스 토큰 만료에 따른 재발급!');\r\n      console.log('accessTokenRefresh(): ', accessTokenRefresh()); // refreshsToken으로 accessToken 재발급\r\n\r\n    } else if (isTokenExpired(accessToken) && isTokenExpired(refreshToken)) { // accessToken 과 refreshsToken이 모두 유효하지 않은경우\r\n      console.log('Header.js => accessToken (X) && refreshToken (X)');\r\n      redirectLogin(); // 로그인 필요 => 로그인 시 refreshsToken으로 accessToken 재발급\r\n    } else { // 둘다 유효하거나 accessToken만 유효한 경우\r\n      console.log('Header.js => accessToken만 유효 OR accessToken과 refreshToken 모두 유효');\r\n      setTokenMember(getAccessToken('d')); //엑세스토큰 디코딩 한 값 으로 tokenMember 객체 초기화\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.headerBox}>\r\n        <div className={styles.headerTop}>\r\n          <Link to=\"/\" id={styles.headerTitle}>BLEU AUCTION</Link>\r\n          <form className={styles.headerSearchForm}>\r\n            <input className={styles.headerSearchBox} type='text'\r\n              placeholder='검색어를 입력하세요.'></input>\r\n            <button id={styles.searchBtn} type=\"submit\"></button>\r\n          </form>\r\n          {isNullUndefinedOrEmpty(tokenMember) ? (\r\n            <>\r\n              <Link to='/mypage'>{tokenMember.memberName}님 환영합니다!</Link>\r\n              <Link onClick={logout}>로그아웃</Link>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Link to='/login'>로그인</Link>\r\n              <Link to='/register'>회원가입</Link>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n\r\n        <div className={styles.headerBottom}>\r\n          <Link to='/'>추천</Link>\r\n          <Link to='/store/list'>시장</Link>\r\n          <Link to='/StoreItemDailyPrice'>시세</Link>\r\n          <Link to='/notice/list'>공지사항</Link>\r\n        </div>\r\n        <hr></hr>\r\n      </div>\r\n      <div className={styles.hidden_block}></div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Test\\Test.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\routes\\Home.js",["361","362","363","364","365","366","367","368","369","370"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Announce from '../components/MainPage/Announce';\r\nimport StoreListItem from '../components/Market/StoreListItem';\r\nimport StoreHome from '../components/StoreHome';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport { accessTokenRefresh, redirectLogin, isNullUndefinedOrEmpty, sendAxiosRequest } from '../components/utility/common';\r\nimport { accordionSummaryClasses } from '@mui/material';\r\n\r\nfunction Home() {\r\n\r\n  const [stores, setStores] = useState([]);\r\n  const [pageRowCount, setPageRowCount] = useState([6]);\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n\r\n  /* 토큰 들고 요청 예시 */\r\n  // useEffect(() => {\r\n  //   if (isNullUndefinedOrEmpty(accessToken)) {   // AccessToken이 있을 때만 요청 \r\n\r\n  //     // 요청 헤더에 엑세스 토큰 추가\r\n  //     const config = {\r\n  //       headers: {\r\n  //         'Authorization': `Bearer ${accessToken}`\r\n  //       }\r\n  //     };\r\n\r\n  //     console.log('Home.js headers: ', config);\r\n\r\n  //     axios.get(`/api/store/list?pageLowCount=${pageRowCount}`, config)\r\n  //       .then(response => {\r\n  //         console.log('response.data: ', response.data);\r\n  //         setStores(response.data);\r\n  //       })\r\n  //       .catch(error => {\r\n  //         const errorData = error.response.data;\r\n  //         console.log('errorData: ', errorData);\r\n  //         if (errorData === 'E') { // 토큰이 있으나 만료\r\n  //           console.log('여기야');\r\n  //           accessTokenRefresh();\r\n  //         } else if (errorData === 'I') { // 토큰이 아예없거나 유효하지 않은 토큰\r\n  //           redirectLogin();\r\n  //         }\r\n  //       });\r\n  //   }\r\n  // }, [accessToken]); // accessToken이 변경될 때만 실행\r\n\r\n  useEffect(() => {\r\n    sendAxiosRequest(`/api/store/list?pageLowCount=${pageRowCount}`, 'GET', null, response => {\r\n      console.log('/api/store/list => response.data: ' + response.data);\r\n      if (isNullUndefinedOrEmpty(response.data)) {\r\n        setStores(response.data);\r\n      }\r\n    }, error => console.log(error), null, 'UA');\r\n\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n      <Announce />\r\n      {stores && (\r\n        <>\r\n          <StoreHome stores={stores} />\r\n          <button onClick={() => { console.log(stores); window.sessionStorage.getItem(\"memberNo\") }}>더보기-></button>\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Home;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Common\\Footer.js",["371","372","373","374"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport styles from './Footer.module.css';\r\n\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className={styles.footerBox}>\r\n      <img src='/images/LogoPage.png' />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuRegisterationForm.js",["375","376","377","378","379"],[],"import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { sendAxiosRequest } from '../utility/common';\r\nimport './MenuRegistrationForm.css';\r\n\r\n\r\nfunction MenuRegisterationForm() {\r\n  const [menu, setMenu] = useState({\r\n    menuImage: null,\r\n    menuName: '',\r\n    menuSize: '',\r\n    menuPrice: '',\r\n    menuContent: '',\r\n  });\r\n\r\n  const [previewImage, setPreviewImage] = useState(null); // 이미지 미리보기 URL\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (!file) {\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      // 이미지 파일 데이터를 상태에 저장하고 미리보기 설정\r\n      setMenu({ ...menu, menuImage: file });\r\n      setPreviewImage(reader.result);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setMenu({ ...menu, [name]: value });\r\n  };\r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let formData = new FormData(e.target);\r\n    let formObj = formToJSON(formData);\r\n    sendAxiosRequest('/api/menu/new', 'POST', formObj, response => {\r\n      console.log('메뉴 응답값:', response.data);\r\n      alert('메뉴등록에 성공하셨습니다!');\r\n      navigate('/');\r\n    },\r\n      error => {\r\n        console.error('API 호출 중 에러 발생: ', error);\r\n        alert('메뉴등록에 실패하셨습니다!');\r\n      }\r\n    )\r\n  };\r\n\r\n  return (\r\n    // <div className=\"container\">\r\n    //   <form onSubmit={handleSubmit} className=\"form\">\r\n    //   <h2>메뉴 등록</h2>\r\n    //     <div>\r\n    //       <label>메뉴 이미지:</label>\r\n    //       <input className=\"input\" type=\"file\" onChange={handleImageChange} />\r\n    //       {previewImage && (\r\n    //         <div>\r\n    //           <h3>이미지 미리보기:</h3>\r\n    //           <img src={previewImage} alt=\"미리보기\" style={{ height: '100px' }} /> {/* 미리보기 이미지 크기는 조절 가능 */}\r\n    //         </div>\r\n    //       )}\r\n    //     </div>\r\n    //     <div>\r\n    //       <label>메뉴 이름:</label>\r\n    //       <input className=\"input\" type=\"text\" name=\"menuName\" value={menu.menuName} onChange={handleChange} />\r\n    //     </div>\r\n    //     <div>\r\n    //       <label>메뉴 사이즈:</label>\r\n    //       <select \r\n    //         name=\"menuSize\" \r\n    //         value={menu.menuSize} \r\n    //         onChange={handleChange} \r\n    //         className=\"input\"\r\n    //       >\r\n    //         <option value=\"\">-- 선택 --</option>\r\n    //         <option value=\"S\">소 (S)</option>\r\n    //         <option value=\"M\">중 (M)</option>\r\n    //         <option value=\"L\">대 (L)</option>\r\n    //       </select>        \r\n    //       </div>\r\n    //     <div>\r\n    //       <label>메뉴 가격:</label>\r\n    //       <input className=\"input\" type=\"number\" name=\"menuPrice\" value={menu.menuPrice} onChange={handleChange} />\r\n    //     </div>\r\n    //     <div>\r\n    //       <label>메뉴 설명:</label>\r\n    //       <textarea name=\"menuContent\" value={menu.menuContent} onChange={handleChange} />\r\n    //     </div>\r\n    //     <button type=\"submit\" className=\"submitButton\">메뉴 등록</button>\r\n    //   </form>\r\n    // </div>\r\n    <div class=\"container\">\r\n    <form action=\"/submit-menu\" method=\"post\" enctype=\"multipart/form-data\" class=\"form\"> \r\n        <h2>메뉴 등록</h2>\r\n        \r\n        <div class=\"input-group\">\r\n            <label for=\"menuImage\">메뉴 이미지</label>\r\n            <input class=\"input\" type=\"file\" id=\"menuImage\" name=\"menuImage\" placeholder=\"메뉴 이미지\"/>\r\n           \r\n        </div>\r\n\r\n        <div class=\"input-group\">\r\n            \r\n            <input class=\"input\" type=\"text\" id=\"menuName\" name=\"menuName\" placeholder=\"메뉴이름\"/>\r\n        </div>\r\n\r\n        <div class=\"input-group\">\r\n\r\n            <select class=\"input\" id=\"menuSize\" name=\"menuSize\">\r\n                <option value=\"\">-- 메뉴 사이즈 --</option>\r\n                <option value=\"S\">소 (S)</option>\r\n                <option value=\"M\">중 (M)</option>\r\n                <option value=\"L\">대 (L)</option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"input-group\">\r\n            <input class=\"input\" type=\"number\" id=\"menuPrice\" name=\"menuPrice\" placeholder=\"메뉴가격\"/>\r\n        </div>\r\n\r\n        <div class=\"input-group\">\r\n            <textarea class=\"input\" id=\"menuContent\" name=\"menuContent\" placeholder=\"메뉴설명\"></textarea>\r\n        </div>\r\n        \r\n        <button type=\"submit\" class=\"submitButton\">메뉴 등록</button>\r\n    </form>\r\n</div>\r\n  );\r\n}\r\n\r\n// const styles = {\r\n//   container: {\r\n//     display: 'flex',\r\n//     justifyContent: 'center',\r\n//     alignItems: 'center',\r\n//     height: '30vh',\r\n//   },\r\n//   form: {\r\n//     display: 'flex',\r\n//     flexDirection: 'column',\r\n//     alignItems: 'center', // 폼 내용을 중앙 정렬합니다.\r\n//     padding: '20px',  // 내부 패딩을 추가합니다.\r\n//     borderRadius: '12px',  // 모서리를 둥글게 합니다.\r\n//     boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)', // 약간의 그림자 효과를 추가합니다.\r\n//     background: 'white', // 배경색을 흰색으로 설정합니다.\r\n//     width: '800px', \r\n//   },\r\n//   input: {\r\n//     padding: '10px',\r\n//     margin: '5px 0',\r\n//     borderRadius: '6px',\r\n//     border: '1px solid #ccc',\r\n//     outline: 'none',\r\n//     width: '300px', \r\n//   },\r\n//   submitButton: {\r\n//     padding: '10px 20px',\r\n//     cursor: 'pointer',\r\n//     backgroundColor: '#0575E6',\r\n//     border: 'none',\r\n//     borderRadius: '8px',\r\n//     color: 'white',\r\n//   },\r\n// }\r\n\r\n\r\nexport default MenuRegisterationForm;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\TabBar.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreList.js",["380","381","382","383","384","385","386","387","388","389","390","391"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Announce from '../MainPage/Announce';\r\nimport Coupon from '../MainPage/Announce';\r\nimport Category from '../MainPage/Category';\r\nimport StoreListItem from './StoreListItem';\r\nimport StoreHome from '../StoreHome';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport { isOpenNow, sendAxiosRequest, scrollMoveTop, getAccessToken, isTokenExpired } from '../utility/common';\r\nimport styles from './StoreList.module.css'\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nfunction StoreList() {\r\n  const pageLowCount = 3;\r\n  let [startPageNo, setStartPageNo] = useState(0);\r\n  let [storeList, setStoreList] = useState([]);\r\n  let [newAddLength, setNewAddLength] = useState(pageLowCount);\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n\r\n  useEffect(() => {\r\n    sendAxiosRequest(`/api/store/list`, 'GET', null, response => {\r\n      console.log('/api/store/list의 응답값 => ', response.data);\r\n      setStoreList(response.data);\r\n      setNewAddLength(response.data.length);\r\n      setStartPageNo(Math.floor(newAddLength / pageLowCount));\r\n    }, error => console.log(error), null, accessToken);\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      console.log(newAddLength);\r\n      if (newAddLength < pageLowCount) {\r\n        return;\r\n      }\r\n      if (\r\n        window.innerHeight + document.documentElement.scrollTop >=\r\n        document.documentElement.scrollHeight - 100\r\n      ) {\r\n\r\n        console.log(\"스크롤 이벤트 핸들러 작동\");\r\n        sendAxiosRequest(`/api/store/list?startPage=${startPageNo}`, 'GET', null, response => {\r\n          console.log(`/api/store/list?startPage=${startPageNo}의 응답값 => `, response.data);\r\n          let addReviewList = response.data;\r\n          setNewAddLength(addReviewList.length);\r\n          let newReviewList = [...storeList, ...addReviewList];\r\n          setStartPageNo(Math.floor(newReviewList.length / pageLowCount));\r\n          setStoreList(newReviewList);\r\n        }, error => console.log(error), null, accessToken)\r\n      }\r\n    };\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    }\r\n  }, [startPageNo, storeList]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Announce />\r\n      <div className={styles.storeListBox}>\r\n        {storeList.map((store, index) => (\r\n          <StoreListItem key={index} data={store} />\r\n        ))}\r\n      </div>\r\n      <div id=\"topBtnDiv\" onClick={scrollMoveTop}>↑</div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StoreList;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\MarketDetailPage.js",["392","393"],[],"import React, { useState } from 'react';\r\nimport TabBar from './TabBar';\r\nimport MenuList from '../Menu/MenuList';\r\nimport Button from '../MainPage/Button';\r\nimport StoreInfo from './StoreInfo';\r\nimport ReviewSection from '../Review/ReviewSection';\r\nimport { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { sendAxiosRequest } from '../utility/common';\r\nimport OrderModal from './OrderModal';\r\nimport { useUser } from '../Auth/UserContext';\r\n\r\n\r\nfunction MarketDetailPage() {\r\n\r\n  \r\n  const [activeTab, setActiveTab] = useState('info');\r\n  const [modal, setModal] = useState(false);\r\n  const [menuData, setMenuData] = useState([]); // 메뉴 데이터를 저장할 상태\r\n  const accessToken = (sessionStorage.getItem('accessToken')) ? sessionStorage.getItem('accessToken'): null;\r\n\r\n  const location = useLocation(); // 추가된 부분\r\n  const store = location.state; // 추가된 부분\r\n\r\n\r\n  const storeInfo = {\r\n    image: '/images/storeimage.png',\r\n    name: '대원수산',\r\n    location: '서울특별시 동작구 노들로 674 노량진수산시장 , 2층 활어 2-15호 강변상회',\r\n    hours: '월요일 (오늘) 09:00 ~ 21:00',\r\n    phone: '02-1234-5678',\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (store && store.storeNo) {\r\n      // 상점 번호가 있는 경우에만 요청을 실행합니다.\r\n      sendAxiosRequest(`/api/menu/${store.storeNo}`, 'GET', null, response => {\r\n        if (response.data && response.data.length > 0) {\r\n          console.log(response.data);\r\n          setMenuData(response.data.map((menu) => ({\r\n            ...menu, \r\n            count: 0\r\n          }))); // 받아온 데이터로 상태를 업데이트합니다.\r\n          console.log(menuData);\r\n        }\r\n      }, error => {\r\n        console.error(\"An error occurred while fetching the menus:\", error);\r\n      }, null, accessToken);\r\n    }\r\n  }, [])\r\n\r\n\r\n\r\n  const handleOrderClick = () => {\r\n    // alert('주문하기 버튼 클릭!');\r\n    setModal(true);\r\n    console.log(modal);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModal(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div style={infoContainerStyle}>\r\n      <StoreInfo storeInfo={storeInfo} store={store} />\r\n      </div>\r\n      <div style={tabContainerStyle}>\r\n        <TabBar activeTab={activeTab} onTabClick={setActiveTab} />\r\n        {activeTab === 'menu' && <Button onClick={handleOrderClick} buttonText=\"주문하기\" />}\r\n        <OrderModal store={store} menus={menuData} isOpen={modal} onClose={closeModal} setMenuData={setMenuData} />\r\n      </div>\r\n      {activeTab === 'info' && <p>여기에 가게정보를 표시합니다.</p>}\r\n      {activeTab === 'menu' && <MenuList menus={menuData}/>}\r\n      {activeTab === 'review' && <ReviewSection />}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nconst infoContainerStyle = {\r\n  marginBottom: '0px', // 예시: 아래쪽 마진을 추가하여 공간 생성\r\n};\r\n\r\nconst tabContainerStyle = {\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'center'\r\n};\r\n\r\n\r\nexport default MarketDetailPage;",["394"],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreMyPage.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreItemRegister.js",["395","396","397","398","399","400","401","402","403","404","405"],[],"import '../utility/Common.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Form, Card, Button } from 'react-bootstrap';\r\nimport { json, useNavigate } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\nimport {\r\n  sendAxiosRequest,\r\n  addEventToElements,\r\n  removeEventToElements,\r\n  isTokenExpired, getAccessToken, isNullUndefinedOrEmpty, isNotNullOrNonEmpty\r\n} from '../utility/common';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nfunction formatNumber(number) {\r\n  return number.toLocaleString();\r\n}\r\n\r\nfunction updateItemNames() {\r\n  const itemCodeSelect = document.getElementById(\"itemCode\");\r\n  const itemNameSelect = document.getElementById(\"itemName\");\r\n\r\n  const selectedValue = itemCodeSelect.value;\r\n  const itemNames = itemNameSelect;\r\n\r\n  const options = {\r\n    'N': ['품목구분 항목을 먼저 선택해주세요.'],\r\n    'S': ['광어', '우럭', '도미', '방어', '전복', '참치', '연어', '가리비', '전갱이'],\r\n    'F': ['광어', '우럭', '도미', '방어', '전복', '참치', '연어', '가리비', '전갱이'],\r\n    'C': ['새우'],\r\n    'M': ['가리비', '오징어'],\r\n    'E': ['기타']\r\n  };\r\n\r\n  itemNames.innerHTML = '';\r\n  options[selectedValue].forEach(fishName => {\r\n    const option = document.createElement('option');\r\n    option.value = fishName;\r\n    option.textContent = fishName;\r\n    itemNames.appendChild(option);\r\n  });\r\n}\r\n\r\nconst codeToTextMap = {\r\n  'ES': '동해',\r\n  'WS': '서해',\r\n  'SS': '남해',\r\n  'JJ': '제주',\r\n  'WD': '완도',\r\n  'JP': '일본',\r\n  'CN': '중국',\r\n  'RU': '러시아',\r\n  'NW': '노르웨이',\r\n  'ET': '기타'\r\n};\r\n\r\n\r\nfunction updateOriginStatus() {\r\n  const originStatusSelects = document.querySelectorAll(\"[name=originStatus]\");\r\n  const originPlaceStatusSelect = document.getElementById(\"originPlaceStatus\");\r\n\r\n  let selectedValue;\r\n  originStatusSelects.forEach(input => {\r\n    if (input.checked) {\r\n      selectedValue = input.value;\r\n    }\r\n  })\r\n\r\n  const originPlaceNames = originPlaceStatusSelect;\r\n\r\n  const options = {\r\n    'D': ['ES', 'WS', 'SS', 'JJ', 'WD', 'ET'],\r\n    'I': ['JP', 'CN', 'RU', 'NW', 'ET']\r\n  };\r\n\r\n  originPlaceNames.innerHTML = '';\r\n  options[selectedValue].forEach(regionCode => {\r\n    const option = document.createElement('option');\r\n    option.value = regionCode;\r\n    console.log(regionCode);\r\n    option.textContent = codeToTextMap[regionCode] || regionCode;\r\n    originPlaceNames.appendChild(option);\r\n  });\r\n}\r\n\r\n\r\nfunction insertSidp(tokenMember) {\r\n  let form = document.getElementById('sidpForm');\r\n  let formData = new FormData(form);\r\n  let jsonObj = formToJSON(formData);\r\n  jsonObj.dailyPrice = formatNumber(jsonObj.dailyPrice).replaceAll(',', '');\r\n  console.log('jsonObj: ', jsonObj);\r\n  sendAxiosRequest('api/sidp/add', 'POST', jsonObj, response => {\r\n    if (isNotNullOrNonEmpty(response.data)) {\r\n      console.log('response.data: ', response.data);\r\n      alert('품목 시세를 성공적으로 등록하였습니다.');\r\n      window.location.reload();\r\n    } else {\r\n      alert('품목 등록에 실패하였습니다. 잠시후 다시 시도해주세요!');\r\n    }\r\n\r\n\r\n  }, erorr => console.log(console.log(erorr)), null, tokenMember);\r\n}\r\n\r\n\r\n\r\n\r\nfunction StoreItemRegister() {\r\n  const [tokenMember] = useState(getAccessToken('a'));\r\n  const [dailyPrice, setDailyPrice] = useState(''); // 사용자 입력을 저장할 상태\r\n  const [minPrice] = useState(0); // 최소가격\r\n  const [maxPrice] = useState(1000000); // 최대가격\r\n  const [store] = useState(1);\r\n\r\n  console.log('tokenMember: ', tokenMember);\r\n\r\n  function handleDailyPriceChange(event) {\r\n    let inputNumber = parseInt(event.target.value.replace(/,/g, ''), 10);\r\n\r\n    // 최소 및 최대 값 적용\r\n    if (isNaN(inputNumber) || inputNumber < minPrice) {\r\n      inputNumber = minPrice;\r\n    } else if (inputNumber > maxPrice) {\r\n      alert('입력 가능한 최대 가격을 초과하였습니다!')\r\n      inputNumber = '';\r\n    }\r\n    setDailyPrice(formatNumber(inputNumber));\r\n  }\r\n  // useEffect 내에서 updateItemNames를 호출\r\n  useEffect(() => {\r\n    const itemCodeSelect = document.getElementById(\"itemCode\");\r\n    const originStatusSelects = document.querySelectorAll(\"[name=originStatus]\");\r\n\r\n    itemCodeSelect.addEventListener('change', updateItemNames);\r\n    addEventToElements('change', updateOriginStatus, originStatusSelects);\r\n\r\n    return () => {\r\n      itemCodeSelect.removeEventListener('change', updateItemNames);\r\n      removeEventToElements('change', updateOriginStatus, originStatusSelects);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div className='ba-cursor-pointer-div'>\r\n      <form id='sidpForm' className='ba-form-container'>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"2\">품목 시세등록 </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <th><label htmlFor=\"daliyPriceDate\">기준날짜</label></th>\r\n              <td>\r\n                <input name='storeNo' type='text' hidden value='1' />\r\n                <input type='date' name='daliyPriceDate' />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label htmlFor=\"item_code\">품목구분</label></th>\r\n              <td>\r\n                <select name='itemCode' id=\"itemCode\">\r\n                  <option selected value=\"N\">선택안함</option>\r\n                  <option value=\"S\">생선(횟감)</option>\r\n                  <option value=\"F\">생선(비횟감)</option>\r\n                  <option value=\"C\">갑각류</option>\r\n                  <option value=\"M\">패류</option>\r\n                  <option value=\"E\">기타</option>\r\n                </select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label htmlFor=\"itemName\">품목</label></th>\r\n              <td>\r\n                <select name='itemName' id=\"itemName\">\r\n                  <option selected>품목구분 항목을 먼저 선택해주세요.</option>\r\n                </select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label>크기</label></th>\r\n              <td>\r\n                <label htmlFor=\"itemSizeS\">\r\n                  <input type=\"radio\" id=\"itemSizeS\" name=\"itemSize\" value=\"S\" /> 소\r\n                </label>\r\n                <label htmlFor=\"itemSizeM\">\r\n                  <input type=\"radio\" id=\"itemSizeM\" name=\"itemSize\" value=\"M\" /> 중\r\n                </label>\r\n                <label htmlFor=\"itemSizeL\">\r\n                  <input type=\"radio\" id=\"itemSizeL\" name=\"itemSize\" value=\"L\" /> 대\r\n                </label>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label>원산지</label></th>\r\n              <td>\r\n                <label htmlFor=\"originD\">\r\n                  <input type=\"radio\" id=\"originD\" name=\"originStatus\" value=\"D\" /> 국내산\r\n                </label>\r\n                <label htmlFor=\"originI\">\r\n                  <input type=\"radio\" id=\"originI\" name=\"originStatus\" value=\"I\" /> 수입산\r\n                </label>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label htmlFor=\"originPlaceStatus\">지역명</label></th>\r\n              <td>\r\n                <select name=\"originPlaceStatus\" id=\"originPlaceStatus\">\r\n                  <option selected>원산지 항목을 먼저 선택해주세요.</option>\r\n                </select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label>자연산/양식</label></th>\r\n              <td>\r\n                <label htmlFor=\"wildFarmStatusW\">\r\n                  <input type=\"radio\" id=\"wildFarmStatusW\" name=\"wildFarmStatus\" value=\"W\" /> 자연산\r\n                </label>\r\n                <label htmlFor=\"wildFarmStatusF\">\r\n                  <input type=\"radio\" id=\"wildFarmStatusF\" name=\"wildFarmStatus\" value=\"F\" /> 양식\r\n                </label>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th><label>금일가격</label></th>\r\n              <td>\r\n                <label htmlFor=\"dailPrice\">\r\n                  <input type=\"text\" id=\"dailyPrice\" name=\"dailyPrice\" value={dailyPrice}\r\n                    onChange={handleDailyPriceChange} />(원)\r\n                </label>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <button type=\"button\" className='ba-btn ba-margin-tb50' onClick={() => insertSidp(tokenMember)}>품목시세 등록</button>\r\n      </form>\r\n    </div >\r\n\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default StoreItemRegister;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\UserEditPage.js",["406","407","408"],[],"import React, { useState, useEffect } from 'react';\r\nimport InputField from './InputField';\r\nimport { sendAxiosMultipartRequest, sendAxiosRequest } from '../utility/common';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nfunction UserEditPage() {\r\n  const [currentImage, setCurrentImage] = useState('http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg');\r\n  const [member, setMember] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n    sendAxiosRequest('api/member/loginCheck', 'GET', null, response => {\r\n      let loginUser = response.data.loginUser;\r\n      console.log(loginUser);\r\n      setMember(loginUser);\r\n      setCurrentImage('http://kr.object.ncloudstorage.com/bleuauction-bucket/' + loginUser.memberAttaches[0].filePath + loginUser.memberAttaches[0].saveFilename);\r\n    }, error => console.log(error))\r\n  }, []);\r\n\r\n\r\n  function memberUpdate() {\r\n    let memberForm = document.getElementById('memberForm');\r\n    const formData = new FormData(memberForm);\r\n    const updateMemberRequest = JSON.stringify(formData);\r\n\r\n    const updateMemberBlob = new Blob([updateMemberRequest], { type: 'application/json' });\r\n    formData.append('updateMemberRequest', updateMemberBlob);\r\n\r\n    const fileInput = document.getElementById('imageInput');\r\n\r\n    if (fileInput && fileInput.files[0]) {\r\n      console.log('조건만족하나?');\r\n      formData.append('profileImage', fileInput.files[0]);\r\n    }\r\n\r\n    console.log('formData: ', formData);\r\n    console.log('formData: ', formToJSON(formData));\r\n    axios.post('/api/member/update', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    })\r\n      .then(response => {\r\n        console.log('서버 응답:', response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error('에러 발생:', error);\r\n      });\r\n  }\r\n\r\n\r\n  const handleImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setCurrentImage(e.target.result);\r\n      };\r\n      reader.readAsDataURL(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n\r\n  const handleImageClick = () => {\r\n    document.getElementById('imageInput').click();\r\n  };\r\n\r\n\r\n  if (member === null) {\r\n    return <div>Loading...</div>; // 로딩 표시\r\n  } else {\r\n    return (\r\n      <div style={styles.container}>\r\n        <form id='memberForm' onClick={handleImageChange} style={styles.form}>\r\n          <img src={currentImage} alt={member.memberName} style={styles.profilePicture} onClick={handleImageClick} />\r\n          <br />\r\n          <button type=\"button\" style={styles.buttonStyle} onClick={() => { document.getElementById('imageInput').click() }}>사진 등록</button>\r\n          {/* <form onClick={handleImageChange} style={styles.form}> */}\r\n          <input type=\"file\" style={{ display: 'none' }} id=\"imageInput\" onChange={handleImageChange}\r\n          />\r\n          <div style={styles.formSection}>\r\n            <h1 style={styles.title}>일반 회원 정보 수정</h1>\r\n            <InputField type=\"text\" name=\"memberName\" value={member.memberName} onChange={e => setMember({ ...member, memberName: e.target.value })} placeholder=\"Name\" />\r\n            <InputField type=\"email\" name=\"memberEmail\" value={member.memberEmail} onChange={e => setMember({ ...member, memberEmail: e.target.value })} placeholder=\"Email\" />\r\n            <InputField type=\"password\" name=\"memberPwd\" value={member.memberPwd} onChange={e => setMember({ ...member, memberPwd: e.target.value })} placeholder=\"Password\" />\r\n            <InputField type=\"text\" name=\"memberPhone\" value={member.memberPhone} onChange={e => setMember({ ...member, memberPhone: e.target.value })} placeholder=\"Phone Number\" />\r\n            <InputField type=\"text\" name=\"memberZipcode\" value={member.memberZipcode} onChange={e => setMember({ ...member, memberZipcode: e.target.value })} placeholder=\"Postal Code\" />\r\n            <InputField type=\"text\" name=\"memberAddr\" value={member.memberAddr} onChange={e => setMember({ ...member, memberAddr: e.target.value })} placeholder=\"Primary Address\" />\r\n            <InputField type=\"text\" name=\"memberDetailAddr\" value={member.memberDetailAddr} onChange={e => setMember({ ...member, memberDetailAddr: e.target.value })} placeholder=\"Detail Address\" />\r\n            <InputField type=\"text\" name=\"memberBank\" value={member.memberBank} onChange={e => setMember({ ...member, memberBank: e.target.value })} placeholder=\"Bank\" />\r\n            <InputField type=\"text\" name=\"memberAccount\" value={member.memberAccount} onChange={e => setMember({ ...member, memberAccount: e.target.value })} placeholder=\"Account Number\" />\r\n            <button type='button' onClick={memberUpdate} style={styles.buttonStyle}>수정</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'row', // 행 방향으로 아이템들을 정렬합니다.\r\n    alignItems: 'flex-start', // 아이템들을 컨테이너의 시작 부분에 정렬합니다.\r\n    // margin: '0 auto', // 컨테이너를 화면 가운데 정렬합니다.\r\n    padding: '20px', // 컨테이너의 패딩을 추가합니다.\r\n    // width: '50%',\r\n    justifyContent: 'center'\r\n  },\r\n  profilePicture: {\r\n    width: '200px',\r\n    height: '200px',\r\n    borderRadius: '100px',\r\n    marginBottom: '20px',\r\n    alignSelf: 'flex-start', // 사진을 컨테이너의 시작 부분에 정렬합니다.\r\n  },\r\n  formSection: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n    marginLeft: '20px', // 프로필 사진과 폼 섹션 사이에 마진을 추가합니다.\r\n  },\r\n  title: {\r\n    fontSize: '24px', // 원하는 폰트 크기로 설정합니다.\r\n    fontWeight: 'bold', // 제목의 폰트를 굵게 설정합니다.\r\n    marginBottom: '20px', // 제목 아래에 마진을 추가합니다.\r\n    textAlign: 'center',\r\n  },\r\n  buttonStyle: {\r\n    border: 'none',\r\n    margin: '10px 0',\r\n    padding: '10px',\r\n    borderRadius: '4px',\r\n    backgroundColor: '#C4C4C433',\r\n    textAlign: 'center', // 수정: 텍스트를 중앙에 배치합니다.\r\n    // boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.2)',\r\n    width: '500px',\r\n    cursor: 'pointer',\r\n\r\n  }\r\n};\r\n\r\nexport default UserEditPage;\r\n\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreRegisterPage.js",["409","410"],[],"import React, { useState } from 'react';\r\n// import { Form, Card, Button } from 'react-bootstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\n\r\n\r\n\r\nfunction StoreRegisterPage() {\r\n\r\n\r\n  const navigate = useNavigate();\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log(e.target);\r\n    let formData = new FormData(e.target);\r\n\r\n    let jsonObj = formToJSON(formData);\r\n\r\n    console.log(jsonObj);\r\n\r\n    // POST 요청 생성\r\n    axios.post('/api/store/signup', jsonObj, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then(response => {\r\n        // 성공적으로 서버에서 응답을 받은 경우의 처리\r\n        console.log('등록된 가게 정보:', response.data);\r\n        alert('가게 등록 성공!')\r\n        navigate('/mypage');\r\n\r\n      })\r\n      .catch(error => {\r\n        // 오류가 발생한 경우의 처리\r\n        console.error('에러 발생:', error);\r\n      });\r\n\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <form onSubmit={handleSubmit} style={styles.form}>\r\n      <div>\r\n        <h2>가게 등록 </h2>\r\n        </div>\r\n        <div>\r\n        <label>시장명: </label>\r\n        <input style={styles.input} type=\"text\" name=\"marketName\" />\r\n        </div>\r\n        <div>\r\n        <label>가게명: </label>\r\n        <input style={styles.input} type=\"text\" name=\"storeName\" />\r\n        </div>\r\n        <div>\r\n        <label>사업자등록번호: </label>\r\n        <input style={styles.input} type=\"text\" name=\"licenseNo\" />\r\n        </div>\r\n        <div>\r\n        <label>우편번호: </label>\r\n        <input style={styles.input} type=\"text\" name=\"storeZipcode\" />\r\n        </div>\r\n        <div>\r\n        <label>기본주소: </label>\r\n        <input style={styles.input} type=\"text\" name=\"storeAddr\" />\r\n        </div>\r\n        <div>\r\n        <label>상세주소: </label>\r\n        <input style={styles.input} type=\"text\" name=\"storeDetailAddr\" />\r\n        </div>\r\n\r\n\r\n        <div>\r\n          <label>평일운영시작시간: </label>\r\n          <input style={styles.input} type=\"time\" name=\"weekdayStartTime\" />\r\n        </div>\r\n        <div>\r\n          <label>평일운영종료시간: </label>\r\n          <input style={styles.input} type=\"time\" name=\"weekdayEndTime\" />\r\n        </div>\r\n        <div>\r\n          <label>주말운영시작시간: </label>\r\n          <input style={styles.input} type=\"time\" name=\"weekendStartTime\" />\r\n        </div>\r\n        <div>\r\n          <label>주말운영종료시간: </label>\r\n          <input style={styles.input} type=\"time\" name=\"weekendEndTime\" />\r\n        </div>\r\n\r\n        <button type=\"submit\" style={styles.submitButton}> 가게 등록</button>\r\n\r\n      </form>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '60vh',\r\n  },\r\n  card: {\r\n    width: '50%', \r\n    boxShadow: '0 8px 30px rgba(0, 0, 0, 0.12)',\r\n    borderRadius: '20px', \r\n    padding: '20px', \r\n  },\r\n\r\n  title: {\r\n    fontSize: '1.8rem',\r\n    marginBottom: '30px',\r\n    textAlign: 'center',\r\n  },\r\n  button: {\r\n    background: 'linear-gradient(to right, #6a11cb, #2575fc)',\r\n    border: 'none',\r\n    padding: '10px 20px',\r\n    color: 'white',\r\n    borderRadius: '25px',\r\n    transition: 'all 0.2s',\r\n    cursor: 'pointer',\r\n    transition: 'all 0.3s', \r\n    '&:hover': {\r\n      transform: 'scale(1.1)', \r\n    },\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center', // 폼 내용을 중앙 정렬합니다.\r\n    padding: '20px',  // 내부 패딩을 추가합니다.\r\n    borderRadius: '12px',  // 모서리를 둥글게 합니다.\r\n    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)', // 약간의 그림자 효과를 추가합니다.\r\n    background: 'white', // 배경색을 흰색으로 설정합니다.\r\n    width: '800px', \r\n  },\r\n  input: {\r\n    padding: '10px',\r\n    margin: '5px 0',\r\n    borderRadius: '6px',\r\n    border: '1px solid #ccc',\r\n    outline: 'none',\r\n    width: '300px', \r\n  },\r\n  submitButton: {\r\n    padding: '10px 20px',\r\n    cursor: 'pointer',\r\n    backgroundColor: '#0575E6',\r\n    border: 'none',\r\n    borderRadius: '8px',\r\n    color: 'white',\r\n  },\r\n};\r\n\r\n\r\n\r\nexport default StoreRegisterPage;\r\n\r\n\r\n\r\n// import * as React from 'react';\r\n// import { Button, TextField, Box, Typography, Container } from '@mui/material';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import axios from 'axios';\r\n\r\n// function StoreRegisterPage() {\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     const formData = new FormData(e.currentTarget);\r\n//     // 폼 데이터를 JSON으로 변환하는 로직이 필요합니다.\r\n//     // formToJSON 함수를 정의하거나 다른 방법을 사용하세요.\r\n\r\n//     // JSON 객체 생성\r\n//     let jsonObj = {}; \r\n//     formData.forEach((value, key) => { jsonObj[key] = value });\r\n\r\n//     console.log(jsonObj);\r\n\r\n//     // POST 요청 생성\r\n//     axios.post('/api/store/signup', jsonObj, {\r\n//       headers: {\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     })\r\n//       .then(response => {\r\n//         console.log('등록된 가게 정보:', response.data);\r\n//         // navigate('/path-after-success'); // 성공 후 리디렉션 경로\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('에러 발생:', error);\r\n//       });\r\n//   };\r\n\r\n//   // Material-UI 컴포넌트를 사용한 레이아웃\r\n//   return (\r\n//     <Container component=\"main\" maxWidth=\"xs\">\r\n//       <Box\r\n//         sx={{\r\n//           marginTop: 8,\r\n//           display: 'flex',\r\n//           flexDirection: 'column',\r\n//           alignItems: 'center',\r\n//         }}\r\n//       >\r\n//         <Typography component=\"h1\" variant=\"h5\">\r\n//           가게 등록\r\n//         </Typography>\r\n//         <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n//           <TextField\r\n//             margin=\"normal\"\r\n//             required\r\n//             fullWidth\r\n//             id=\"marketName\"\r\n//             label=\"시장명\"\r\n//             name=\"marketName\"\r\n//             autoComplete=\"market-name\"\r\n//             autoFocus\r\n//           />\r\n//           {/* 다른 필드들도 이와 유사한 형태로 추가합니다. */}\r\n//           {/* 예시: */}\r\n//           <TextField\r\n//             margin=\"normal\"\r\n//             required\r\n//             fullWidth\r\n//             name=\"storeName\"\r\n//             label=\"가게명\"\r\n//             id=\"storeName\"\r\n//             autoComplete=\"store-name\"\r\n//           />\r\n//           {/* 나머지 필드를 여기에 추가 */}\r\n//           {/* ... */}\r\n//           <Button\r\n//             type=\"submit\"\r\n//             fullWidth\r\n//             variant=\"contained\"\r\n//             sx={{ mt: 3, mb: 2 }}\r\n//           >\r\n//             가게 등록\r\n//           </Button>\r\n//         </Box>\r\n//       </Box>\r\n//     </Container>\r\n//   );\r\n// }\r\n\r\n// export default StoreRegisterPage;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyPage.js",["411","412","413","414","415","416"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { isOpenNow, sendAxiosRequest, isTokenExpired } from '../utility/common';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nfunction MyPage() {\r\n  // 사용자 정보를 상태 혹은 API로부터 불러오기.\r\n  // 예시\r\n  // const user = {\r\n  //   name: 'Rose',\r\n  //   email: 'rose@example.com',\r\n  //   accountType: 'personal', // or 'business'\r\n  //   profilePicture: '/images/rose.png',\r\n  // };\r\n\r\n  const defaultImage = '/images/rose.png';\r\n\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n  const member = isTokenExpired(accessToken) ? null : jwtDecode(accessToken);\r\n\r\n  const outerContainerStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    margin: '0',\r\n  };\r\n\r\n  const styles = {\r\n    container: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      justifyContent: 'center', // 가운데 정렬 추가\r\n      padding: '20px',\r\n      width: '70%',\r\n      height: '30vh', // 화면 높이의 100%를 차지하도록 설정\r\n    },\r\n    profileSection: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      marginBottom: '20px',\r\n      width: '100%', //\r\n    },\r\n    profilePicture: {\r\n      width: '110px',\r\n      height: '110px',\r\n      borderRadius: '80px',\r\n      marginRight: '20px', // 사진과 텍스트 사이의 간격을 조정\r\n    },\r\n    userInfo: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'flex-start', // 왼쪽 정렬\r\n    },\r\n    linkSection: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      width: '100%',\r\n    },\r\n    linkContainer: {\r\n      margin: '20px 0',\r\n      padding: '20px',\r\n      borderRadius: '4px',\r\n      backgroundColor: '#ffffff',\r\n      textAlign: 'center',\r\n      boxShadow: '0px 0px 15px rgba(0, 0, 0, 0.2)',\r\n    },\r\n    link: {\r\n      textDecoration: 'none',\r\n      color: 'black',\r\n      fontWeight: 'bold',\r\n    },\r\n    button: {\r\n      display: 'inline-block',\r\n      padding: '10px 20px',\r\n      margin: '5px 0',\r\n      backgroundColor: '#4CAF50',\r\n      color: 'white',\r\n      textDecoration: 'none',\r\n      textAlign: 'center',\r\n      borderRadius: '8px',\r\n    },\r\n  };\r\n  const personalLinks = (\r\n    <>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/useredit\" style={styles.link}>회원정보 수정</Link>\r\n      </div>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/my-orders\" style={styles.link}>마이 오더</Link>\r\n      </div>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/\" style={styles.link}>찜하기</Link>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  // 비즈니스 사용자용 링크\r\n  const businessLinks = (\r\n    <>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/useredit\" style={styles.link}>회원정보 수정</Link>\r\n      </div>\r\n      <div style={styles.linkContainer}>\r\n          <Link\r\n            to= \"/menuEdit\"\r\n            style={styles.link}\r\n          >\r\n            메뉴 관리\r\n      </Link>\r\n      </div>\r\n        <div style={styles.linkContainer}>\r\n            <Link to=\"/\" style={styles.link}>품목 관리</Link>\r\n      </div>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/order-confirmation\" style={styles.link}>주문확인</Link>\r\n      </div>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/storeRegister\" style={styles.link}>가게등록</Link>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  // 관리자 사용자용 링크\r\n  const adminLinks = (\r\n    <>\r\n      <div style={styles.linkContainer}>\r\n        <Link to=\"/admin/notice/list\" style={styles.link}>공지사항 관리</Link>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n\r\n  if (member === null) {\r\n    return <div>Loading...</div>; // 로딩 표시\r\n  } else {\r\n    return (\r\n      <div style={outerContainerStyle}>\r\n        <div style={styles.container}>\r\n          <div style={styles.profileSection}>\r\n            <img src={defaultImage} alt={member.memberName} style={styles.profilePicture} />\r\n            <div style={styles.userInfo}>\r\n              <h2>{member.memberName}</h2>\r\n              <p> {member.memberCategory === 'M' ? '개인' :\r\n                member.memberCategory === 'S' ? '비즈니스' :\r\n                  member.memberCategory === 'A' ? '관리자' : '기타'}\r\n                계정</p>\r\n              <p>{member.memberEmail}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div style={styles.linkSection}>\r\n            {/* member.memberCategory 값에 따라 링크 섹션을 조건부로 렌더링합니다. */}\r\n            {/* member.memberCategory 값에 따라 링크 섹션을 조건부로 렌더링합니다. */}\r\n            {member.memberCategory === 'M' ? personalLinks :\r\n              member.memberCategory === 'S' ? businessLinks :\r\n                member.memberCategory === 'A' ? adminLinks : undefined}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nexport default MyPage;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyOrder.js",["417"],[],"import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport MyOrderContent from './MyOrderContent';\r\n\r\n\r\nfunction MyOrder() {\r\n\r\n  const order1 = {\r\n    orderPrice:'10000',\r\n    recipientPhone:'01011111111',\r\n    recipientName: '김성주',\r\n    recipientZipcode: '1111',\r\n    recipientAddr: '기본주소',\r\n    recipientDetailAddr: '상세주소',\r\n    regDatetime: '2023-09-01 15:00:00',\r\n    mdfDatetime: '2023-09-01 15:00:00',\r\n    orderStatus: 'Y'\r\n  }\r\n\r\n  const order2 = {\r\n    orderPrice:'20000',\r\n    recipientPhone:'01011111111',\r\n    recipientName: '김성주2',\r\n    recipientZipcode: '1111',\r\n    recipientAddr: '기본주소',\r\n    recipientDetailAddr: '상세주소',\r\n    regDatetime: '2023-09-01 15:00:00',\r\n    mdfDatetime: '2023-09-01 15:00:00',\r\n    orderStatus: 'N'\r\n  }\r\n\r\n  const order3 = {\r\n    orderPrice:'10000',\r\n    recipientPhone:'01011111111',\r\n    recipientName: '김성주',\r\n    recipientZipcode: '1111',\r\n    recipientAddr: '기본주소',\r\n    recipientDetailAddr: '상세주소',\r\n    regDatetime: '2023-09-01 15:00:00',\r\n    mdfDatetime: '2023-09-01 15:00:00',\r\n    orderStatus: 'Y'\r\n  }\r\n\r\n\r\n  const orderlist = [order1, order2, order3]\r\n\r\n  const [selected, setSelected] = useState([]);\r\n\r\n  const onClick = (e) => {\r\n    setSelected(e.target.value);\r\n  };\r\n\r\n  useEffect(()=>{\r\n    console.log(selected);\r\n  }, [selected])\r\n\r\n  // let content = (selected === 'Delivered') ? \r\n  // <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'N')}/> : \r\n  // <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'Y')} />;\r\n\r\n  let content = (\r\n    (selected === 'Delivered') ? <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'Y')}/> : \r\n    (selected === 'Canceled') ? <MyOrderContent orderlist = {orderlist.filter((item)=>item.orderStatus === 'N')} />:\r\n    null\r\n  )\r\n\r\n  return (\r\n      <>\r\n        <h2>마이오더</h2>\r\n        <div>\r\n          <button value={'Delivered'} onClick = {onClick}>Delivered</button>\r\n          <button value={'Canceled'} onClick = {onClick}>Canceled</button>\r\n        </div>\r\n        <div>\r\n          {/* <MyOrderContent /> */}\r\n          {content}\r\n        </div>\r\n      \r\n      \r\n      </>\r\n  );\r\n};\r\n\r\nexport default MyOrder;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreItemDailyPrice\\StoreItemDailyPrice.js",["418","419","420","421","422","423","424","425","426","427"],[],"import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\r\nimport './StoreItemDailyPrice.css';\r\nimport { sendAxiosRequest, accessTokenRefresh, redirectLogin, isTokenExpired, getAccessToken, isNullUndefinedOrEmpty } from '../utility/common';\r\n\r\n// handsontable라이브러리 관련 import\r\nimport 'handsontable/dist/handsontable.full.min.css';\r\nimport Handsontable from 'handsontable/base';\r\nimport { registerAllModules } from 'handsontable/registry';\r\nimport { HotTable } from '@handsontable/react';\r\nimport { registerRenderer, textRenderer } from 'handsontable/renderers';\r\n\r\nregisterAllModules();\r\n\r\nconst sizeOptions = {\r\n  S: '소 (0KG~1KG 이하)',\r\n  M: '중 (1KG~3KG 이하)',\r\n  L: '대 (3KG 초과)',\r\n};\r\n\r\nconst categoryOptions = {\r\n  S: '생선(횟감)',\r\n  F: '생선(비횟감)',\r\n  C: '갑각류',\r\n  M: '패류',\r\n  E: '기타',\r\n};\r\n\r\nconst originOptions = {\r\n  D: '국내산',\r\n  I: '수입산',\r\n};\r\n\r\nconst originPlaceOptions = {\r\n  ES: '동해',\r\n  WS: '서해',\r\n  SS: '남해',\r\n  JJ: '제주',\r\n  WD: '완도',\r\n  JP: '일본',\r\n  CN: '중국',\r\n  RU: '러시아',\r\n  NW: '노르웨이',\r\n};\r\n\r\nconst wildFarmOptions = {\r\n  W: '자연산',\r\n  F: '양식',\r\n};\r\n\r\nconst recommendationItems = [\r\n  {\r\n    id: 1,\r\n    image: 'item1.jpg',\r\n    name: '추천 상품 1',\r\n  },\r\n  {\r\n    id: 2,\r\n    image: 'item2.jpg',\r\n    name: '추천 상품 2',\r\n  },\r\n];\r\n\r\n\r\nfunction firstRowRenderer(instance, td, row, col, prop, value, cellProperties) {\r\n  textRenderer.apply(this, arguments);\r\n  td.style.fontSize = '20px';\r\n  td.style.padding = '20px';\r\n  td.style.color = 'black';\r\n  td.style.border = 'solid 2px white';\r\n  td.style.background = '#f2f2f2';\r\n}\r\n\r\n\r\nfunction StoreItemDailyPrice() {\r\n  const [totalDailyPrice, setTotalDailyPrice] = useState(0);\r\n  const [averageDailyPrice, setAverageDailyPrice] = useState(0);\r\n  const [items, setItems] = useState([]);\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n\r\n\r\n  useEffect(() => {\r\n    if (!isTokenExpired(accessToken)) {   // AccessToken이 있을 때만 요청\r\n      sendAxiosRequest('/api/sidp/list', 'GET', null, response => {\r\n        if (response.data) {\r\n          let sidpList = response.data;\r\n          const columnData = sidpList.map((sidp) => sidp.dailyPrice);\r\n          const total = columnData.reduce((acc, current) => acc + current, 0);\r\n          const avg = total / (sidpList.length || 1); // 0으로 나누는 것을 방지\r\n\r\n          // 상태 업데이트\r\n          setTotalDailyPrice(total);\r\n          setAverageDailyPrice(avg);\r\n          setItems(sidpList);\r\n        }\r\n      }, error => {\r\n        if (error.response.data) {\r\n          const errorData = error.response.data;\r\n          console.log('errorData: ', errorData);\r\n          if (errorData === 'E') { // 토큰이 있으나 만료\r\n            accessTokenRefresh();\r\n          } else if (errorData === 'I') { // 토큰이 아예없거나 유효하지 않은 토큰\r\n            redirectLogin();\r\n          }\r\n        }\r\n      }, null, accessToken);\r\n    }\r\n  }, [accessToken]); // accessToken이 변경될 때만 실행\r\n\r\n  const transformedData = items.map((item) => {\r\n    return {\r\n      'daliyPriceDate': item.daliyPriceDate,\r\n      'itemCode': categoryOptions[item.itemCode],\r\n      'itemName': item.itemName,\r\n      'itemSize': sizeOptions[item.itemSize],\r\n      'wildFarmStatus': wildFarmOptions[item.wildFarmStatus],\r\n      'originStatus': originOptions[item.originStatus],\r\n      'originPlaceStatus': originPlaceOptions[item.originPlaceStatus],\r\n      'dailyPrice': item.dailyPrice,\r\n    };\r\n  });\r\n\r\n  // items 배열이 비어있을 때, 빈 행 추가\r\n  if (items.length === 0) {\r\n    transformedData.push({\r\n      'daliyPriceDate': '품목에 대한 시세 데이터가 존재하지 않습니다!',\r\n      'itemCode': '',\r\n      'itemName': '',\r\n      'itemSize': '',\r\n      'wildFarmStatus': '',\r\n      'originStatus': '',\r\n      'originPlaceStatus': '',\r\n      'dailyPrice': '',\r\n    });\r\n  }\r\n\r\n  console.log(items.length);\r\n  const mergeCells = items.length === 0 ? [\r\n    {\r\n      row: 0,\r\n      col: 0,\r\n      rowspan: 1,\r\n      colspan: 8,\r\n    }\r\n  ] : [];\r\n  console.log('transformedData: ', transformedData);\r\n\r\n  return (\r\n    <div className=\"daily-box\">\r\n      <h1>오늘의 시세</h1>\r\n      <br />\r\n      <div className=\"ba-price-list-div\">\r\n        <div>\r\n          <HotTable\r\n            mergeCells={mergeCells}\r\n            licenseKey=\"non-commercial-and-evaluation\"\r\n            colHeaders={['기준날짜', '품목구분', '품목명', '품목크기', '자연/양식', '국산/수입', '원산지', '품목가격(원)',]}\r\n            data={transformedData}\r\n            formattedAvg={'0,0,0'}\r\n            rowHeaders={true}\r\n            colWidths={[250, 200, 200, 300, 200, 250, 200, 250]}\r\n            columnHeaderHeight={50}\r\n            filters={true}\r\n            dropdownMenu={true}\r\n            customBorders={true}\r\n            settings={{\r\n              columnSorting: {\r\n                headerAction: true,\r\n                multiColumnSorting: true,\r\n                sortEmptyCells: false, // 빈 셀 정렬제외\r\n                indicator: true, // 정렬순서 표시\r\n                initialConfig: {\r\n                  column: 1,\r\n                  sortOrder: 'desc',\r\n                },\r\n              },\r\n              className: 'customFilterButtonExample1',\r\n              width: 'auto',\r\n              height: 'auto',\r\n              rowHeights: 60,\r\n              readOnly: true,\r\n              afterGetColHeader: function (col, th) {\r\n                var cellWidth = this.getColWidth(col); // 각 열 헤더의 배경색을 셀 넓이만큼 설정\r\n                th.style.backgroundColor = '#0056b3'; // 배경색을 변경하려면 원하는 색상으로 수정\r\n                th.style.color = 'white';\r\n                th.style.fontWeight = 'bold';\r\n                th.className = 'htMiddle';\r\n              },\r\n              afterGetRowHeader: function (row, th) {\r\n                th.style.backgroundColor = '#0056b3';\r\n                th.style.color = 'white';\r\n                th.style.fontWeight = 'bold';\r\n                th.style.fontSize = '20px';\r\n                th.className = 'htMiddle';\r\n              },\r\n              columns: [\r\n                {\r\n                  title: '기준날짜',\r\n                  type: 'date',\r\n                  className: 'htMiddle',\r\n                  dateFormat: 'YYYY-MM-DD',\r\n                  data: 'daliyPriceDate',\r\n                },\r\n                {\r\n                  title: '품목구분',\r\n                  type: 'text',\r\n                  className: 'htLeft htMiddle',\r\n                  data: 'itemCode',\r\n                },\r\n                {\r\n                  title: '품목명',\r\n                  type: 'text',\r\n                  className: 'htLeft htMiddle',\r\n                  data: 'itemName',\r\n                },\r\n                {\r\n                  title: '품목크기',\r\n                  type: 'text',\r\n                  className: 'htLeft htMiddle',\r\n                  data: 'itemSize',\r\n                },\r\n                {\r\n                  title: '자연/양식',\r\n                  type: 'text',\r\n                  className: 'htLeft htMiddle',\r\n                  data: 'wildFarmStatus',\r\n                },\r\n                {\r\n                  title: '국내산/수입산',\r\n                  type: 'text',\r\n                  className: 'htLeft htMiddle',\r\n                  data: 'originStatus',\r\n                },\r\n                {\r\n                  title: '원산지',\r\n                  type: 'text',\r\n                  data: 'originPlaceStatus',\r\n                  className: 'htLeft htMiddle',\r\n                },\r\n                {\r\n                  title: '품목가격(원)',\r\n                  type: 'numeric',\r\n                  data: 'dailyPrice',\r\n                  className: 'htRight htMiddle',\r\n                  numericFormat: {\r\n                    pattern: '0,0'\r\n                  }\r\n                },\r\n              ],\r\n              afterFilter() {\r\n                const handsontableInstance = this;\r\n                const filters = handsontableInstance.getPlugin('Filters');\r\n                console.log('filters: ', filters.filtersRowsMap.indexedValues);\r\n\r\n                let filteredList = filters.filtersRowsMap.indexedValues;\r\n\r\n\r\n                let total = 0;\r\n                let avg = 0;\r\n                let totalCnt = 0;\r\n                for (let i = 0; i < filteredList.length - 1; i++) {\r\n                  if (!filteredList[i]) {\r\n                    total += transformedData[i].dailyPrice;\r\n                    totalCnt++;\r\n                  }\r\n                }\r\n\r\n                avg = total / (totalCnt == 0 ? 1 : totalCnt);\r\n                console.log('total(합계): ', total);\r\n                console.log('avg(평균): ', avg);\r\n\r\n                setTotalDailyPrice(total);\r\n                setAverageDailyPrice(avg);\r\n              },\r\n            }}\r\n\r\n            cells={(row, col) => {\r\n              const cellProperties = {};\r\n              cellProperties.renderer = firstRowRenderer; // 사용자 정의 렌더러 함수를 셀에 적용\r\n              return cellProperties;\r\n            }}\r\n\r\n          />\r\n          <div className=\"ba-span-div\">\r\n            <span><strong>합계:</strong> {totalDailyPrice.toLocaleString()} (원)</span>\r\n            <span><strong>평균:</strong> {Math.floor(averageDailyPrice).toLocaleString()} (원)</span>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoreItemDailyPrice;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\utility\\common.js",["428"],[],"import axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\nimport { isValidDateValue } from \"@testing-library/user-event/dist/utils\";\r\n\r\nexport const mainUrl = 'http://localhost:3000';\r\n\r\nexport function isNotNullOrNonEmpty(value) {\r\n  if (value === null) {\r\n    return false;\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return value.length > 0;\r\n  }\r\n\r\n  if (typeof value === 'object') {\r\n    return Object.keys(value).length > 0;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/* 토큰 만료 체크 */\r\nexport function isTokenExpired(token) {\r\n  if (!isNullUndefinedOrEmpty(token)) {\r\n    return true;\r\n  }\r\n  const expirationTime = jwtDecode(token).exp * 1000;\r\n  const currentDate = Date.now();\r\n  return currentDate > expirationTime; // 토큰 만료 true 반환\r\n}\r\n\r\n\r\nexport function isNullUndefinedOrEmpty(value) {\r\n  const valueStr = value + '';\r\n  if (valueStr === 'null' || value === 'undefined' || /^\\s*$/.test(valueStr)) {\r\n    return null;\r\n  }\r\n  return value;\r\n}\r\n\r\n\r\nexport function redirectLogin() {\r\n  alert('세션이 만료되어 재로그인이 필요합니다!');\r\n  window.location.href = '/login';\r\n}\r\n\r\nexport function accessTokenRefresh() {\r\n  const refreshToken = localStorage.getItem('refreshToken');\r\n  console.log('accessTokenRefresh() => refreshToken:', refreshToken);\r\n\r\n  if (!isNullUndefinedOrEmpty(refreshToken)) {\r\n    redirectLogin();\r\n  }\r\n\r\n  // 서버로 리프레시 토큰을 사용하여 새 액세스 토큰을 요청\r\n  axios.post('/api/member/accTokRefresh', { refreshToken })\r\n    .then(response => {\r\n      console.log('/api/member/accTokRefresh => response: ', response);\r\n      const newAccessToken = response.data.accessToken;\r\n      if (!isNullUndefinedOrEmpty(newAccessToken)) {\r\n        redirectLogin();\r\n        return;\r\n      }\r\n      sessionStorage.setItem('accessToken', newAccessToken);\r\n      console.log('refreshToken으로 accessToken 재발급 완료! =>');\r\n    })\r\n    .catch(error => {\r\n      redirectLogin();\r\n    });\r\n}\r\n\r\n\r\nexport function logout() {\r\n  const isConfirmed = window.confirm('정말로 로그아웃 하시겠습니까?');\r\n\r\n  if (isConfirmed) {\r\n    sessionStorage.clear();\r\n    localStorage.clear();\r\n    alert('정상적으로 로그아웃 되었습니다!');\r\n    window.location.reload();\r\n  }\r\n}\r\n\r\nexport function getAccessToken(encodingOrDecodingType) {\r\n  encodingOrDecodingType = encodingOrDecodingType.toLowerCase();\r\n\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n\r\n  if (isNullUndefinedOrEmpty(accessToken)) {\r\n    if (encodingOrDecodingType === 'a') {\r\n      return accessToken;\r\n    } else if (encodingOrDecodingType === 'd') {\r\n      return jwtDecode(accessToken);\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function getLoginUserInfo(decodedToken) {\r\n  if (decodedToken != null) {\r\n    const { sub, memberName, memberEmail } = decodedToken;\r\n    return { sub, memberName, memberEmail };\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function sendAxiosRequest(url, method, data, successCallback, errorCallback, contentType, jwtToken) {\r\n  console.log('sendAxiosRequest의 요청 URL: ', url);\r\n  console.log('sendAxiosRequest의 요청 데이터: ', data);\r\n\r\n  const axiosConfig = {\r\n    timeout: 5000,\r\n    url: url,\r\n    method: method,\r\n  };\r\n\r\n  if (data) {\r\n    if (contentType === 'application/json') {\r\n      axiosConfig.headers = {\r\n        'Content-Type': contentType,\r\n        'Authorization': jwtToken !== 'UA' ? `Bearer ${jwtToken}` : 'UA',\r\n      };\r\n      // JSON 객체일시 문자열로 변환\r\n      axiosConfig.data = JSON.stringify(data);\r\n    } else {\r\n      axiosConfig.data = data;\r\n      axiosConfig.headers = {\r\n        'Authorization': jwtToken !== 'UA' ? `Bearer ${jwtToken}` : 'UA',\r\n      };\r\n    }\r\n  } else {\r\n    // 데이터가 없는 경우\r\n    axiosConfig.headers = {\r\n      'Authorization': jwtToken !== 'UA' ? `Bearer ${jwtToken}` : 'UA',\r\n    };\r\n  }\r\n\r\n  console.log('sendAxiosRequest().axiosConfig: ', axiosConfig);\r\n\r\n  axios(axiosConfig)\r\n    .then(successCallback)\r\n    .catch(errorCallback);\r\n}\r\n\r\n\r\nexport function sendAxiosMultipartRequest(url, formData, successCallback, errorCallback) {\r\n  console.log('sendAxiosMultipartRequest의 요청 URL: ', url);\r\n  console.log('sendAxiosMultipartRequest의 요청 데이터: ', formData);\r\n  const axiosConfig = {\r\n    timeout: 5000,\r\n    url: url,\r\n    method: 'POST',\r\n    data: formData,\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    }\r\n  };\r\n  axios(axiosConfig).then(successCallback).catch(errorCallback);\r\n}\r\n\r\n\r\nexport function dateFormatParse(date) {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  const hours = String(date.getHours()).padStart(2, '0');\r\n  const minutes = String(date.getMinutes()).padStart(2, '0');\r\n  const seconds = String(date.getSeconds()).padStart(2, '0');\r\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\nexport function handleInputChange(e, index, state, stateSetter) {\r\n  let { name, value } = e.target;\r\n  let deepCopyState = [...state];\r\n  deepCopyState[index] = {\r\n    ...deepCopyState[index],\r\n    [name]: value,\r\n  };\r\n  stateSetter(deepCopyState);\r\n}\r\n\r\nexport function scrollMoveTop() {\r\n  window.scrollTo({ top: 0, behavior: 'smooth' });\r\n}\r\n\r\n// 현재 일 기준 가게 시작, 종료 시간\r\nexport function startEndTimeInfo(store) {\r\n  const currentDate = new Date();\r\n  const dayOfWeek = currentDate.getDay();\r\n\r\n  let startTime;\r\n  let endTime;\r\n  if (dayOfWeek === 0 || dayOfWeek === 6) { // 주말이면\r\n    startTime = store.weekendStartTime;\r\n    endTime = store.weekendEndTime;\r\n  } else { // 평일이면\r\n    startTime = store.weekdayStartTime;\r\n    endTime = store.weekdayEndTime;\r\n  }\r\n\r\n  return [startTime, endTime];\r\n}\r\n\r\n\r\n// 가게 시작시간, 종료시간 기준으로 영업중인지 확인\r\nexport function isOpenNow(startTime, endTime) {\r\n  const currentDate = new Date();\r\n  const currentTimeMinutes = currentDate.getHours() * 60 + currentDate.getMinutes();\r\n  const start = startTime.split(':').map(Number);\r\n  const end = endTime.split(':').map(Number);\r\n\r\n  const startTimeMinutes = start[0] * 60 + start[1];\r\n  const endTimeMinutes = end[0] * 60 + end[1];\r\n\r\n  // O: 마감 C: 영업중\r\n  return currentTimeMinutes >= startTimeMinutes && currentTimeMinutes <= endTimeMinutes ? 'O' : 'C';\r\n}\r\n\r\n\r\n// 리스트(요소여러 개)에 이벤트 추가\r\nexport function addEventToElements(eventName, eventFunction, elements) {\r\n  for (let element of elements) {\r\n    element.addEventListener(eventName, eventFunction);\r\n  }\r\n}\r\n\r\n// 리스트(요소여러 개)에 이벤트 제거\r\nexport function removeEventToElements(eventName, eventFunction, elements) {\r\n  for (let element of elements) {\r\n    element.removeEventListener(eventName, eventFunction);\r\n  }\r\n}","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Pay\\Pay.js",["429","430","431","432"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n// import swal from 'sweetalert';\r\n// import { response } from 'express';\r\n// import { error } from 'console';\r\n\r\nconst Payment = () => {\r\n  useEffect(() => {\r\n    const jquery = document.createElement(\"script\");\r\n    jquery.src = \"http://code.jquery.com/jquery-1.12.4.min.js\";\r\n    const iamport = document.createElement(\"script\");\r\n    iamport.src = \"https://cdn.iamport.kr/v1/iamport.js\";\r\n    document.head.appendChild(jquery);\r\n    document.head.appendChild(iamport);\r\n    return () => {\r\n      document.head.removeChild(jquery);\r\n      document.head.removeChild(iamport);\r\n    };\r\n  }, []);\r\n\r\n  function sendAxiosRequest(url, method, params, successCallback, errorCallback) {\r\n    console.log(url);\r\n    const axiosConfig = {\r\n      timeout: 5000,\r\n      url: url,\r\n      method: method,\r\n    };\r\n    if (params != null)\r\n      axiosConfig.params = params;\r\n    axios(axiosConfig).then(successCallback).catch(errorCallback);\r\n  }\r\n\r\n  const memberNo = 1;\r\n  const payNo = 1;\r\n  const orderNo = 1;\r\n  const [member, setMember] = useState(null);\r\n  const [pay, setPay] = useState(null);\r\n  const [order, setOrder] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch member data\r\n    sendAxiosRequest(`/api/member/${memberNo}`, 'GET', null,\r\n      response => {\r\n\r\n        console.log('Member data:', response.data);\r\n        setMember(response.data); // Update member state\r\n      },\r\n      error => {\r\n        console.error('Error fetching member data:', error);\r\n      }\r\n    );\r\n\r\n    // Fetch order data\r\n    sendAxiosRequest(`/api/order/detail/${orderNo}`, 'GET', null,\r\n      response => {\r\n        console.log('Order data:', response.data);\r\n        setOrder(response.data); // Update order state\r\n      },\r\n      error => {\r\n        console.error('Error fetching order data:', error);\r\n      }\r\n    );\r\n  }, []); // Empty dependency array to ensure this effect runs only once\r\n\r\n  const requestPay = () => {\r\n    console.log('memberState', member);\r\n    console.log('orderState', order);\r\n\r\n    const { IMP } = window;\r\n    const buyerEmail = member ? member.memberEmail : '';\r\n    const buyerName = member ? member.memberName : '';\r\n    const buyerTel = member ? member.memberPhone : '';\r\n    const name = order ? order.orderNo : '';\r\n    const buyerAddr = order ? order.resipientAddr : '';\r\n    const buyerPostcode = order ? order.resipientZipcode : '';\r\n    const amount = order.orderPrice;\r\n\r\n    IMP.init('imp11340204');\r\n\r\n    IMP.request_pay({\r\n      pg: 'kakaopay.TC0ONETIME',\r\n      pay_method: 'card',\r\n      merchant_uid: new Date().getTime(),\r\n      name: name,\r\n      amount: amount,\r\n      buyer_email: buyerEmail,\r\n      buyer_name: buyerName,\r\n      buyer_tel: buyerTel,\r\n      buyer_addr: buyerAddr,\r\n      buyer_postcode: buyerPostcode,\r\n    }, async (rsp) => {\r\n      console.log('rsp: ', rsp);\r\n      try {\r\n        const { data } = await axios.post('/api/pay/verifyIamport/' + rsp.imp_uid);\r\n        if (rsp.paid_amount === amount) {\r\n          alert('결제 성공!');\r\n          const testPay = {\r\n            // \"payType\": \"C\",\r\n            // \"orderStatus\": \"Y\",\r\n            // \"payNo\": 123,\r\n            orderNo: order.orderNo,\r\n            payPrice: amount,\r\n            payStatus: rsp.success ? 'Y' : 'N'\r\n            // \"payDatetime\": \"2023-10-18T12:34:56\",  // 예: ISO 8601 형식의 날짜 및 시간\r\n            // \"payCancelDatetime\": \"2023-10-18T14:45:00\"  // 예: ISO 8601 형식의 날짜 및 시간\r\n          }\r\n\r\n          console.log('testPay.payStatus: ', testPay.payStatus);\r\n\r\n          axios.post('/api/pay/createPayment', testPay, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n          })\r\n            .then(response => {\r\n              console.log('Pay data:', response.data);\r\n              setPay(response.data);\r\n            })\r\n            .catch(error => {\r\n              console.error('Error fetching pay data:', error);\r\n            });\r\n\r\n        } else if (rsp.paid_amount == amount) {\r\n          alert('결제 성공?');\r\n        } else {\r\n          alert('결제 실패?');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error while verifying payment:', error);\r\n        alert('결제 실패');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={requestPay}>결제하기</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Payment;\r\n\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Test\\test2.jsx",["433","434","435"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './Test.css';\r\n\r\nconst Test = () => {\r\n  const [testStatus, setState] = useState({\r\n    loading: false,\r\n    response: '값을 가져오니라'\r\n  });\r\n\r\n  console.log(\"testStatus : \",testStatus)\r\n  return (\r\n    <>\r\n      <h1>Test API</h1>\r\n      <div className=\"response-container\">\r\n          <p>{testStatus.response}</p>\r\n        </div>\r\n    </>\r\n  );\r\n}\r\nexport default Test;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Review\\ReviewForm.js",["436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467"],[],"import '../utility/Common.css';\r\nimport React, {useState, useEffect} from 'react';\r\nimport {formToJSON} from 'axios';\r\nimport {useUser} from '../Auth/UserContext';\r\nimport {\r\n    scrollMoveTop,\r\n    sendAxiosMultipartRequest,\r\n    sendAxiosRequest,\r\n    dateFormatParse,\r\n    handleInputChange,\r\n    accessTokenRefresh, getAccessToken, isTokenExpired, isNotNullOrNonEmpty\r\n} from '../utility/common';\r\n\r\n\r\nfunction ReviewForm(props) {\r\n    const [accessToken, setAccessToken] = useState(getAccessToken('a'));\r\n    const [tokenMeber, setTokenMember] = useState(getAccessToken('d'));\r\n    const [store, setStore] = useState(props.store);\r\n\r\n    // 로그인 확인\r\n    console.log('accessToken: ', accessToken);\r\n    console.log('tokenMeber: ', tokenMeber);\r\n\r\n    if (!isTokenExpired(accessToken)) {\r\n        return (\r\n            <div id='maindDiv' className=\"review-main-div\">\r\n                <div id='mainContentDiv' className=\"ba-main-content-div\">\r\n                    <ReviewWriteForm accessToken={accessToken} loginUser={tokenMeber}\r\n                                     store={store}></ReviewWriteForm>\r\n                    <ReviewListDiv accessToken={accessToken} store={store} loginUser={tokenMeber}></ReviewListDiv>\r\n                </div>\r\n                <div id=\"topBtnDiv\" onClick={scrollMoveTop}>↑</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction ReviewWriteForm(props) {\r\n    let [loginUser, setLoginUser] = useState(props.loginUser);\r\n    let [store, setStore] = useState(props.store);\r\n    let [reviewFreshness, setReviewFreshness] = useState('M');\r\n\r\n    if (loginUser != null && loginUser != undefined) {\r\n\r\n        return (\r\n            <form id=\"reviewWriteForm\" encType='multipart/form-data' className='ba-form'>\r\n                <label htmlFor='storeNo'><input id='storeNo' name='storeNo' value={store.storeNo}\r\n                                                hidden readOnly></input></label>\r\n                <label htmlFor='memberNo'><input id='memberNo' name='memberNo' value={loginUser.sub}\r\n                                                 hidden readOnly></input></label>\r\n                <img className='ba-member-profile'\r\n                     src='http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg'></img>\r\n                <sapn className='ba-font-name'>{loginUser.memberName}</sapn>\r\n                <span className='ba-font-title'>신선도 :</span>\r\n                <label htmlFor='freshness-low' className='ba-freshness'><img src='/images/low.png'/><input\r\n                    type=\"radio\" id='freshness-low' name='reviewFreshness' value={'L'}\r\n                    checked={reviewFreshness === 'L'}\r\n                    onChange={() => setReviewFreshness('L')}></input></label>\r\n                <label htmlFor='freshness-medium' className='ba-freshness'><img\r\n                    src='/images/mid.png'/><input type=\"radio\" id='freshness-medium'\r\n                                                  name='reviewFreshness' value={'M'}\r\n                                                  checked={reviewFreshness === 'M'}\r\n                                                  onChange={() => setReviewFreshness('M')}></input></label>\r\n                <label htmlFor='freshness-high' className='ba-freshness'><img\r\n                    src='/images/high.png'/><input type=\"radio\" id='freshness-high'\r\n                                                   name='reviewFreshness' value={'H'}\r\n                                                   checked={reviewFreshness === 'H'}\r\n                                                   onChange={() => setReviewFreshness('H')}></input></label>\r\n                <div>\r\n                    <textarea name=\"reviewContent\" className='ba-textarea'/>\r\n                </div>\r\n                <div className='ba-text-left'>\r\n                    <button type='button' className='ba-btn ba-margin-right10' onClick={() => {\r\n                        let formData = new FormData(document.getElementById('reviewWriteForm'));\r\n                        let reviewContentLength = formData.get('reviewContent').trim().length;\r\n                        console.log(reviewContentLength);\r\n\r\n                        if (reviewContentLength < 1) {\r\n                            alert('작성하실 리뷰 내용을 입력해주세요!');\r\n                            return;\r\n                        }\r\n\r\n                        let inputFile = document.querySelector('input[type=\"file\"]');\r\n                        if (inputFile.files.length > 0) {\r\n                            let files = inputFile.files;\r\n                            for (let i = 0; i < files.length; i++) {\r\n                                formData.append(\"multipartFiles\", files[i]);\r\n                            }\r\n                        }\r\n\r\n                        console.log('여기다.');\r\n                        console.log('formToJSON', JSON.stringify(formData));\r\n                        sendAxiosMultipartRequest('/api/review/add', formData,\r\n                            response => {\r\n                                console.log('/api/review/add =======> ', response.data);\r\n                                console.log('props.accessToken', props.accessToken)\r\n                                if (isNotNullOrNonEmpty(response.data)) {\r\n                                    alert('리뷰를 성공적으로 작성하였습니다!');\r\n                                    // window.location.reload();\r\n                                }\r\n\r\n                            }, error => console.log(error), props.accessToken);\r\n\r\n                    }}>리뷰작성\r\n                    </button>\r\n                    <label htmlFor='fileInput' className='ba-file-label'>파일 첨부</label><span\r\n                    id='fileInfoSpan'></span>\r\n                    <input type='file' id='fileInput' multiple hidden className='ba-file-btn'\r\n                           onChange={(e) => {\r\n                               let files = e.target.files;\r\n                               console.log(files);\r\n                               let fileInfoStr;\r\n                               for (let i = 0; i < 2; i++) {\r\n                                   fileInfoStr = (i === 0) ? fileInfoStr + ' ' + files[i].name + ', ' : fileInfoStr + ' ' + files[i].name;\r\n                               }\r\n                               document.getElementById('fileInfoSpan').textContent = '파일명: ' + fileInfoStr + ' 등 ' + files.length + '개의 첨부파일';\r\n                           }}/>\r\n                </div>\r\n\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nfunction ReviewListDiv(props) {\r\n    const pageRowCnt = 4;\r\n    let [store, setStore] = useState(props.store);\r\n    let [accessToken, setAccessToekn] = useState(getAccessToken('a'));\r\n    let [loginUser, setLoginUser] = useState(props.loginUser);\r\n    let [startPageNo, setStartPageNo] = useState(0);\r\n    let [reviewList, setReviewList] = useState([]);\r\n    let [selectedReviewNo, setSelectedReviewNo] = useState(null);\r\n    let [newAddLength, setNewAddLength] = useState(pageRowCnt);\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            console.log(newAddLength);\r\n            if (newAddLength < pageRowCnt) {\r\n                return;\r\n            }\r\n            if (\r\n                window.innerHeight + document.documentElement.scrollTop >=\r\n                document.documentElement.scrollHeight - 100\r\n            ) {\r\n\r\n                console.log(\"스크롤 이벤트 핸들러 작동\");\r\n                sendAxiosRequest(`/api/review/list?storeNo=${store.storeNo}&startPage=${startPageNo}`, 'GET', null, response => {\r\n                    console.log('/api/review/list?storeNo=${store.storeNo}&startPage=${startPageNo} ==> :', response.data);\r\n                    if (isNotNullOrNonEmpty(response.data)) {\r\n                        let addReviewList = response.data;\r\n                        setNewAddLength(response.data.length);\r\n                        let newReviewList = [...reviewList, ...addReviewList];\r\n                        setStartPageNo(Math.floor(newReviewList.length / pageRowCnt));\r\n                        setReviewList(newReviewList);\r\n                    }\r\n\r\n                }, error => console.log(error), null, accessToken)\r\n            }\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n        }\r\n    }, [startPageNo, reviewList]);\r\n\r\n    useEffect(() => {\r\n        sendAxiosRequest(`/api/review/list?storeNo=${store.storeNo}`, \"GET\", null,\r\n            response => {\r\n                console.log('/api/review/list => ', response.data);\r\n                if (isNotNullOrNonEmpty(response.data)) {\r\n                    let reviewList = response.data;\r\n                    setReviewList(reviewList);\r\n                    setNewAddLength(reviewList.length);\r\n                    setStartPageNo(Math.floor(newAddLength / pageRowCnt));\r\n                }\r\n\r\n            }, error => console.log(error), null, accessToken)\r\n    }, []);\r\n\r\n    console.log('reviewList', reviewList);\r\n    console.log('loginUser', loginUser);\r\n    if (reviewList) {\r\n        return (\r\n            <div id=\"reviewListDiv\" className='review-list-div'>\r\n                {reviewList.length > 0 && reviewList.map((review, index) => (\r\n                    <div key={index} className='review-div'>\r\n                        <form id={'reviewUpdateForm' + index}>\r\n                            <input id={'reviewNo' + index} name='reviewNo' hidden\r\n                                   value={review.reviewNo}/>\r\n\r\n                            <div className='ba-title-container'>\r\n                                <img className='ba-member-profile'\r\n                                     src='http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg'/>\r\n                                <div className='ba-title-info'>\r\n                                    <b>{review.member.memberName}</b>\r\n                                    <span><b>작성일:</b><input type='text'\r\n                                                            value={dateFormatParse(new Date(review.mdfDatetime))}\r\n                                                            className='ba-input-text'\r\n                                                            disabled/></span>\r\n                                </div>\r\n                                <div className='ba-title-freshness'>\r\n                                    <span className='ba-font-title'>신선도 :</span>\r\n                                    <label htmlFor='freshness-low'>\r\n                                        <img src='/images/low.png'/>\r\n                                        <input type=\"radio\" name='reviewFreshness' value={'L'}\r\n                                               checked={review.reviewFreshness === 'L'}\r\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>\r\n                                    </label>\r\n                                    <label htmlFor='freshness-mid'>\r\n                                        <img src='/images/mid.png'/>\r\n                                        <input type=\"radio\" name='reviewFreshness' value={'M'}\r\n                                               checked={review.reviewFreshness === 'M'}\r\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>\r\n                                    </label>\r\n                                    <label htmlFor='freshness-high'>\r\n                                        <img src='/images/high.png'/>\r\n                                        <input type=\"radio\" name='reviewFreshness' value={'H'}\r\n                                               checked={review.reviewFreshness === 'H'}\r\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <hr/>\r\n                            <div>\r\n                                {review.reviewAttaches.length > 0 && (\r\n                                    <div className='ba-img-list-div'>\r\n                                        <img id={'defaultImg' + index} className='ba-img-first'\r\n                                             src={`http://kr.object.ncloudstorage.com/bleuauction-bucket/review/${review.reviewAttaches.length > 0 ? review.reviewAttaches[0].saveFilename : ''}`}/>\r\n\r\n                                        <div className='ba-div-col-sort'>\r\n                                            {\r\n                                                review.reviewAttaches.map((attach) => (\r\n                                                        <div>\r\n                                                            <img className='ba-img-sub-list-div'\r\n                                                                 src={`http://kr.object.ncloudstorage.com/bleuauction-bucket/review/${attach.saveFilename}`}\r\n                                                                 onMouseEnter={(e) => {\r\n                                                                     let targetImgSrc = e.target.src;\r\n                                                                     let defaultImgId = 'defaultImg' + index;\r\n                                                                     console.log(targetImgSrc);\r\n                                                                     let defaultImg = document.getElementById(defaultImgId);\r\n                                                                     console.log(defaultImg);\r\n                                                                     defaultImg.src = targetImgSrc;\r\n                                                                 }}/>\r\n                                                        </div>\r\n                                                    )\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                                {review.member.memberNo == loginUser.sub ?\r\n                                    (<textarea name='reviewContent' value={review.reviewContent}\r\n                                               className='ba-textarea'\r\n                                               onChange={(e) => handleInputChange(e, index, reviewList, setReviewList)}/>)\r\n                                    : (<textarea name='reviewContent' value={review.reviewContent}\r\n                                                 className='ba-textarea-disabled' readOnly/>\r\n                                    )}\r\n                            </div>\r\n\r\n                            {review.member.memberNo == loginUser.sub ?\r\n                                (<div className='ba-btn-div'>\r\n                                    <div className='ba-file-list'>\r\n                                        {review.reviewAttaches.map((attach) => (\r\n                                            <div key={attach.fileNo} className=\"ba-file-item\">\r\n                                                <li>{attach.originFilename}</li>\r\n                                                <p className=\"ba-delete-text\" onClick={() => {\r\n                                                    sendAxiosRequest(`/api/review/deleteFile?fileNo=${attach.fileNo}`, 'GET', null,\r\n                                                        response => {\r\n                                                            console.log(response.data);\r\n                                                            window.location.reload();\r\n                                                            alert(response.data.originFilename + '(이)가 삭제되었습니다!');\r\n                                                        },\r\n                                                        error => {\r\n                                                            console.log(error);\r\n                                                        }\r\n                                                    );\r\n                                                }}>[삭제]</p>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n\r\n                                    <button type='button' className='ba-btn ba-margin-right20'\r\n                                            onClick={() => {\r\n                                                let jsonObj = formToJSON(new FormData(document.getElementById('reviewUpdateForm' + index)));\r\n                                                console.log(jsonObj);\r\n                                                sendAxiosRequest('/api/review/update', 'POST', jsonObj, response => {\r\n                                                    console.log(response.data);\r\n                                                    console.log('리뷰변경 성공!');\r\n                                                    window.location.reload();\r\n                                                    alert('리뷰를 성공적으로 변경하였습니다!');\r\n                                                }, error => console.log(error));\r\n                                            }}>리뷰수정\r\n                                    </button>\r\n                                    <button type='button' className='ba-btn ba-margin-right10'\r\n                                            onClick={\r\n                                                () => {\r\n                                                    sendAxiosRequest(`/api/review/delete?reviewNo=${review.reviewNo}`, 'GET', null, response => {\r\n                                                        console.log(response.data);\r\n                                                        window.location.reload();\r\n                                                        alert('리뷰가 성공적으로 삭제되었습니다!');\r\n                                                    }, error => {\r\n                                                        console.log(error);\r\n                                                    });\r\n                                                }}>리뷰삭제\r\n                                    </button>\r\n                                </div>) : (<div></div>)\r\n                            }\r\n\r\n                            <div className='ba-text-right'>\r\n                                <button type='button' className='ba-small-btn' onClick={() => {\r\n                                    selectedReviewNo === review.reviewNo ? setSelectedReviewNo(null) : setSelectedReviewNo(review.reviewNo);\r\n                                }}>답글\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n\r\n                        {\r\n                            selectedReviewNo == review.reviewNo && (\r\n                                <AnswerForm reviewNo={review.reviewNo} loginUser={loginUser}/>\r\n                            )\r\n                        }\r\n                    </div>\r\n                ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction AnswerForm(props) {\r\n    const [accessToken, setAccessToken] = useState(props.accessToken);\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            <div className='ba-text-right'>\r\n                <button type='button' className='ba-small-btn' onClick={() => {\r\n                    document.getElementById('answerWriteFormDiv').style.display = 'block';\r\n                }}>답글작성✍️\r\n                </button>\r\n            </div>\r\n            <div id=\"answerWriteFormDiv\">\r\n                <h4 className='ba-font-title'>답글작성</h4>\r\n                <form id=\"answerWriteForm\">\r\n                    <input name='reviewNo' hidden value={props.reviewNo}></input>\r\n                    <input name='memberNo' hidden value={1}></input>\r\n                    <button type='button' className='ba-close-btn' onClick={\r\n                        () => {\r\n                            document.getElementById('answerWriteFormDiv').style.display = 'none';\r\n\r\n                        }\r\n                    }>x\r\n                    </button>\r\n                    <div>\r\n                        <textarea name='answerContent' className='ba-small-textarea'></textarea>\r\n                    </div>\r\n                    <div className='ba-btn-div'>\r\n                        <button type='button' className='ba-btn ba-margin-right40' onClick={() => {\r\n                            let jsonObj = formToJSON(document.getElementById('answerWriteForm'));\r\n                            console.log(jsonObj);\r\n                            if (jsonObj.answerContent.trim().length < 1) {\r\n                                alert('작성하실 답급 내용을 입력해주세요!');\r\n                                return;\r\n                            }\r\n                            sendAxiosRequest('/api/answer/add', 'POST', jsonObj,\r\n                                response => {\r\n                                    window.location.reload();\r\n                                    alert('답글을 성공적으로 작성하였습니다!');\r\n                                    console.log(response.data);\r\n                                }, error => console.log(error), null, accessToken);\r\n                        }}>작성하기\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <AnswerListDiv reviewNo={props.reviewNo} loginUser={props.loginUser}></AnswerListDiv>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction AnswerListDiv(props) {\r\n    const pageRowCnt = 2;\r\n    let [answerList, setAnswerList] = useState([]);\r\n    let [startPageNo, setStartPageNo] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        sendAxiosRequest(`/api/answer/list?reviewNo=${props.reviewNo}`, \"GET\", null,\r\n            response => {\r\n                let asnwerList = response.data.answerList;\r\n                let totalRows = response.data.totalRows;\r\n                console.log('최초 렌더시 totalRow');\r\n                console.log(totalRows);\r\n                console.log('최초 렌더시 asnwerList.length');\r\n                console.log(asnwerList.length);\r\n\r\n                if (totalRows > asnwerList.length) {\r\n                    console.log(document.querySelector('.ba-more-btn'));\r\n                    document.querySelector('.ba-more-btn').hidden = false;\r\n                }\r\n                setAnswerList(response.data.answerList);\r\n                setStartPageNo(response.data.answerList.length / 2);\r\n            }, error => console.log(error));\r\n\r\n        return () => {\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"answerListDiv\" className='answer-list-div'>\r\n            {answerList.map((answer, index) => (\r\n\r\n                < div className='answer-div' key={index}>\r\n                    <form id={'answerUpdateForm' + index}>\r\n                        <div className='ba-title-container'>\r\n                            <img className='ba-member-profile'\r\n                                 src='http://fvhsczepiibf19983519.cdn.ntruss.com/member/defaultProfile.jpg?type=f&w=50&h=50&ttype=jpg'/>\r\n                            <div className='ba-title-info'>\r\n                                <b>{answer.member.memberName}</b>\r\n                                <span><b>작성일:</b><input type='text'\r\n                                                        value={dateFormatParse(new Date(answer.mdfDatetime))}\r\n                                                        className='ba-input-text' disabled/></span>\r\n                            </div>\r\n                        </div>\r\n                        {answer.member.memberNo == props.loginUser.sub ?\r\n                            (\r\n                                <div>\r\n                                    <input type='text' name='answerNo' hidden\r\n                                           value={answer.answerNo}/>\r\n                                    <input type='text' name='reviewNo' hidden\r\n                                           value={answer.reviewNo}/>\r\n                                    <input type='text' name='memberNo' hidden\r\n                                           value={answer.member.memberNo}/>\r\n\r\n                                    <textarea name='answerContent' value={answer.answerContent}\r\n                                              className='ba-textarea' onChange={(e) => {\r\n                                        handleInputChange(e, index, answerList, setAnswerList);\r\n                                    }}/>\r\n                                    <div className='ba-btn-div'>\r\n                                        <button type='button' className='ba-btn ba-margin-right20'\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        let jsonObj = formToJSON(new FormData(document.getElementById('answerUpdateForm' + index)));\r\n                                                        console.log(jsonObj);\r\n                                                        sendAxiosRequest(`/api/answer/update?`, 'POST', jsonObj, response => {\r\n                                                            window.location.reload();\r\n                                                            alert('답글이 성공적으로 변경되었습니다!');\r\n                                                        }, error => {\r\n                                                            console.log(error);\r\n                                                        });\r\n                                                    }\r\n                                                }>답글수정\r\n                                        </button>\r\n                                        <button type='button' className='ba-btn ba-margin-right80'\r\n                                                onClick={\r\n                                                    () => {\r\n                                                        sendAxiosRequest(`/api/answer/delete?answerNo=${answer.answerNo}`, 'GET', null, response => {\r\n                                                            window.location.reload();\r\n                                                            alert('답글이 성공적으로 삭제되었습니다!');\r\n                                                        }, error => {\r\n                                                            console.log(error);\r\n                                                        });\r\n                                                    }\r\n                                                }>답글삭제\r\n                                        </button>\r\n                                    </div>\r\n                                </div>)\r\n                            : (<textarea name='answerContent' value={answer.answerContent}\r\n                                         className='ba-textarea-disabled'/>)}\r\n                    </form>\r\n                </div>\r\n            ))\r\n            }\r\n            <div className='ba-btn-div'>\r\n                <button type='button' className='ba-more-btn' hidden onClick={(e) => {\r\n                    sendAxiosRequest(`/api/answer/list?reviewNo=${props.reviewNo}&startPage=${startPageNo}`, \"GET\", null,\r\n                        response => {\r\n                            console.log(response.data);\r\n                            let totalRows = response.data.totalRows;\r\n                            let appendAnswerList = response.data.answerList;\r\n                            let newAnswerList = [...answerList, ...appendAnswerList];\r\n                            setAnswerList(newAnswerList);\r\n                            setStartPageNo(newAnswerList.length / 2);\r\n                            if (totalRows <= newAnswerList.length) {\r\n                                e.target.hidden = true;\r\n                            }\r\n\r\n                        }, error => {\r\n                            console.log(error);\r\n                        })\r\n                }}>더 보기\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ReviewForm;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreHome.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreListItem.js",["468","469","470","471","472","473","474","475","476"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport styles from './StoreListItem.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { isOpenNow, sendAxiosRequest, startEndTimeInfo } from '../utility/common';\r\nimport { useUser } from '../Auth/UserContext';\r\n\r\nfunction StoreListItem(props) {\r\n  let [store, setStore] = useState(props.data);\r\n  let [open, setOpen] = useState('O');\r\n\r\n  useEffect(() => {\r\n    let startEndTime = startEndTimeInfo(store);\r\n    let openStatus = isOpenNow(startEndTime[0], startEndTime[1]);\r\n    setOpen(openStatus);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.storeListItemBox}>\r\n      <img src='/images/boss.png' className={styles.storeListItemBoss} />\r\n      <div className={styles.storeListItemDetailTop}>\r\n        <div className={styles.storeListItemHeader}>\r\n          <strong className={styles.storeListItemDetailName}>{store.storeName}</strong>\r\n          <span className={styles.storeListItemDetailMarket}>{store.marketName}</span>\r\n        </div>\r\n        <p className={styles.storeListItemDetailIntroduce}>{store.storeAddr}</p>\r\n\r\n        <p className={styles.storeListItemBoxReview}>\r\n          <img className={styles.storeListItemFresh} src='/images/fresh.png' />5.0 (1024)\r\n        </p>\r\n        <p className={styles.storeListItemBoxState}>\r\n          <img className={styles.storeListItemStateIcon} src='/images/heart.png' />\r\n          {open == 'O' ? '영업중' : '영업종료'}\r\n        </p>\r\n        <div className={styles.storeListItemDetailBoxMore}>\r\n          <Link to=\"/market/detail\" state={store}>더보기&gt;</Link>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StoreListItem;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Menu\\MenuItem.js",["477","478","479"],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\InputField.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreInfo.js",["480"],[],"// import React from 'react';\r\n// import Coupon from '../Coupon/Coupon'; \r\n\r\n// function StoreIntro({storeInfo, store, coupons }) {\r\n//   console.log(store);\r\n//   // console.log(storeInfo);\r\n\r\n//   return (\r\n//     <div style={outerContainer}>\r\n//     <div style={introContainer}>\r\n//       <img src={storeInfo.image} alt={storeInfo.name} style={imageStyle} />\r\n//      <div style={storeInfoContainer}>\r\n//       <h2>{store.storeName}</h2>\r\n//       <ul style={infoList}>\r\n//         <li>{store.storeDetailAddr}</li>\r\n//         <li>{store.weekdayStartTime} ~ {store.weekdayEndTime}</li>\r\n//         <li>{store.store}</li>\r\n//       </ul>\r\n//       </div>\r\n//       {/* <div style={couponContainer}>\r\n//         {coupons.map(coupon => (\r\n//           <Coupon key={coupon.id} coupon={coupon} />\r\n//         ))}\r\n//       </div> */}\r\n//     </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// const outerContainer = {\r\n//   display: 'flex',\r\n//   justifyContent: 'center',\r\n//   alignItems: 'center',\r\n//   height: '50vh', // 화면 높이를 100%로 설정 (필요한 경우 조절)\r\n//   };\r\n\r\n// const introContainer = {\r\n//     display: 'flex',\r\n//     flexDirection: 'column', // children들을 열 방향으로 배열\r\n//     alignItems: 'center', // children들을 가운데 정렬\r\n//     backgroundColor: '#f0f0f0', // 연한 회색 배경\r\n//     padding: '0px',\r\n//     borderRadius: '8px', // 소프트한 테두리를 위한 둥근 모서리 추가\r\n//     textAlign: 'center',\r\n//     width : '70%',\r\n//     height: '100%'\r\n// };\r\n\r\n// const storeInfoContainer = {\r\n//     textAlign: 'left', \r\n//     padding: '20px',\r\n//     marginBottom: '50px', // 쿠폰 컨테이너와의 간격을 조절\r\n//     width : '100%',\r\n//   };\r\n\r\n// const imageStyle = {\r\n//   width: '100%',\r\n//   height: 'auto',\r\n//   objectFit: 'cover',\r\n// };\r\n\r\n// const infoList = {\r\n//   listStyleType: 'none',\r\n//   padding: '0',\r\n//   margin: '10px 0',\r\n// };\r\n\r\n\r\n// export default StoreIntro;\r\n\r\nimport React from 'react';\r\nimport Coupon from '../Coupon/Coupon'; \r\n\r\nfunction StoreIntro({storeInfo, store, coupons }) {\r\n\r\n  console.log('storeInfo,',storeInfo);\r\n\r\n  return (\r\n    <div style={outerContainer}>\r\n    <div style={introContainer}>\r\n      <img src={storeInfo.image} alt={storeInfo.name} style={imageStyle} />\r\n     <div style={storeInfoContainer}>\r\n      <h2>{storeInfo.name}</h2>\r\n      <ul style={infoList}>\r\n        <li>{storeInfo.storeDetailAddr}</li>\r\n        <li>{storeInfo.weekdayStartTime} ~ {storeInfo.weekdayEndTime}</li>\r\n        <li>{storeInfo.store}</li>\r\n      </ul>\r\n      </div>\r\n      {/* <div style={couponContainer}>\r\n        {coupons.map(coupon => (\r\n          <Coupon key={coupon.id} coupon={coupon} />\r\n        ))}\r\n      </div> */}\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst outerContainer = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '50vh', // 화면 높이를 100%로 설정 (필요한 경우 조절)\r\n  };\r\n\r\nconst introContainer = {\r\n    display: 'flex',\r\n    flexDirection: 'column', // children들을 열 방향으로 배열\r\n    alignItems: 'center', // children들을 가운데 정렬\r\n    backgroundColor: '#f0f0f0', // 연한 회색 배경\r\n    padding: '0px',\r\n    borderRadius: '8px', // 소프트한 테두리를 위한 둥근 모서리 추가\r\n    textAlign: 'center',\r\n    width : '70%',\r\n    height: '100%'\r\n};\r\n\r\nconst storeInfoContainer = {\r\n    textAlign: 'left', \r\n    padding: '20px',\r\n    marginBottom: '10px', // 쿠폰 컨테이너와의 간격을 조절\r\n    width : '100%',\r\n  };\r\n\r\nconst imageStyle = {\r\n  width: '100%',\r\n  height: 'auto',\r\n  objectFit: 'cover',\r\n};\r\n\r\nconst infoList = {\r\n  listStyleType: 'none',\r\n  padding: '0',\r\n  margin: '10px 0',\r\n};\r\n\r\n\r\nexport default StoreIntro;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Category.js",["481","482","483"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport styles from './Category.module.css';\r\n\r\n\r\nfunction Category() {\r\n\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n\r\n  const handleOptionChange = (event) => {\r\n    setSelectedOption(event.target.value);}\r\n\r\n  return (\r\n    <>\r\n      <select value={selectedOption} onChange={handleOptionChange}>\r\n        <option value=\"option1\">옵션 1</option>\r\n        <option value=\"option2\">옵션 2</option>\r\n        <option value=\"option3\">옵션 3</option>\r\n      </select>\r\n\r\n      <p>{selectedOption}</p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Category;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MyOrderContent.js",["484","485","486","487"],[],"import React, { useEffect, useReducer, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport styles from './MyOrderContent.module.css';\r\nimport OrderMenuList from './OrderMenuList';\r\n\r\n\r\nfunction MyOrderContent() {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    axios.get('/api/order')\r\n    .then(response => setOrders(response.data))\r\n      .catch(error => console.log(error));\r\n    console.log(orders);\r\n  }, [])\r\n\r\n  // function onClick() {\r\n  //   console.log(orders);\r\n  // }\r\n\r\n  // const orders = orderlist;\r\n\r\n  return (\r\n    <>\r\n    {orders.map(order=>(\r\n    <tr key={order.orderNo}>\r\n    <div>\r\n  \r\n    {/* <button onClick={onClick} >버튼</button> */}\r\n    <div className={styles.order_box}>\r\n      <div className={styles.order_store_title}>\r\n      <td>주문 번호 : {order.orderNo}</td>\r\n      <br/>\r\n      <td>주문일: {new Date(order.regDatetime).toLocaleDateString()}</td>\r\n      </div>\r\n      \r\n      <div className={styles.order_item_box}>\r\n        <img src='/images/fresh.png'/>\r\n        <Link className=\"text-ellipsis\" to={`/mypage/ordermenu/detail/${order && order.orderNo}`} style={{ color: '#909090' }}>\r\n        주문 상세보기\r\n        </Link>\r\n        {/* {order.OrderMenus.map(orderMenu => (\r\n          <div key={orderMenu.orderMenuNo}>\r\n            <td>주문메뉴번호{orderMenu.orderMenuNo}</td>\r\n            <td>메뉴번호{orderMenu.menuNo}</td>\r\n            <td>주문수량{orderMenu.menuNo}</td>\r\n          </div>\r\n        ))}  */}       \r\n        \r\n      </div>\r\n      \r\n      <div className={styles.order_result_box}>\r\n      <td>총액: {order.orderPrice}</td>\r\n      <br/>\r\n      <td>주문타입: {order.orderType === 'Q' ? '퀵배송' : order.orderType === 'T' ? '포장' : '기타'}</td>\r\n      <br/>\r\n      <td>요청사항: {order.orderRequest}</td>\r\n      <br/>\r\n      <td>핸드폰 번호: {order.recipientPhone}</td>\r\n      <br/>\r\n      <td>수령자: {order.recipientName}</td>\r\n      <br/>\r\n      <td>우편번호: {order.recipientZipcode}</td>\r\n      <br/>\r\n      <td>주소: {order.recipientAddr}</td>\r\n      <br/>\r\n      <td>상세주소: {order.recipientDetailAddr}</td>\r\n\r\n\r\n      </div>\r\n      </div>\r\n   \r\n    </div>\r\n    </tr>\r\n  ))}\r\n       </>\r\n  );\r\n}\r\n\r\nexport default MyOrderContent;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Announce.js",["488","489","490"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport styles from './Announce.module.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\r\nimport { Carousel } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport ReactPlayer from 'react-player';\r\n\r\nfunction Announce() {\r\n  const carouselContainer = {\r\n    height: '400px',\r\n    width: '60%',\r\n    margin: '0 auto',\r\n    borderRadius: '30px',\r\n    overflow: 'hidden',\r\n    boxShadow: '0px 0px 5px 20px #1565c0', /* 옅은 파랑색 */\r\n  };\r\n\r\n  const location = useLocation();\r\n  const images = location.pathname !== '/store/list' ? [\r\n    \"/images/11ad1.png\",\r\n    \"/images/11ad2.png\",\r\n    \"/images/11ad3.png\",\r\n    \"/images/11ad4.png\",\r\n    \"/images/11ad5.png\",\r\n    \"https://www.youtube.com/watch?v=BTsODTH2SRk\" // Add the video URL here\r\n  ] : [\r\n    \"/images/login.png\"\r\n  ];\r\n\r\n  return (\r\n    <div style={carouselContainer}>\r\n      <Carousel>\r\n        {images.map((image, index) => (\r\n          <Carousel.Item key={index} id={styles.carousel}>\r\n            {index === images.length - 1 ? (\r\n              <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100%' }}>\r\n                <ReactPlayer url={image} playing style={{ margin: 'auto' }} />\r\n              </div>\r\n            ) : (\r\n              <img src={image} alt={`슬라이드 ${index + 1}`} />\r\n            )}\r\n          </Carousel.Item>\r\n        ))}\r\n      </Carousel>\r\n      <div>쿠폰div</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Announce;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MainPage\\Button.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreHomeItem.js",["491","492","493","494","495","496","497","498","499","500","501","502"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport styles from './StoreHomeItem.module.css';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Placeholder from 'react-bootstrap/Placeholder';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n\r\nfunction StoreHomeItem({store}) {\r\n\r\n  function isCurrentTimeInRange(startTime, endTime) {\r\n    // 현재 날짜와 시간을 생성\r\n    const currentDate = new Date();\r\n    // 시작 시간과 종료 시간을 파싱 (예: \"08:00\" 형식)\r\n    \r\n    // 현재 시간이 시작 시간과 종료 시간 사이에 있는지 확인\r\n    return currentDate >= startTime && currentDate <= endTime;\r\n  }\r\n\r\n  const startTime = new Date();\r\n  const [startHours, startMinutes, startSecond] = store.weekdayStartTime.split(':');\r\n  startTime.setHours(parseInt(startHours, 10));\r\n  startTime.setMinutes(parseInt(startMinutes, 10));\r\n  // startTime.setSecond(parseInt(startSecond, 10));\r\n\r\n  const endTime = new Date();\r\n  const [endHours, endMinutes, endSecond] = store.weekdayEndTime.split(':');\r\n  endTime.setHours(parseInt(endHours, 10));\r\n  endTime.setMinutes(parseInt(endMinutes, 10));\r\n  // endTime.setSecond(parseInt(endSecond, 10));\r\n\r\n  \r\n  const isWorking = isCurrentTimeInRange(startTime, endTime) ? '영업중' : '영업 종료';\r\n\r\n  // console.log(store);\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <Link to={'/market/detail'}\r\n      state= {store}\r\n      className={styles.storeHomeItemDetailBoxMore}>\r\n      <Card style={{ width: '18rem' }}>\r\n        <img className={styles.storeHomeItemBoss} variant=\"top\" src=\"/images/boss.png\" />\r\n        <div className={styles.storeHomeItemHeader}>\r\n          <p className={styles.storeHomeItemTitle}>{store.storeName}</p>\r\n          <p className={styles.storeHomeItemBoxReview}>\r\n            <img className={styles.storeHomeItemFresh}src=\"/images/fresh.png\"/>5.0\r\n          </p>\r\n        </div>\r\n        <div>\r\n        <p className={styles.storeHomeItemBoxReview}>\r\n        <img className={styles.storeHomeItemStateIcon} src=\"/images/heart.png\"/>{isWorking}</p>\r\n        </div>\r\n        {/* <Button className={styles.storeHomeItemDetailBoxMore}>\r\n          <Link to=\"/\" variant=\"primary\">더보기</Link>\r\n        </Button> */}\r\n      </Card>\r\n    </Link>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StoreHomeItem;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Review\\ReviewList.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Coupon\\Coupon.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\StoreItemDailyPrice\\StoreItemAdd.js",["503","504","505","506"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { sendAxiosRequest } from '../utility/common';\r\nimport './StoreItemAdd.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Hidden } from '@mui/material';\r\n\r\n\r\nfunction StroeItemAdd() {\r\n\r\n  const [fish, setFish] = useState('');\r\n  const [code, setCode] = useState('');\r\n  const [size, setSize] = useState('');\r\n  const [origin, setOrigin] = useState('');\r\n  const [place, setPlace] = useState('');\r\n  const [wild, setWild] = useState('');\r\n  const [price, setPrice] = useState('');\r\n\r\n  const handleCode = () => {\r\n    setCode(\r\n      (fish === '광어'||'우럭'||'도미'||'방어'||'참치') ? 'S' :\r\n      (fish === '연어') ? 'F' :\r\n      (fish === '오징어') ? 'E' :\r\n      (fish === '새우') ? 'C' :\r\n      (fish === '가리비'||'전복') ? 'M' : '')\r\n    }\r\n\r\n  const handleSize = (e) => {\r\n    setSize(e.target.value)\r\n  }\r\n\r\n  const handlePrice = (e) => {\r\n    setPrice(e.target.value)\r\n  }\r\n\r\n  const itemSize = \r\n  Number(size) >= 3 ? 'L' :\r\n  Number(size) >= 2 ? 'M' : 'S'\r\n  \r\n\r\n  const fishs = {\r\n    '광어': 1,\r\n    '우럭': 2,\r\n    '도미': 3,\r\n    '방어': 4,\r\n    '참치': 5,\r\n    '연어': 6,\r\n    '오징어': 7,\r\n    '새우': 8,\r\n    '가리비': 9,\r\n    '전복': 10\r\n  }\r\n\r\n  const codes = {\r\n    S: '생선/횟감',\r\n    F: '생선/비횟감',\r\n    C: '갑각류',\r\n    M: '패류',\r\n    E: '기타',\r\n  };\r\n\r\n  const DPlace = {\r\n    ES: '동해',\r\n    WS: '서해',\r\n    SS: '남해',\r\n    JJ: '제주',\r\n    WD: '완도'\r\n  }\r\n\r\n  const IPlace = {\r\n    JP: '일본',\r\n    CN: '중국',\r\n    RU: '러시아',\r\n    NW: '노르웨이'\r\n  }\r\n\r\n  const selectPlace = \r\n  (origin === \"D\") ? DPlace : \r\n  (origin === \"I\") ? IPlace : null;\r\n\r\n  const hiddenButtons = \r\n  (selectPlace !== null) ?\r\n    Object.keys(selectPlace).map((code) => (\r\n      <button\r\n        key={code}\r\n        className={place === code ? 'selected' : ''}\r\n        onClick={() => setPlace(code)}\r\n      >\r\n        {selectPlace[code]}\r\n      </button>\r\n    ))\r\n    : null;\r\n  \r\n  const navigate = useNavigate();\r\n  \r\n  const handleSubmit = () => {\r\n    console.log('dddd');\r\n    sendAxiosRequest ('/api/item/new', 'POST', item, response => {\r\n      console.log(response.data);\r\n      console.log(item);\r\n      navigate('/');\r\n    }, error => {\r\n      console.log(error);\r\n    });\r\n\r\n  };\r\n\r\n  const item = {\r\n    'itemName': fish,\r\n    'itemCode': code,\r\n    'itemSize': itemSize,\r\n    'originStatus': origin,\r\n    'originPlaceStatus': place,\r\n    'wildFarmStatus': wild\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n             <>\r\n               {/* 품목 선택 */}\r\n               <p>품목 선택</p>\r\n               <div className=\"freezer_box\">\r\n                 {Object.keys(fishs).map((name) => (\r\n                   <div\r\n                     key={name}\r\n                     className={`fish_item ${fish === name ? 'selected' : ''}`}\r\n                     onClick={() => {\r\n                       setFish(name);\r\n                       handleCode();\r\n                     }}\r\n                   >\r\n                     <img src={`/images/fish${fishs[name]}.jpg`} alt={name} className=\"fish_image\" />\r\n                     <p>{name}</p>\r\n                   </div>\r\n                 ))}\r\n               </div>\r\n\r\n               {/* 무게 입력 */}\r\n               <div className='fish_size'>\r\n                   <p>무게 입력 (kg)</p>\r\n                   <div>\r\n                       <input\r\n                           type='number'\r\n                           value={size}\r\n                           onChange={handleSize}\r\n                           placeholder='예) 2.5'\r\n                       />\r\n                   </div>\r\n               </div>\r\n\r\n               <div className='fish_price'>\r\n                   <p>금일 판매 가격 (원)</p>\r\n                   <div>\r\n                       <input\r\n                           type='number'\r\n                           value={price}\r\n                           onChange={handlePrice}\r\n                           placeholder='예) 10000'\r\n                       />\r\n                   </div>\r\n               </div>\r\n\r\n               <div className='fish_origin'>\r\n                   <p>원산지</p>\r\n                   <div className='origin_buttons'>\r\n                       <button\r\n                           className={origin === 'D' ? 'selected' : ''}\r\n                           onClick={() => setOrigin('D')}\r\n                       >\r\n                           국내산\r\n                       </button>\r\n                       <button\r\n                           className={origin === 'I' ? 'selected' : ''}\r\n                           onClick={() => setOrigin('I')}\r\n                       >\r\n                           수입산\r\n                       </button>\r\n                   </div>\r\n               </div>\r\n\r\n               {/* 판매 장소 선택 */}\r\n               <div className=\"fish_place\">\r\n                 <div className=\"filter_buttons\">{hiddenButtons}</div>\r\n               </div>\r\n\r\n               {/* 자연산/양식 선택 */}\r\n               <div className=\"fish_origin\">\r\n                 <p>자연산 / 양식</p>\r\n                 <div className=\"origin_buttons\">\r\n                   <button className={wild === 'W' ? 'selected' : ''} onClick={() => setWild('W')}>\r\n                     자연산\r\n                   </button>\r\n                   <button className={wild === 'F' ? 'selected' : ''} onClick={() => setWild('F')}>\r\n                     양식\r\n                   </button>\r\n                 </div>\r\n               </div>\r\n\r\n               {/* 제출하기 버튼 */}\r\n               <div className=\"submit_button\">\r\n                 <button onClick={handleSubmit}>제출하기</button>\r\n               </div>\r\n             </>\r\n           );\r\n         }\r\n\r\nexport default StroeItemAdd;","C:\\Users\\think\\git\\bleuauction_fe\\src\\routes\\StoreList.js",["507","508","509","510","511"],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Chat\\Chat.js",["512","513"],[],"import React, { useState, useRef, useEffect } from 'react';\r\nimport { MessageBox, ChatList } from 'react-chat-elements';\r\nimport 'react-chat-elements/dist/main.css';\r\nimport axios from 'axios';\r\n\r\nconst Chat = ({ closeModal }) => {\r\n    const [chatMessage, setChatMessage] = useState('');\r\n    const [response, setResponse] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const chatContainerRef = useRef(null);\r\n\r\n    const handleMessage = async () => {\r\n        try {\r\n            const response = await axios.post('/api/chat/message', chatMessage, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            setMessages((prevMessages) => [\r\n                ...prevMessages,\r\n                {\r\n                    position: 'right',\r\n                    type: 'text',\r\n                    text: chatMessage,\r\n                    date: new Date(),\r\n                },\r\n                {\r\n                    position: 'left',\r\n                    type: 'text',\r\n                    text: response.data,\r\n                    date: new Date(),\r\n                },\r\n            ]);\r\n\r\n            setResponse(response.data);\r\n            setChatMessage('');\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            handleMessage();\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\r\n    }, [messages]);\r\n\r\n    const handleOutsideClick = (e) => {\r\n        if (e.target.classList.contains('chat-modal-container')) {\r\n            closeModal();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"chat-modal-container\"\r\n            style={{\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n                zIndex: 9999,\r\n            }}\r\n            onClick={handleOutsideClick}\r\n        >\r\n            <div\r\n                style={{\r\n                    backgroundColor: '#2F80ED',\r\n                    display: 'flex',\r\n                    flexDirection: 'column',\r\n                    padding: '20px',\r\n                    maxWidth: '600px',\r\n                    width: '70%',\r\n                    borderRadius: '20px',\r\n                    position: 'relative',\r\n                    maxHeight: '100%',\r\n                    overflow: 'auto',\r\n                }}\r\n            >\r\n                <ChatList\r\n                    className=\"chat-list\"\r\n                    dataSource={[\r\n                        {\r\n                            avatar: 'https://www.pngfind.com/pngs/m/676-6764066_fish-cartoon-images-fish-logo-png-transparent-png.png',\r\n                            alt: 'Fish',\r\n                            title: 'BA_ChatBot',\r\n                            subtitle: '무엇이든 물어보세요',\r\n                            date: new Date(),\r\n                            unread: 0,\r\n                        },\r\n                    ]}\r\n                    style={{ marginBottom: '20px' }}\r\n                />\r\n                <div\r\n                    ref={chatContainerRef}\r\n                    style={{ flex: '1', overflowY: 'auto', marginTop: '10px' }}\r\n                >\r\n                    {messages.map((message, index) => (\r\n                        <MessageBox\r\n                            key={index}\r\n                            position={message.position}\r\n                            type={message.type}\r\n                            text={message.text}\r\n                            date={message.date}\r\n                            avatar={\r\n                                message.position === 'left'\r\n                                    ? 'https://www.pngfind.com/pngs/m/676-6764066_fish-cartoon-images-fish-logo-png-transparent-png.png'\r\n                                    : null\r\n                            }\r\n                            text={message.text}\r\n                            title={message.position === 'left' ? 'BA_ChatBot' : 'You'}\r\n                            titleColor={message.position === 'left' ? '#FFFFFF' : '#4CAF50'}\r\n                            textFontSize={16}\r\n                            textFontColor=\"#333\"\r\n                            style={{\r\n                                backgroundColor: message.position === 'left' ? '#FFFFFF' : '#DCF8C6',\r\n                                borderRadius: message.position === 'left' ? '0px 10px 10px 10px' : '10px 0px 10px 10px',\r\n                                padding: '10px 15px',\r\n                                maxWidth: '70%',\r\n                                alignSelf: message.position === 'left' ? 'flex-start' : 'flex-end',\r\n                                marginBottom: 10,\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <div style={{ display: 'flex', alignItems: 'center', marginTop: '20px' }}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={chatMessage}\r\n                        onChange={(e) => setChatMessage(e.target.value)}\r\n                        onKeyPress={handleKeyPress}\r\n                        style={{ flex: '1', padding: '15px', borderRadius: '30px', border: 'none', fontSize: '16px' }}\r\n                        placeholder=\"메시지를 입력하세요...\"\r\n                    />\r\n                    <button\r\n                        onClick={handleMessage}\r\n                        style={{\r\n                            marginLeft: '10px',\r\n                            padding: '15px 25px',\r\n                            borderRadius: '30px',\r\n                            border: 'none',\r\n                            backgroundColor: '#4CAF50',\r\n                            color: '#fff',\r\n                            cursor: 'pointer',\r\n                            fontSize: '16px',\r\n                        }}\r\n                    >\r\n                        보내기\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeDetail.js",["514"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, useParams } from 'react-router-dom';\r\n\r\nfunction NoticeDetail() {\r\n  const [notice, setNotice] = useState({});\r\n  const { noticeNo } = useParams();\r\n\r\n  useEffect(() => {\r\n    axios.get(`/api/notice/detail/${noticeNo}`)\r\n      .then(response => setNotice(response.data))\r\n      .catch(error => console.log(error));\r\n  }, [noticeNo]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"top-controls\"></div>\r\n      <div style={{ padding: \"0 12px\" }}>\r\n        <table className=\"board_list text-center\">\r\n          <colgroup>\r\n            <col width=\"20%\" />\r\n            <col width=\"80%\" />\r\n          </colgroup>\r\n          <thead>\r\n          <tr>\r\n          <th>제목</th>\r\n          <td className=\"text-left\">{notice.noticeTitle}</td>\r\n          </tr>\r\n          <tr>\r\n          <th>내용</th>\r\n          <td>{notice.noticeContent}</td>\r\n          </tr>\r\n          </thead>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NoticeDetail;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeList.js",["515","516"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n//import Announce from '/components/MainPage/Announce';\r\nimport NoticeListItem from './NoticeListItem';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport styles from './NoticeList.css'\r\n\r\n\r\nfunction NoticeList() {\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/notice')\r\n      .then(response => setData(response.data))\r\n      .catch(error => console.log(error));\r\n      // console.log(data);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <div className={styles.storeListBox}>\r\n      <NoticeListItem data={data}/>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NoticeList;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Notice\\NoticeListItem.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\OrderModal.js",["517","518","519","520","521","522","523","524"],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeList.js",["525","526"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n//import Announce from '/components/MainPage/Announce';\r\nimport AdminNoticeListItem from './AdminNoticeListItem';\r\nimport { Routes, Route } from 'react-router-dom';\r\nimport styles from '../Notice/NoticeList.css'\r\n\r\n\r\nfunction AdminNoticeList() {\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get('/api/notice')\r\n      .then(response => setData(response.data))\r\n      .catch(error => console.log(error));\r\n      // console.log(data);\r\n  }, []);\r\n  \r\n\r\n  return (\r\n    <>\r\n    <div className={styles.storeListBox}>\r\n      <AdminNoticeListItem data={data}/>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AdminNoticeList;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeDetail.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\NoticeRegisterationForm.js",["527"],[],"import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { sendAxiosRequest } from '../utility/common';\r\n\r\nfunction NoticeRegisterationForm() {\r\n  const [notice, setNotice] = useState({\r\n    noticeTitle: 'title',\r\n    noticeContent: 'content',\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNotice({ ...notice, [name]: value });\r\n  };\r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let formData = new FormData(e.target);\r\n    let formObj = formToJSON(formData);\r\n    sendAxiosRequest('/api/notice/new', 'POST', formObj, response => {\r\n      console.log('응답값:', response.data);\r\n      alert('공지사항이 등록 되었습니다.');\r\n      navigate('/admin/notice/list');\r\n    },\r\n      error => {\r\n        console.error('API 호출 중 에러 발생: ', error);\r\n        alert('공지사항 등록에 실패하셨습니다!');\r\n      }\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <form onSubmit={handleSubmit} style={styles.form}>\r\n      <h2>공지사항 등록</h2>\r\n        <div>\r\n          <label>제목 </label>\r\n          <input style={styles.input} type=\"text\" name=\"noticeTitle\" value={notice.noticeTitle} onChange={handleChange} />\r\n        </div>\r\n        <div>\r\n          <label>내용 </label>\r\n          <input style={styles.input} type=\"text\" name=\"noticeContent\" value={notice.noticeContent} onChange={handleChange} />\r\n        </div>\r\n        <button type=\"submit\" style={styles.submitButton}>등록</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '30vh',\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center', // 폼 내용을 중앙 정렬합니다.\r\n    padding: '20px',  // 내부 패딩을 추가합니다.\r\n    borderRadius: '12px',  // 모서리를 둥글게 합니다.\r\n    boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)', // 약간의 그림자 효과를 추가합니다.\r\n    background: 'white', // 배경색을 흰색으로 설정합니다.\r\n    width: '800px',\r\n  },\r\n  input: {\r\n    padding: '10px',\r\n    margin: '5px 0',\r\n    borderRadius: '6px',\r\n    border: '1px solid #ccc',\r\n    outline: 'none',\r\n    width: '300px',\r\n  },\r\n  submitButton: {\r\n    padding: '10px 20px',\r\n    cursor: 'pointer',\r\n    backgroundColor: '#0575E6',\r\n    border: 'none',\r\n    borderRadius: '8px',\r\n    color: 'white',\r\n  },\r\n}\r\n\r\n\r\nexport default NoticeRegisterationForm;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Admin\\AdminNoticeListItem.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\OrderItem.js",["528","529"],[],"import React, { useState, useEffect } from 'react';\r\nimport './OrderModal.css';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport axios from 'axios';\r\n\r\nfunction OrderItem({ key, menu, orderMenu, update }) {\r\n  // console.log(menu)\r\n  const [localItem, setLocalItem] = useState(menu);\r\n\r\n\r\n\r\n  useEffect(()=> {\r\n    const imgs = axios.get(`/api/menu/detail/${menu.menuNo}`);\r\n    setLocalItem({\r\n      ...localItem,\r\n      menuImg: imgs\r\n    })\r\n  }, [])\r\n\r\n  const handleNameChange = (e) => {\r\n    if (e.target.value >= 0) {\r\n      const newName = e.target.value;\r\n      setLocalItem({ ...localItem, count: newName });\r\n      update({ ...localItem, count: newName });\r\n      // update(localItem)\r\n      console.log('발동')\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n    <div className='order-item-box'>\r\n      \r\n      <div style={{overflow:'hidden'}}>\r\n        <img src={`https:kr.object.ncloudstorage.com/bleuauction-bucket/menu/${menu.menuAttaches[0].saveFilename}`}\r\n              alt={menu.menuAttaches[0].originFilename}/>\r\n      </div>\r\n\r\n      <div>\r\n        <p>{menu.menuName}</p>\r\n      </div>\r\n\r\n      <div>\r\n        <p>{menu.menuSize}</p>\r\n      </div>\r\n\r\n      <div>\r\n       <p>{menu.menuPrice}</p>\r\n      </div>\r\n\r\n      <div>\r\n        {/* <button onClick={()=>setCount(count + 1)}>+</button> */}\r\n        <input\r\n              type=\"number\"\r\n              name='count'\r\n              value={localItem.count}\r\n              onChange={handleNameChange}\r\n            />\r\n        {/* <button onClick={()=>setCount(count + 1)}>-</button> */}\r\n      </div>\r\n      \r\n    </div>\r\n    </>\r\n  );\r\n}\r\n\r\n          \r\n\r\nexport default OrderItem;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\OrderMenuList.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreOrder.js",["530","531","532"],[],"import React, { useEffect, useReducer, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport styles from './MyOrderContent.module.css';\r\n\r\n\r\n\r\nfunction StoreOrder() {\r\n\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    axios.get('/api/store/order')\r\n    .then(response => setOrders(response.data))\r\n      .catch(error => console.log(error));\r\n    console.log(orders);\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <>\r\n    <h1>주문확인</h1>\r\n    {orders.map(order=>(\r\n    <tr key={order.orderNo}>\r\n      \r\n    <div>\r\n    \r\n    {/* <button onClick={onClick} >버튼</button> */}\r\n    <div className={styles.order_box}>\r\n      <div className={styles.order_store_title}>\r\n      <td>주문 번호 : {order.orderNo}</td>\r\n      <br/>\r\n      <td>주문일: {new Date(order.regDatetime).toLocaleDateString()}</td>\r\n      </div>\r\n      \r\n      <div className={styles.order_item_box}>\r\n        <img src='/images/fresh.png'/>\r\n        <Link className=\"text-ellipsis\" to={`/order/detail/${order && order.orderNo}`} style={{ color: '#909090' }}>\r\n        주문 상세보기\r\n        </Link>\r\n\r\n      \r\n        </div>\r\n      \r\n      <div className={styles.order_result_box}>\r\n      <td>총액: {order.orderPrice}</td>\r\n      <br/>\r\n      <td>주문타입: {order.orderType === 'Q' ? '퀵배송' : order.orderType === 'T' ? '포장' : '기타'}</td>\r\n      <br/>\r\n      <td>요청사항: {order.orderRequest}</td>\r\n      <br/>\r\n      <td>핸드폰 번호: {order.recipientPhone}</td>\r\n      <br/>\r\n      <td>수령자: {order.recipientName}</td>\r\n      <br/>\r\n      <td>우편번호: {order.recipientZipcode}</td>\r\n      <br/>\r\n      <td>주소: {order.recipientAddr}</td>\r\n      <br/>\r\n      <td>상세주소: {order.recipientDetailAddr}</td>\r\n      \r\n      \r\n\r\n\r\n\r\n      </div>\r\n      </div>\r\n   \r\n    </div>\r\n    </tr>\r\n  ))}\r\n       </>\r\n  );\r\n}\r\n\r\nexport default StoreOrder;\r\n","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\StoreEdit.js",["533","534","535","536","537","538","539"],[],"import React, { useState, useEffect } from 'react';\r\nimport { sendAxiosRequest, sendAxiosMultipartRequest, getAccessToken } from '../utility/common';\r\nimport axios from 'axios';\r\nimport { formToJSON } from 'axios';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n// \r\nfunction StoreEditPage() {\r\n  const defaultImage = '/images/rose.png';\r\n  const [store, setStore] = useState(null);\r\n  const [currentImage, setCurrentImage] = useState(defaultImage);\r\n  const [loginUser, setLoginUser] = useState(null);\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n  const tokenMember = jwtDecode(accessToken);\r\n console.log(\"토큰멤버\",tokenMember);\r\n \r\n\r\n  // 메뉴 확인 테스트용\r\n  useEffect(() => {\r\n    sendAxiosRequest('/api/menu/store', 'GET', tokenMember, (response) => {\r\n      console.log(\"응답 성공\",response.data)\r\n    }, (error) => {\r\n      console.log(\"응답 실패\",error);\r\n    }, null, accessToken);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   sendAxiosRequest('/api/store/loginCheck', 'GET', null, (response) => {\r\n  //     setLoginUser(response.data.loginUser);\r\n  //   }, (error) => {\r\n  //     console.log(error);\r\n  //   });\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   if (loginUser) {\r\n  //     sendAxiosRequest(`/api/store/detailByMember?member=${loginUser?.memberNo}`, 'GET', null, (res) => {\r\n  //       setStore(res.data);\r\n  //     }, (err) => {\r\n  //       console.error('Failed to fetch store details', err);\r\n  //     });\r\n  //   }\r\n  // }, [loginUser]);\r\n\r\n  function updateStore(e) {\r\n    e.preventDefault();\r\n    let storeForm = new FormData(document.getElementById('storeForm'));\r\n\r\n    // 이미지 파일 추가 (있는 경우)\r\n    const fileInput = document.getElementById('imageInput');\r\n    if (fileInput.files[0]) {\r\n      storeForm.append('profileImage', fileInput.files[0]);\r\n    }\r\n\r\n    console.log('formData: ', storeForm);\r\n    // Axios를 이용하여 멀티파트 폼 데이터를 서버로 전송합니다.\r\n    sendAxiosMultipartRequest('/api/store/update', formToJSON(storeForm), (response) => {\r\n      console.log(\"수정한 정보\", formToJSON(storeForm))\r\n      console.log(response.data);\r\n      // 성공적으로 업데이트된 경우에 수행할 작업을 추가하세요\r\n    }, (error) => {\r\n      console.error('가게 업데이트 중에 오류가 발생했습니다', error);\r\n      // 오류 발생 시 처리를 추가하세요\r\n    }, null, accessToken);\r\n  }\r\n\r\n  const handleImageChange = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = (e) => {\r\n        setCurrentImage(e.target.result);\r\n      };\r\n\r\n      reader.readAsDataURL(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleImageClick = () => {\r\n    document.getElementById('imageInput').click();\r\n  };\r\n\r\n  const styles = {\r\n    container: {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      alignItems: 'flex-start',\r\n      padding: '20px',\r\n      justifyContent: 'center'\r\n    },\r\n    profilePicture: {\r\n      width: '200px',\r\n      height: '200px',\r\n      borderRadius: '100px',\r\n      marginBottom: '20px',\r\n      alignSelf: 'flex-start',\r\n    },\r\n    formSection: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'flex-start',\r\n      marginLeft: '20px',\r\n    },\r\n    title: {\r\n      fontSize: '24px',\r\n      fontWeight: 'bold',\r\n      marginBottom: '20px',\r\n      textAlign: 'center',\r\n    },\r\n    buttonStyle: {\r\n      border: 'none',\r\n      margin: '10px 0',\r\n      padding: '10px',\r\n      borderRadius: '4px',\r\n      backgroundColor: '#C4C4C433',\r\n      textAlign: 'center',\r\n      width: '500px',\r\n      cursor: 'pointer',\r\n    },\r\n  };\r\n\r\n  // if (store === null) {\r\n  //   return <div>Loading...</div>;\r\n  // } else {\r\n    const { marketName, storeName, licenseNo, storeZipcode, storeAddr, storeDetailAddr, weekdayStartTime, weekdayEndTime, weekendStartTime, weekendEndTime } = store || {};\r\n\r\n    return (\r\n      <div style={styles.container}>\r\n        <form id='storeForm' onSubmit={updateStore}>\r\n          <img src={currentImage} alt={storeName} style={styles.profilePicture} onClick={handleImageClick} />\r\n          <button type=\"button\" style={styles.buttonStyle} onClick={() => { document.getElementById('imageInput').click() }}>사진 등록</button>\r\n          <input\r\n            type=\"file\"\r\n            style={{ display: 'none' }}\r\n            id=\"imageInput\"\r\n            onChange={handleImageChange}\r\n          />\r\n          <div style={styles.formSection}>\r\n            <h1 style={styles.title}>가게 정보 수정</h1>\r\n            <div>\r\n              <label>시장명: </label>\r\n              <input style={styles.input} type=\"text\" name=\"marketName\" defaultValue={marketName} />\r\n            </div>\r\n            <div>\r\n              <label>가게명: </label>\r\n              <input style={styles.input} type=\"text\" name=\"storeName\" defaultValue={storeName} />\r\n            </div>\r\n            <div>\r\n              <label>사업자등록번호: </label>\r\n              <input style={styles.input} type=\"text\" name=\"licenseNo\" defaultValue={licenseNo} />\r\n            </div>\r\n            <div>\r\n              <label>우편번호: </label>\r\n              <input style={styles.input} type=\"text\" name=\"storeZipcode\" defaultValue={storeZipcode} />\r\n            </div>\r\n            <div>\r\n              <label>기본주소: </label>\r\n              <input style={styles.input} type=\"text\" name=\"storeAddr\" defaultValue={storeAddr} />\r\n            </div>\r\n            <div>\r\n              <label>상세주소: </label>\r\n              <input style={styles.input} type=\"text\" name=\"storeDetailAddr\" defaultValue={storeDetailAddr} />\r\n            </div>\r\n            <div>\r\n              <label>평일운영시작시간: </label>\r\n              <input style={styles.input} type=\"time\" name=\"weekdayStartTime\" defaultValue={weekdayStartTime} />\r\n            </div>\r\n            <div>\r\n              <label>평일운영종료시간: </label>\r\n              <input style={styles.input} type=\"time\" name=\"weekdayEndTime\" defaultValue={weekdayEndTime} />\r\n            </div>\r\n            <div>\r\n              <label>주말운영시작시간: </label>\r\n              <input style={styles.input} type=\"time\" name=\"weekendStartTime\" defaultValue={weekendStartTime} />\r\n            </div>\r\n            <div>\r\n              <label>주말운영종료시간: </label>\r\n              <input style={styles.input} type=\"time\" name=\"weekendEndTime\" defaultValue={weekendEndTime} />\r\n            </div>\r\n            <button type=\"submit\" style={styles.submitButton} onClick={updateStore}>수정</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n// }\r\n\r\nexport default StoreEditPage;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\OS\\OS.js",[],[],"C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\Market\\StoreInfoDetail.js",["540"],[],"\r\nimport React from 'react';\r\n\r\nfunction StoreInfoDetail({storeDetail}) {\r\n\r\n  console.log('storeDetail,',storeDetail);\r\n  // console.log(storeInfo);\r\n\r\n    // storeDetail아 null이거나 필요한 속성이 없으면 렌더링하지 않습니다.\r\n    if (!storeDetail) {\r\n        return <div>Loading...</div>; // 혹은 다른 대체 컨텐츠\r\n      }\r\n  return (\r\n    <div style={outerContainer}>\r\n    <div style={introContainer}>\r\n      {/* <img src={storeDetail.image} alt={storeDetail.name} style={imageStyle} /> */}\r\n     <div style={storeInfoContainer}>\r\n      <h2>{storeDetail.storeName}</h2>\r\n      <ul style={infoList}>\r\n        <li style={listItem}>시장 이름:{storeDetail.marketName}</li>\r\n        <li style={listItem}>기본 주소:{storeDetail.storeAddr}</li>\r\n        <li style={listItem}>상세 주소:{storeDetail.storeDetailAddr}</li>\r\n        <li style={listItem}>사업등록번호:{storeDetail.licenseNo}</li>\r\n        <li style={listItem}>운영시간:{storeDetail.weekdayStartTime} ~ {storeDetail.weekdayEndTime}</li>\r\n        <li style={listItem}>{storeDetail.store}</li>\r\n      </ul>\r\n      </div>\r\n      {/* <div style={couponContainer}>\r\n        {coupons.map(coupon => (\r\n          <Coupon key={coupon.id} coupon={coupon} />\r\n        ))}\r\n      </div> */}\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst outerContainer = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    // backgroundColor: '#f7f7f7', // 아주 연한 회색 배경으로 조정\r\n  };\r\n\r\nconst introContainer = {\r\n    display: 'flex',\r\n    flexDirection: 'column', // children들을 열 방향으로 배열\r\n    alignItems: 'center', // children들을 가운데 정렬\r\n    // backgroundColor: '#f0f0f0',// 연한 회색 배경\r\n    padding: '0px',\r\n    borderRadius: '8px', // 소프트한 테두리를 위한 둥근 모서리 추가\r\n    textAlign: 'center',\r\n    width : '70%',\r\n    height: '100%'\r\n};\r\n\r\nconst storeInfoContainer = {\r\n    textAlign: 'left', \r\n    padding: '20px',\r\n    marginBottom: '10px', // 쿠폰 컨테이너와의 간격을 조절\r\n    width : '100%',\r\n  };\r\n\r\nconst imageStyle = {\r\n//   width: '100%',\r\n//   height: 'auto',\r\n//   objectFit: 'cover',\r\n};\r\n\r\nconst infoList = {\r\n  listStyleType: 'none',\r\n  padding: '0',\r\n  margin: '10px 0',\r\n  fontSize: '25px', // larger font size\r\n\r\n};\r\n\r\nconst listItem = {\r\n    marginBottom: '10px',\r\n}\r\n\r\n\r\nexport default StoreInfoDetail;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MenuDetail.js",["541"],[],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n// import { sendAxiosMultipartRequest, sendAxiosRequest } from '../utility/common';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n\r\nfunction MenuDetail() {\r\n\r\n\r\n  const { menuNo } = useParams();\r\n  const [editedName, setEditedName] = useState('');\r\n  const [editedSize, setEditedSize] = useState('');\r\n  const [editedPrice, setEditedPrice] = useState('');\r\n  const [editedContent, setEditedContent] = useState('');\r\n  const [menu, setMenu] = useState(null);\r\n  \r\n  // 만약 menuNo가 undefined라면, 잘못된 요청을 보내고 있을 수 있습니다.\r\nconsole.log('보내기 전 menuNo 확인:', menuNo);\r\n\r\n\r\n  useEffect(() => {\r\n      axios.get(`/api/menu/detail/${menuNo}`)\r\n      .then(response => {\r\n\r\n        console.log('응답 데이터:', response.data); \r\n          setMenu(response.data);\r\n          setEditedName(response.data.menuName);\r\n          setEditedSize(response.data.menuSize);\r\n          setEditedPrice(response.data.menuPrice);\r\n          setEditedContent(response.data.menuContent);\r\n        })\r\n        .catch(error => console.log(error));\r\n    }, [menuNo]);\r\n    \r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleUpdateMenu = () => {\r\n    const formData = new FormData();\r\n    formData.append('menuName', editedName);\r\n    formData.append('menuSize', editedSize);\r\n    formData.append('menuPrice', editedPrice);\r\n    formData.append('menuContent', editedContent);\r\n    formData.append('menuNo',menuNo);\r\n\r\n    axios.post(`/api/menu/update/${menuNo}`, formData)\r\n      .then(response => {\r\n        console.log(\"Menu updated successfully: \", response.data);\r\n        alert('메뉴가 수정 되었습니다.');\r\n        navigate('/menuEdit');\r\n      })\r\n      .catch(error => console.error(\"Failed to update notice: \", error));\r\n  };\r\n\r\n  if (menu === null) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"top-controls\"></div>\r\n        <div style={{ padding: \"0 12px\" }}>\r\n          <table className=\"board_list text-center\">\r\n            <colgroup>\r\n              <col width=\"20%\" />\r\n              <col width=\"80%\" />\r\n            </colgroup>\r\n            <thead>\r\n              <tr>\r\n                <th>메뉴</th>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedName}\r\n                    onChange={(e) => setEditedName(e.target.value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>사이즈</th>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedSize}\r\n                    onChange={(e) => setEditedSize(e.target.value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>가격</th>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedPrice}\r\n                    onChange={(e) => setEditedPrice(e.target.value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <th>내용</th>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedContent}\r\n                    onChange={(e) => setEditedContent(e.target.value)}\r\n                  />\r\n                </td>\r\n              </tr>\r\n              <button onClick={handleUpdateMenu}>수정하기</button>\r\n            </thead>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MenuDetail;","C:\\Users\\think\\git\\bleuauction_fe\\src\\components\\MyPage\\MenuEdit.js",["542","543","544","545","546","547","548","549","550","551"],[],"import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { sendAxiosRequest } from '../utility/common';\r\nimport axios, { formToJSON } from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom'; // 만약 react-router-dom을 사용한다면 이 부분을 추가합니다.\r\nimport  './MenuEdit.css'\r\nimport jwt_decode from 'jwt-decode'; // jwt-decode 라이브러리를 import 합니다.\r\n\r\n\r\n\r\nfunction MenuEdit() {\r\n  let [menuData, setMenuData] = useState([]); // 메뉴 데이터를 저장할 상태\r\n  const { menuNo } = useParams(); // 현재 URL의 매개변수를 가져옵니다.\r\n  const navigate = useNavigate();\r\n  const location = useLocation(); // 추가된 부분\r\n  const store = location.state; // 추가된 부분\r\n  console.log(store);\r\n  const accessToken = sessionStorage.getItem('accessToken');\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   // 상점 번호가 설정되어 있는 경우에만 메뉴 데이터를 요청합니다.\r\n  //   const fetchMenus = async () => {\r\n  //     try {\r\n  //       const response = await axios.get('/api/menu/store'); // 세션을 기반으로 한 요청\r\n  //       if (response.data) {\r\n  //         console.log(response.data);\r\n  //         setMenuData(response.data);\r\n  //       }\r\n  //     } catch (error) {\r\n  //       console.error(\"Error fetching user's menus:\", error);\r\n  //     }\r\n  //   };\r\n  \r\n  //   fetchMenus();\r\n  // }, []); \r\n  \r\n    // 토큰 디코딩\r\n\r\n        const tokenMember = jwt_decode(accessToken);\r\n        console.log(\"디코드된 토큰 정보 출력\",tokenMember); // 디코드된 토큰 정보 출력\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    sendAxiosRequest(`/api/menu/store`, 'GET', tokenMember, response => {\r\n      console.log('응답 data:', response.data);\r\n      setMenuData(response.data);\r\n    }, error => {\r\n      console.error(\"메뉴 가져오기 실패:\", error);\r\n    }, null, accessToken);\r\n  }, []); // 의존성 배열이 비어 있으므로 컴포넌트가 마운트될 때 한 번만 실행됩니다.\r\n\r\n\r\n  // const handleDeleteMenu = (menuNo) => {\r\n  //   axios.post(`/api/menu/delete/${menuNo}`,)\r\n  //     .then(() => {\r\n  //       alert('메뉴가 삭제 되었습니다.');\r\n  //       console.log(\"menuData:\",menuData);\r\n  //       setMenuData(menuData.filter(menu => menu.menuNo !== menuNo)); // 삭제 후 상태 업데이트\r\n  //     })\r\n  //     .catch(error => {\r\n  //       console.error(\"Error deleting menu: \", error);\r\n  //     });\r\n  // };\r\n\r\n  const handleDeleteMenu = (menuNo) => {\r\n    sendAxiosRequest(`/api/menu/delete/${menuNo}`, 'GET', null, response => {\r\n      console.log('Data fetched successfully:', response.data);\r\n      setMenuData(menuData.filter(menu => menu.menuNo !== menuNo));\r\n    }, error => {\r\n      console.error(\"Error deleting user's menus:\", error);\r\n    }, null, accessToken);\r\n\r\n  };\r\n\r\n\r\nconst renderMenus = menuData.map(menu => (\r\n  <div key={menu.menuNo} className=\"menu-item\">\r\n    <h2 className=\"menu-title\">{menu.menuName}</h2>\r\n\r\n    <p className=\"menu-detail\">사이즈: {menu.menuSize}</p>\r\n    <p className=\"menu-detail\">가격: {menu.menuPrice}</p>\r\n    <p className=\"menu-detail\">내용: {menu.menuContent}</p>\r\n    <div  className=\"menu-actions\">\r\n      <button  className=\"delete-button\" onClick={() => handleDeleteMenu(menu.menuNo)}>삭제</button>\r\n      <Link \r\n        to={{\r\n          pathname: \"/MenuDetail\", // 수정할 메뉴의 상세 정보 페이지 경로\r\n          state: { detailMenu: menu } // 현재 메뉴의 데이터\r\n        }}\r\n      >      \r\n      <button className=\"edit-button\">수정하기</button>\r\n    </Link>\r\n      {/* 추가적인 액션 버튼들이 위치할 수 있습니다. */}\r\n    </div>\r\n  </div>\r\n));\r\n\r\nreturn (\r\n  <div style={containerStyle}>\r\n    <Link to=\"/MenuRegisterationForm\" style={registerButtonLink}>\r\n      <button>메뉴 등록하기</button>\r\n    </Link>\r\n    <div style={menuList}>{renderMenus}</div>\r\n  </div>\r\n);\r\n}\r\n\r\n// 스타일 섹션\r\nconst containerStyle = {\r\npadding: '20px',\r\nmaxWidth: '800px', // 조금 더 좁은 컨테이너\r\nmargin: '0 auto',\r\n};\r\n\r\nconst menuList = {\r\nmarginTop: '20px',\r\n};\r\n\r\nconst menuItemStyle = {\r\nborderBottom: '1px solid #ddd', // 각 메뉴 아이템 아래에 구분선 추가\r\npadding: '10px 0',\r\n};\r\n\r\nconst menuItemTitle = {\r\nmargin: '0 0 10px 0',\r\nfontSize: '1.5em',\r\n};\r\n\r\nconst menuActions = {\r\nmarginTop: '10px',\r\n};\r\n\r\nconst deleteButton = {\r\nbackground: '#4169e1', \r\ncolor: '#fff',\r\nborder: 'none',\r\npadding: '5px 10px',\r\nborderRadius: '5px',\r\ncursor: 'pointer',\r\n};\r\n\r\nconst registerButtonLink = {\r\ndisplay: 'block',\r\ntextAlign: 'right',\r\nmarginBottom: '20px',\r\n};\r\n\r\nconst registerButton = {\r\nbackground: '#4169e1', \r\ncolor: 'white',\r\npadding: '10px 20px',\r\ntextDecoration: 'none',\r\nborderRadius: '5px',\r\ncursor: 'pointer',\r\n};\r\n\r\nexport default MenuEdit;\r\n",{"ruleId":"552","severity":1,"message":"553","line":1,"column":17,"nodeType":"554","messageId":"555","endLine":1,"endColumn":26},{"ruleId":"552","severity":1,"message":"556","line":1,"column":28,"nodeType":"554","messageId":"555","endLine":1,"endColumn":36},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"558","line":2,"column":17,"nodeType":"554","messageId":"555","endLine":2,"endColumn":27},{"ruleId":"552","severity":1,"message":"559","line":23,"column":8,"nodeType":"554","messageId":"555","endLine":23,"endColumn":20},{"ruleId":"552","severity":1,"message":"560","line":33,"column":10,"nodeType":"554","messageId":"555","endLine":33,"endColumn":26},{"ruleId":"552","severity":1,"message":"561","line":46,"column":11,"nodeType":"554","messageId":"555","endLine":46,"endColumn":15},{"ruleId":"552","severity":1,"message":"562","line":46,"column":17,"nodeType":"554","messageId":"555","endLine":46,"endColumn":22},{"ruleId":"552","severity":1,"message":"563","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":24},{"ruleId":"552","severity":1,"message":"564","line":3,"column":8,"nodeType":"554","messageId":"555","endLine":3,"endColumn":17},{"ruleId":"552","severity":1,"message":"558","line":12,"column":10,"nodeType":"554","messageId":"555","endLine":12,"endColumn":20},{"ruleId":"552","severity":1,"message":"556","line":13,"column":10,"nodeType":"554","messageId":"555","endLine":13,"endColumn":18},{"ruleId":"552","severity":1,"message":"565","line":13,"column":20,"nodeType":"554","messageId":"555","endLine":13,"endColumn":30},{"ruleId":"552","severity":1,"message":"566","line":15,"column":10,"nodeType":"554","messageId":"555","endLine":15,"endColumn":19},{"ruleId":"552","severity":1,"message":"557","line":16,"column":8,"nodeType":"554","messageId":"555","endLine":16,"endColumn":13},{"ruleId":"552","severity":1,"message":"561","line":25,"column":10,"nodeType":"554","messageId":"555","endLine":25,"endColumn":14},{"ruleId":"552","severity":1,"message":"557","line":3,"column":8,"nodeType":"554","messageId":"555","endLine":3,"endColumn":13},{"ruleId":"552","severity":1,"message":"566","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":19},{"ruleId":"552","severity":1,"message":"567","line":31,"column":9,"nodeType":"554","messageId":"555","endLine":31,"endColumn":16},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"557","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":15},{"ruleId":"552","severity":1,"message":"558","line":2,"column":17,"nodeType":"554","messageId":"555","endLine":2,"endColumn":27},{"ruleId":"552","severity":1,"message":"568","line":5,"column":10,"nodeType":"554","messageId":"555","endLine":5,"endColumn":17},{"ruleId":"552","severity":1,"message":"569","line":9,"column":3,"nodeType":"554","messageId":"555","endLine":9,"endColumn":19},{"ruleId":"552","severity":1,"message":"570","line":13,"column":3,"nodeType":"554","messageId":"555","endLine":13,"endColumn":10},{"ruleId":"552","severity":1,"message":"571","line":24,"column":9,"nodeType":"554","messageId":"555","endLine":24,"endColumn":19},{"ruleId":"572","severity":1,"message":"573","line":43,"column":6,"nodeType":"574","endLine":43,"endColumn":8,"suggestions":"575"},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"576","line":4,"column":8,"nodeType":"554","messageId":"555","endLine":4,"endColumn":21},{"ruleId":"552","severity":1,"message":"577","line":6,"column":10,"nodeType":"554","messageId":"555","endLine":6,"endColumn":16},{"ruleId":"552","severity":1,"message":"578","line":6,"column":18,"nodeType":"554","messageId":"555","endLine":6,"endColumn":23},{"ruleId":"552","severity":1,"message":"579","line":7,"column":10,"nodeType":"554","messageId":"555","endLine":7,"endColumn":28},{"ruleId":"552","severity":1,"message":"580","line":7,"column":30,"nodeType":"554","messageId":"555","endLine":7,"endColumn":43},{"ruleId":"552","severity":1,"message":"581","line":8,"column":10,"nodeType":"554","messageId":"555","endLine":8,"endColumn":33},{"ruleId":"552","severity":1,"message":"582","line":13,"column":24,"nodeType":"554","messageId":"555","endLine":13,"endColumn":39},{"ruleId":"552","severity":1,"message":"583","line":14,"column":9,"nodeType":"554","messageId":"555","endLine":14,"endColumn":20},{"ruleId":"572","severity":1,"message":"584","line":55,"column":6,"nodeType":"574","endLine":55,"endColumn":8,"suggestions":"585"},{"ruleId":"552","severity":1,"message":"553","line":1,"column":16,"nodeType":"554","messageId":"555","endLine":1,"endColumn":25},{"ruleId":"552","severity":1,"message":"556","line":1,"column":27,"nodeType":"554","messageId":"555","endLine":1,"endColumn":35},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"586","severity":1,"message":"587","line":9,"column":7,"nodeType":"588","endLine":9,"endColumn":41},{"ruleId":"552","severity":1,"message":"557","line":3,"column":8,"nodeType":"554","messageId":"555","endLine":3,"endColumn":13},{"ruleId":"552","severity":1,"message":"589","line":17,"column":10,"nodeType":"554","messageId":"555","endLine":17,"endColumn":22},{"ruleId":"552","severity":1,"message":"590","line":19,"column":9,"nodeType":"554","messageId":"555","endLine":19,"endColumn":26},{"ruleId":"552","severity":1,"message":"591","line":34,"column":9,"nodeType":"554","messageId":"555","endLine":34,"endColumn":21},{"ruleId":"552","severity":1,"message":"592","line":42,"column":9,"nodeType":"554","messageId":"555","endLine":42,"endColumn":21},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"593","line":4,"column":8,"nodeType":"554","messageId":"555","endLine":4,"endColumn":14},{"ruleId":"552","severity":1,"message":"594","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":16},{"ruleId":"552","severity":1,"message":"595","line":7,"column":8,"nodeType":"554","messageId":"555","endLine":7,"endColumn":17},{"ruleId":"552","severity":1,"message":"577","line":8,"column":10,"nodeType":"554","messageId":"555","endLine":8,"endColumn":16},{"ruleId":"552","severity":1,"message":"578","line":8,"column":18,"nodeType":"554","messageId":"555","endLine":8,"endColumn":23},{"ruleId":"552","severity":1,"message":"566","line":9,"column":10,"nodeType":"554","messageId":"555","endLine":9,"endColumn":19},{"ruleId":"552","severity":1,"message":"563","line":9,"column":54,"nodeType":"554","messageId":"555","endLine":9,"endColumn":68},{"ruleId":"552","severity":1,"message":"596","line":9,"column":70,"nodeType":"554","messageId":"555","endLine":9,"endColumn":84},{"ruleId":"552","severity":1,"message":"564","line":11,"column":8,"nodeType":"554","messageId":"555","endLine":11,"endColumn":17},{"ruleId":"572","severity":1,"message":"597","line":27,"column":6,"nodeType":"574","endLine":27,"endColumn":8,"suggestions":"598"},{"ruleId":"572","severity":1,"message":"599","line":56,"column":6,"nodeType":"574","endLine":56,"endColumn":30,"suggestions":"600"},{"ruleId":"552","severity":1,"message":"568","line":11,"column":10,"nodeType":"554","messageId":"555","endLine":11,"endColumn":17},{"ruleId":"572","severity":1,"message":"601","line":52,"column":6,"nodeType":"574","endLine":52,"endColumn":8,"suggestions":"602"},{"ruleId":"603","replacedBy":"604"},{"ruleId":"552","severity":1,"message":"605","line":3,"column":10,"nodeType":"554","messageId":"555","endLine":3,"endColumn":14},{"ruleId":"552","severity":1,"message":"606","line":3,"column":16,"nodeType":"554","messageId":"555","endLine":3,"endColumn":20},{"ruleId":"552","severity":1,"message":"607","line":3,"column":22,"nodeType":"554","messageId":"555","endLine":3,"endColumn":28},{"ruleId":"552","severity":1,"message":"608","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":14},{"ruleId":"552","severity":1,"message":"609","line":4,"column":16,"nodeType":"554","messageId":"555","endLine":4,"endColumn":27},{"ruleId":"552","severity":1,"message":"557","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":13},{"ruleId":"552","severity":1,"message":"596","line":10,"column":3,"nodeType":"554","messageId":"555","endLine":10,"endColumn":17},{"ruleId":"552","severity":1,"message":"610","line":10,"column":35,"nodeType":"554","messageId":"555","endLine":10,"endColumn":57},{"ruleId":"552","severity":1,"message":"568","line":12,"column":10,"nodeType":"554","messageId":"555","endLine":12,"endColumn":17},{"ruleId":"552","severity":1,"message":"564","line":13,"column":8,"nodeType":"554","messageId":"555","endLine":13,"endColumn":17},{"ruleId":"552","severity":1,"message":"611","line":114,"column":10,"nodeType":"554","messageId":"555","endLine":114,"endColumn":15},{"ruleId":"552","severity":1,"message":"612","line":3,"column":10,"nodeType":"554","messageId":"555","endLine":3,"endColumn":35},{"ruleId":"552","severity":1,"message":"609","line":5,"column":10,"nodeType":"554","messageId":"555","endLine":5,"endColumn":21},{"ruleId":"552","severity":1,"message":"613","line":5,"column":23,"nodeType":"554","messageId":"555","endLine":5,"endColumn":32},{"ruleId":"552","severity":1,"message":"556","line":1,"column":17,"nodeType":"554","messageId":"555","endLine":1,"endColumn":25},{"ruleId":"614","severity":1,"message":"615","line":125,"column":5,"nodeType":"616","messageId":"617","endLine":125,"endColumn":15},{"ruleId":"552","severity":1,"message":"553","line":1,"column":17,"nodeType":"554","messageId":"555","endLine":1,"endColumn":26},{"ruleId":"552","severity":1,"message":"556","line":1,"column":28,"nodeType":"554","messageId":"555","endLine":1,"endColumn":36},{"ruleId":"552","severity":1,"message":"557","line":3,"column":8,"nodeType":"554","messageId":"555","endLine":3,"endColumn":13},{"ruleId":"552","severity":1,"message":"558","line":3,"column":17,"nodeType":"554","messageId":"555","endLine":3,"endColumn":27},{"ruleId":"552","severity":1,"message":"566","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":19},{"ruleId":"552","severity":1,"message":"560","line":4,"column":21,"nodeType":"554","messageId":"555","endLine":4,"endColumn":37},{"ruleId":"552","severity":1,"message":"618","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":14},{"ruleId":"552","severity":1,"message":"619","line":1,"column":38,"nodeType":"554","messageId":"555","endLine":1,"endColumn":44},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"620","line":3,"column":10,"nodeType":"554","messageId":"555","endLine":3,"endColumn":18},{"ruleId":"552","severity":1,"message":"563","line":6,"column":79,"nodeType":"554","messageId":"555","endLine":6,"endColumn":93},{"ruleId":"552","severity":1,"message":"610","line":6,"column":95,"nodeType":"554","messageId":"555","endLine":6,"endColumn":117},{"ruleId":"552","severity":1,"message":"621","line":10,"column":8,"nodeType":"554","messageId":"555","endLine":10,"endColumn":20},{"ruleId":"552","severity":1,"message":"622","line":13,"column":10,"nodeType":"554","messageId":"555","endLine":13,"endColumn":26},{"ruleId":"552","severity":1,"message":"623","line":53,"column":7,"nodeType":"554","messageId":"555","endLine":53,"endColumn":26},{"ruleId":"552","severity":1,"message":"624","line":185,"column":21,"nodeType":"554","messageId":"555","endLine":185,"endColumn":30},{"ruleId":"625","severity":1,"message":"626","line":270,"column":41,"nodeType":"627","messageId":"617","endLine":270,"endColumn":43},{"ruleId":"552","severity":1,"message":"628","line":3,"column":10,"nodeType":"554","messageId":"555","endLine":3,"endColumn":26},{"ruleId":"552","severity":1,"message":"629","line":34,"column":9,"nodeType":"554","messageId":"555","endLine":34,"endColumn":14},{"ruleId":"552","severity":1,"message":"630","line":37,"column":10,"nodeType":"554","messageId":"555","endLine":37,"endColumn":13},{"ruleId":"552","severity":1,"message":"631","line":94,"column":17,"nodeType":"554","messageId":"555","endLine":94,"endColumn":21},{"ruleId":"625","severity":1,"message":"626","line":123,"column":36,"nodeType":"627","messageId":"617","endLine":123,"endColumn":38},{"ruleId":"552","severity":1,"message":"553","line":1,"column":17,"nodeType":"554","messageId":"555","endLine":1,"endColumn":26},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"632","line":6,"column":22,"nodeType":"554","messageId":"555","endLine":6,"endColumn":30},{"ruleId":"552","severity":1,"message":"568","line":4,"column":9,"nodeType":"554","messageId":"555","endLine":4,"endColumn":16},{"ruleId":"552","severity":1,"message":"579","line":11,"column":5,"nodeType":"554","messageId":"555","endLine":11,"endColumn":23},{"ruleId":"552","severity":1,"message":"633","line":16,"column":25,"nodeType":"554","messageId":"555","endLine":16,"endColumn":39},{"ruleId":"552","severity":1,"message":"634","line":17,"column":24,"nodeType":"554","messageId":"555","endLine":17,"endColumn":38},{"ruleId":"552","severity":1,"message":"635","line":18,"column":19,"nodeType":"554","messageId":"555","endLine":18,"endColumn":27},{"ruleId":"552","severity":1,"message":"636","line":40,"column":21,"nodeType":"554","messageId":"555","endLine":40,"endColumn":33},{"ruleId":"552","severity":1,"message":"635","line":41,"column":17,"nodeType":"554","messageId":"555","endLine":41,"endColumn":25},{"ruleId":"625","severity":1,"message":"637","line":44,"column":40,"nodeType":"627","messageId":"617","endLine":44,"endColumn":42},{"ruleId":"586","severity":1,"message":"587","line":52,"column":17,"nodeType":"588","endLine":53,"endColumn":124},{"ruleId":"586","severity":1,"message":"587","line":56,"column":73,"nodeType":"588","endLine":56,"endColumn":101},{"ruleId":"586","severity":1,"message":"587","line":60,"column":76,"nodeType":"588","endLine":61,"endColumn":44},{"ruleId":"586","severity":1,"message":"587","line":65,"column":74,"nodeType":"588","endLine":66,"endColumn":45},{"ruleId":"552","severity":1,"message":"635","line":128,"column":17,"nodeType":"554","messageId":"555","endLine":128,"endColumn":25},{"ruleId":"552","severity":1,"message":"638","line":129,"column":23,"nodeType":"554","messageId":"555","endLine":129,"endColumn":37},{"ruleId":"552","severity":1,"message":"636","line":130,"column":21,"nodeType":"554","messageId":"555","endLine":130,"endColumn":33},{"ruleId":"639","severity":1,"message":"640","line":149,"column":33,"nodeType":"641","messageId":"642","endLine":149,"endColumn":107},{"ruleId":"572","severity":1,"message":"643","line":167,"column":8,"nodeType":"574","endLine":167,"endColumn":33,"suggestions":"644"},{"ruleId":"572","severity":1,"message":"645","line":181,"column":8,"nodeType":"574","endLine":181,"endColumn":10,"suggestions":"646"},{"ruleId":"586","severity":1,"message":"587","line":195,"column":33,"nodeType":"588","endLine":196,"endColumn":141},{"ruleId":"586","severity":1,"message":"587","line":207,"column":41,"nodeType":"588","endLine":207,"endColumn":69},{"ruleId":"586","severity":1,"message":"587","line":213,"column":41,"nodeType":"588","endLine":213,"endColumn":69},{"ruleId":"586","severity":1,"message":"587","line":219,"column":41,"nodeType":"588","endLine":219,"endColumn":70},{"ruleId":"586","severity":1,"message":"587","line":231,"column":41,"nodeType":"588","endLine":232,"endColumn":197},{"ruleId":"586","severity":1,"message":"587","line":238,"column":61,"nodeType":"588","endLine":247,"endColumn":70},{"ruleId":"625","severity":1,"message":"626","line":255,"column":57,"nodeType":"627","messageId":"617","endLine":255,"endColumn":59},{"ruleId":"625","severity":1,"message":"626","line":264,"column":53,"nodeType":"627","messageId":"617","endLine":264,"endColumn":55},{"ruleId":"625","severity":1,"message":"626","line":322,"column":46,"nodeType":"627","messageId":"617","endLine":322,"endColumn":48},{"ruleId":"552","severity":1,"message":"633","line":336,"column":25,"nodeType":"554","messageId":"555","endLine":336,"endColumn":39},{"ruleId":"552","severity":1,"message":"647","line":386,"column":11,"nodeType":"554","messageId":"555","endLine":386,"endColumn":21},{"ruleId":"572","severity":1,"message":"648","line":411,"column":8,"nodeType":"574","endLine":411,"endColumn":10,"suggestions":"649"},{"ruleId":"586","severity":1,"message":"587","line":420,"column":29,"nodeType":"588","endLine":421,"endColumn":137},{"ruleId":"625","severity":1,"message":"626","line":429,"column":49,"nodeType":"627","messageId":"617","endLine":429,"endColumn":51},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"560","line":5,"column":21,"nodeType":"554","messageId":"555","endLine":5,"endColumn":37},{"ruleId":"552","severity":1,"message":"568","line":6,"column":10,"nodeType":"554","messageId":"555","endLine":6,"endColumn":17},{"ruleId":"552","severity":1,"message":"635","line":9,"column":15,"nodeType":"554","messageId":"555","endLine":9,"endColumn":23},{"ruleId":"572","severity":1,"message":"650","line":16,"column":6,"nodeType":"574","endLine":16,"endColumn":8,"suggestions":"651"},{"ruleId":"586","severity":1,"message":"587","line":20,"column":7,"nodeType":"588","endLine":20,"endColumn":74},{"ruleId":"586","severity":1,"message":"587","line":29,"column":11,"nodeType":"588","endLine":29,"endColumn":80},{"ruleId":"586","severity":1,"message":"587","line":32,"column":11,"nodeType":"588","endLine":32,"endColumn":84},{"ruleId":"625","severity":1,"message":"626","line":33,"column":17,"nodeType":"627","messageId":"617","endLine":33,"endColumn":19},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"652","line":12,"column":21,"nodeType":"554","messageId":"555","endLine":12,"endColumn":33},{"ruleId":"552","severity":1,"message":"611","line":13,"column":10,"nodeType":"554","messageId":"555","endLine":13,"endColumn":15},{"ruleId":"552","severity":1,"message":"593","line":72,"column":8,"nodeType":"554","messageId":"555","endLine":72,"endColumn":14},{"ruleId":"552","severity":1,"message":"553","line":1,"column":16,"nodeType":"554","messageId":"555","endLine":1,"endColumn":25},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"653","line":3,"column":8,"nodeType":"554","messageId":"555","endLine":3,"endColumn":14},{"ruleId":"552","severity":1,"message":"654","line":1,"column":28,"nodeType":"554","messageId":"555","endLine":1,"endColumn":38},{"ruleId":"552","severity":1,"message":"655","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":21},{"ruleId":"572","severity":1,"message":"656","line":17,"column":6,"nodeType":"574","endLine":17,"endColumn":8,"suggestions":"657"},{"ruleId":"586","severity":1,"message":"587","line":40,"column":9,"nodeType":"588","endLine":40,"endColumn":39},{"ruleId":"552","severity":1,"message":"553","line":1,"column":17,"nodeType":"554","messageId":"555","endLine":1,"endColumn":26},{"ruleId":"552","severity":1,"message":"556","line":1,"column":28,"nodeType":"554","messageId":"555","endLine":1,"endColumn":36},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"553","line":1,"column":16,"nodeType":"554","messageId":"555","endLine":1,"endColumn":25},{"ruleId":"552","severity":1,"message":"556","line":1,"column":27,"nodeType":"554","messageId":"555","endLine":1,"endColumn":35},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"658","line":4,"column":16,"nodeType":"554","messageId":"555","endLine":4,"endColumn":23},{"ruleId":"552","severity":1,"message":"607","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":14},{"ruleId":"552","severity":1,"message":"659","line":7,"column":8,"nodeType":"554","messageId":"555","endLine":7,"endColumn":19},{"ruleId":"552","severity":1,"message":"609","line":8,"column":10,"nodeType":"554","messageId":"555","endLine":8,"endColumn":21},{"ruleId":"552","severity":1,"message":"660","line":24,"column":36,"nodeType":"554","messageId":"555","endLine":24,"endColumn":47},{"ruleId":"552","severity":1,"message":"661","line":30,"column":32,"nodeType":"554","messageId":"555","endLine":30,"endColumn":41},{"ruleId":"586","severity":1,"message":"587","line":48,"column":9,"nodeType":"588","endLine":48,"endColumn":90},{"ruleId":"586","severity":1,"message":"587","line":52,"column":13,"nodeType":"588","endLine":52,"endColumn":80},{"ruleId":"586","severity":1,"message":"587","line":57,"column":9,"nodeType":"588","endLine":57,"endColumn":81},{"ruleId":"552","severity":1,"message":"553","line":1,"column":27,"nodeType":"554","messageId":"555","endLine":1,"endColumn":36},{"ruleId":"552","severity":1,"message":"557","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":13},{"ruleId":"552","severity":1,"message":"662","line":6,"column":10,"nodeType":"554","messageId":"555","endLine":6,"endColumn":16},{"ruleId":"552","severity":1,"message":"663","line":54,"column":9,"nodeType":"554","messageId":"555","endLine":54,"endColumn":14},{"ruleId":"552","severity":1,"message":"593","line":4,"column":8,"nodeType":"554","messageId":"555","endLine":4,"endColumn":14},{"ruleId":"552","severity":1,"message":"594","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":16},{"ruleId":"552","severity":1,"message":"595","line":7,"column":8,"nodeType":"554","messageId":"555","endLine":7,"endColumn":17},{"ruleId":"552","severity":1,"message":"577","line":8,"column":10,"nodeType":"554","messageId":"555","endLine":8,"endColumn":16},{"ruleId":"552","severity":1,"message":"578","line":8,"column":18,"nodeType":"554","messageId":"555","endLine":8,"endColumn":23},{"ruleId":"552","severity":1,"message":"664","line":8,"column":12,"nodeType":"554","messageId":"555","endLine":8,"endColumn":20},{"ruleId":"665","severity":1,"message":"666","line":120,"column":29,"nodeType":"667","messageId":"668","endLine":120,"endColumn":48},{"ruleId":"552","severity":1,"message":"618","line":3,"column":10,"nodeType":"554","messageId":"555","endLine":3,"endColumn":14},{"ruleId":"552","severity":1,"message":"577","line":5,"column":10,"nodeType":"554","messageId":"555","endLine":5,"endColumn":16},{"ruleId":"552","severity":1,"message":"578","line":5,"column":18,"nodeType":"554","messageId":"555","endLine":5,"endColumn":23},{"ruleId":"552","severity":1,"message":"553","line":1,"column":27,"nodeType":"554","messageId":"555","endLine":1,"endColumn":36},{"ruleId":"552","severity":1,"message":"669","line":6,"column":8,"nodeType":"554","messageId":"555","endLine":6,"endColumn":15},{"ruleId":"552","severity":1,"message":"558","line":7,"column":10,"nodeType":"554","messageId":"555","endLine":7,"endColumn":20},{"ruleId":"552","severity":1,"message":"561","line":12,"column":8,"nodeType":"554","messageId":"555","endLine":12,"endColumn":12},{"ruleId":"552","severity":1,"message":"562","line":12,"column":14,"nodeType":"554","messageId":"555","endLine":12,"endColumn":19},{"ruleId":"552","severity":1,"message":"670","line":12,"column":21,"nodeType":"554","messageId":"555","endLine":12,"endColumn":27},{"ruleId":"671","severity":1,"message":"672","line":69,"column":57,"nodeType":"673","messageId":"674","endLine":69,"endColumn":59},{"ruleId":"671","severity":1,"message":"672","line":105,"column":34,"nodeType":"673","messageId":"674","endLine":105,"endColumn":36},{"ruleId":"552","severity":1,"message":"577","line":5,"column":10,"nodeType":"554","messageId":"555","endLine":5,"endColumn":16},{"ruleId":"552","severity":1,"message":"578","line":5,"column":18,"nodeType":"554","messageId":"555","endLine":5,"endColumn":23},{"ruleId":"552","severity":1,"message":"557","line":3,"column":8,"nodeType":"554","messageId":"555","endLine":3,"endColumn":13},{"ruleId":"552","severity":1,"message":"568","line":3,"column":10,"nodeType":"554","messageId":"555","endLine":3,"endColumn":17},{"ruleId":"572","severity":1,"message":"675","line":18,"column":6,"nodeType":"574","endLine":18,"endColumn":8,"suggestions":"676"},{"ruleId":"552","severity":1,"message":"654","line":1,"column":28,"nodeType":"554","messageId":"555","endLine":1,"endColumn":38},{"ruleId":"572","severity":1,"message":"656","line":17,"column":6,"nodeType":"574","endLine":17,"endColumn":8,"suggestions":"677"},{"ruleId":"586","severity":1,"message":"587","line":37,"column":9,"nodeType":"588","endLine":37,"endColumn":39},{"ruleId":"552","severity":1,"message":"563","line":2,"column":55,"nodeType":"554","messageId":"555","endLine":2,"endColumn":69},{"ruleId":"552","severity":1,"message":"557","line":3,"column":8,"nodeType":"554","messageId":"555","endLine":3,"endColumn":13},{"ruleId":"552","severity":1,"message":"568","line":5,"column":10,"nodeType":"554","messageId":"555","endLine":5,"endColumn":17},{"ruleId":"552","severity":1,"message":"635","line":11,"column":17,"nodeType":"554","messageId":"555","endLine":11,"endColumn":25},{"ruleId":"552","severity":1,"message":"678","line":13,"column":10,"nodeType":"554","messageId":"555","endLine":13,"endColumn":19},{"ruleId":"552","severity":1,"message":"636","line":13,"column":21,"nodeType":"554","messageId":"555","endLine":13,"endColumn":33},{"ruleId":"572","severity":1,"message":"679","line":26,"column":6,"nodeType":"574","endLine":26,"endColumn":8,"suggestions":"680"},{"ruleId":"552","severity":1,"message":"681","line":65,"column":7,"nodeType":"554","messageId":"555","endLine":65,"endColumn":17},{"ruleId":"552","severity":1,"message":"682","line":6,"column":10,"nodeType":"554","messageId":"555","endLine":6,"endColumn":21},{"ruleId":"552","severity":1,"message":"557","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":13},{"ruleId":"552","severity":1,"message":"558","line":5,"column":17,"nodeType":"554","messageId":"555","endLine":5,"endColumn":27},{"ruleId":"552","severity":1,"message":"683","line":15,"column":11,"nodeType":"554","messageId":"555","endLine":15,"endColumn":17},{"ruleId":"552","severity":1,"message":"684","line":16,"column":9,"nodeType":"554","messageId":"555","endLine":16,"endColumn":17},{"ruleId":"572","severity":1,"message":"679","line":55,"column":6,"nodeType":"574","endLine":55,"endColumn":8,"suggestions":"685"},{"ruleId":"552","severity":1,"message":"686","line":124,"column":7,"nodeType":"554","messageId":"555","endLine":124,"endColumn":20},{"ruleId":"552","severity":1,"message":"687","line":129,"column":7,"nodeType":"554","messageId":"555","endLine":129,"endColumn":20},{"ruleId":"552","severity":1,"message":"688","line":134,"column":7,"nodeType":"554","messageId":"555","endLine":134,"endColumn":18},{"ruleId":"552","severity":1,"message":"689","line":138,"column":7,"nodeType":"554","messageId":"555","endLine":138,"endColumn":19},{"ruleId":"552","severity":1,"message":"690","line":153,"column":7,"nodeType":"554","messageId":"555","endLine":153,"endColumn":21},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'axios' is defined but never used.","'formToJSON' is defined but never used.","'UserProvider' is defined but never used.","'sendAxiosRequest' is defined but never used.","'user' is assigned a value but never used.","'login' is assigned a value but never used.","'getAccessToken' is defined but never used.","'jwtDecode' is defined but never used.","'useContext' is defined but never used.","'isOpenNow' is defined but never used.","'useForm' is assigned a value but never used.","'useUser' is defined but never used.","'getLoginUserInfo' is defined but never used.","'mainUrl' is defined but never used.","'currentURL' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'accessToken' and 'refreshToken'. Either include them or remove the dependency array.","ArrayExpression",["691"],"'StoreListItem' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'accessTokenRefresh' is defined but never used.","'redirectLogin' is defined but never used.","'accordionSummaryClasses' is defined but never used.","'setPageRowCount' is assigned a value but never used.","'accessToken' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'pageRowCount'. Either include it or remove the dependency array.",["692"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'previewImage' is assigned a value but never used.","'handleImageChange' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'Coupon' is defined but never used.","'Category' is defined but never used.","'StoreHome' is defined but never used.","'isTokenExpired' is defined but never used.","React Hook useEffect has missing dependencies: 'accessToken' and 'newAddLength'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setStartPageNo' needs the current value of 'newAddLength'.",["693"],"React Hook useEffect has missing dependencies: 'accessToken' and 'newAddLength'. Either include them or remove the dependency array.",["694"],"React Hook useEffect has missing dependencies: 'accessToken', 'menuData', and 'store'. Either include them or remove the dependency array.",["695"],"no-new-object",["696"],"'Form' is defined but never used.","'Card' is defined but never used.","'Button' is defined but never used.","'json' is defined but never used.","'useNavigate' is defined but never used.","'isNullUndefinedOrEmpty' is defined but never used.","'store' is assigned a value but never used.","'sendAxiosMultipartRequest' is defined but never used.","'useParams' is defined but never used.","no-dupe-keys","Duplicate key 'transition'.","ObjectExpression","unexpected","'Link' is defined but never used.","'useRef' is defined but never used.","'Carousel' is defined but never used.","'Handsontable' is defined but never used.","'registerRenderer' is defined but never used.","'recommendationItems' is assigned a value but never used.","'cellWidth' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'isValidDateValue' is defined but never used.","'payNo' is assigned a value but never used.","'pay' is assigned a value but never used.","'data' is assigned a value but never used.","'setState' is assigned a value but never used.","'setAccessToken' is assigned a value but never used.","'setTokenMember' is assigned a value but never used.","'setStore' is assigned a value but never used.","'setLoginUser' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'setAccessToekn' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has missing dependencies: 'accessToken', 'newAddLength', and 'store.storeNo'. Either include them or remove the dependency array.",["697"],"React Hook useEffect has missing dependencies: 'accessToken', 'newAddLength', and 'store.storeNo'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setStartPageNo' needs the current value of 'newAddLength'.",["698"],"'pageRowCnt' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.reviewNo'. Either include it or remove the dependency array.",["699"],"React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.",["700"],"'setMenuItems' is assigned a value but never used.","'styles' is defined but never used.","'useReducer' is defined but never used.","'OrderMenuList' is defined but never used.","React Hook useEffect has a missing dependency: 'orders'. Either include it or remove the dependency array.",["701"],"'NavLink' is defined but never used.","'Placeholder' is defined but never used.","'startSecond' is assigned a value but never used.","'endSecond' is assigned a value but never used.","'Hidden' is defined but never used.","'codes' is assigned a value but never used.","'response' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Payment' is defined but never used.","'logout' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'localItem' and 'menu.menuNo'. Either include them or remove the dependency array. You can also do a functional update 'setLocalItem(l => ...)' if you only need 'localItem' in the 'setLocalItem' call.",["702"],["703"],"'loginUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accessToken' and 'tokenMember'. Either include them or remove the dependency array.",["704"],"'imageStyle' is assigned a value but never used.","'useLocation' is defined but never used.","'menuNo' is assigned a value but never used.","'navigate' is assigned a value but never used.",["705"],"'menuItemStyle' is assigned a value but never used.","'menuItemTitle' is assigned a value but never used.","'menuActions' is assigned a value but never used.","'deleteButton' is assigned a value but never used.","'registerButton' is assigned a value but never used.",{"desc":"706","fix":"707"},{"desc":"708","fix":"709"},{"desc":"710","fix":"711"},{"desc":"712","fix":"713"},{"desc":"714","fix":"715"},"no-object-constructor",{"desc":"716","fix":"717"},{"desc":"718","fix":"719"},{"desc":"720","fix":"721"},{"desc":"722","fix":"723"},{"desc":"724","fix":"725"},{"desc":"726","fix":"727"},{"desc":"724","fix":"728"},{"desc":"729","fix":"730"},{"desc":"729","fix":"731"},"Update the dependencies array to be: [accessToken, refreshToken]",{"range":"732","text":"733"},"Update the dependencies array to be: [pageRowCount]",{"range":"734","text":"735"},"Update the dependencies array to be: [accessToken, newAddLength]",{"range":"736","text":"737"},"Update the dependencies array to be: [accessToken, newAddLength, startPageNo, storeList]",{"range":"738","text":"739"},"Update the dependencies array to be: [accessToken, menuData, store]",{"range":"740","text":"741"},"Update the dependencies array to be: [startPageNo, reviewList, newAddLength, store.storeNo, accessToken]",{"range":"742","text":"743"},"Update the dependencies array to be: [accessToken, newAddLength, store.storeNo]",{"range":"744","text":"745"},"Update the dependencies array to be: [props.reviewNo]",{"range":"746","text":"747"},"Update the dependencies array to be: [store]",{"range":"748","text":"749"},"Update the dependencies array to be: [orders]",{"range":"750","text":"751"},"Update the dependencies array to be: [localItem, menu.menuNo]",{"range":"752","text":"753"},{"range":"754","text":"751"},"Update the dependencies array to be: [accessToken, tokenMember]",{"range":"755","text":"756"},{"range":"757","text":"756"},[1862,1864],"[accessToken, refreshToken]",[2051,2053],"[pageRowCount]",[1191,1193],"[accessToken, newAddLength]",[2232,2256],"[accessToken, newAddLength, startPageNo, storeList]",[1709,1711],"[accessToken, menuData, store]",[8362,8387],"[startPageNo, reviewList, newAddLength, store.storeNo, accessToken]",[8981,8983],"[accessToken, newAddLength, store.storeNo]",[22709,22711],"[props.reviewNo]",[599,601],"[store]",[486,488],"[orders]",[457,459],"[localItem, menu.menuNo]",[444,446],[940,942],"[accessToken, tokenMember]",[1758,1760]]
\ No newline at end of file
Index: src/components/Market/MarketDetailPage.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport TabBar from './TabBar';\r\nimport MenuList from '../Menu/MenuList';\r\nimport StoreInfoDetail from './StoreInfoDetail';\r\nimport Button from '../MainPage/Button';\r\nimport StoreInfo from './StoreInfo';\r\nimport ReviewForm from '../Review/ReviewForm';\r\nimport { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport {getAccessToken, sendAxiosRequest} from '../utility/common';\r\nimport { MenuItem } from '@mui/material';\r\nimport OrderModal from './OrderModal';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\n\r\nfunction MarketDetailPage() {\r\n  let acc = sessionStorage.getItem('accessToken');\r\n  jwtDecode(acc);\r\n\r\n  const [activeTab, setActiveTab] = useState('info');\r\n  const [modal, setModal] = useState(false);\r\n  const [menuData, setMenuData] = useState([]); // 메뉴 데이터를 저장할 상태\r\n  const [storeDetail, setStoreDetail] = useState(null); // 처음에는 정보가 없으므로 null로 초기화합니다.\r\n\r\n\r\n  const location = useLocation(); // 추가된 부분\r\n  const store = location.state; // 추가된 부분\r\n\r\n\r\n  const storeInfo = {\r\n    image: '/images/storeimage.png',\r\n    name: '대원수산',\r\n    location: '서울특별시 동작구 노들로 674 노량진수산시장 , 2층 활어 2-15호 강변상회',\r\n    hours: '월요일 (오늘) 09:00 ~ 21:00',\r\n    phone: '02-1234-5678',\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (store && store.storeNo) {\r\n      // 상점 번호가 있는 경우에만 요청을 실행합니다.\r\n      sendAxiosRequest(`/api/menu/${store.storeNo}`, 'GET', null, response => {\r\n        if (response.data && response.data.length > 0) {\r\n          console.log(response.data);\r\n          setMenuData(response.data.map((menu) => ({\r\n            ...menu,\r\n            count: 0\r\n          }))); // 받아온 데이터로 상태를 업데이트합니다.\r\n          console.log(menuData);\r\n        }\r\n      }, error => {\r\n        console.error(\"An error occurred while fetching the menus:\", error);\r\n      }, null, accessToken);\r\n    }\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  // 가게 정보 및 메뉴 정보를 불러오는 부분\r\n  useEffect(() => {\r\n    if (store && store.storeNo) {\r\n      // 가게 정보를 불러오는 API 요청\r\n      sendAxiosRequest(`/api/store/${store.storeNo}`, 'GET', null, response => {\r\n        console.log(\"Store details fetched:\", response.data);\r\n        setStoreDetail(response.data); // 받아온 데이터로 상태를 업데이트합니다.\r\n      }, error => {\r\n        console.error(\"An error occurred while fetching the store details:\", error);\r\n      });\r\n\r\n      // 메뉴 정보를 불러오는 API 요청 (기존 로직 유지)\r\n      // ... (기존 메뉴 정보 요청 코드)\r\n    }\r\n  }, [store]); // store가 변경될 때마다 이 훅을 재실행합니다.\r\n\r\n\r\n  const handleOrderClick = () => {\r\n    // alert('주문하기 버튼 클릭!');\r\n    setModal(true);\r\n    console.log(modal);\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModal(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={infoContainerStyle}>\r\n      <StoreInfo storeInfo={storeInfo} store={store} />\r\n      </div>\r\n      <div style={tabContainerStyle}>\r\n        <TabBar activeTab={activeTab} onTabClick={setActiveTab} />\r\n        {activeTab === 'menu' && <Button onClick={handleOrderClick} buttonText=\"주문하기\" />}\r\n        <OrderModal store={store} menus={menuData} isOpen={modal} onClose={closeModal} setMenuData={setMenuData} />\r\n      </div>\r\n      {activeTab === 'info' && <StoreInfoDetail storeDetail={storeDetail}/>}\r\n      {activeTab === 'menu' && <MenuList menus={menuData}/>}\r\n      {activeTab === 'review' && <ReviewForm  store={store}/>}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nconst infoContainerStyle = {\r\n  marginBottom: '0px', // 예시: 아래쪽 마진을 추가하여 공간 생성\r\n};\r\n\r\nconst tabContainerStyle = {\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'center'\r\n};\r\n\r\n\r\nexport default MarketDetailPage;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Market/MarketDetailPage.js b/src/components/Market/MarketDetailPage.js
--- a/src/components/Market/MarketDetailPage.js	(revision 7ebcd99127568e8ca66b2082e5c33510dda42c34)
+++ b/src/components/Market/MarketDetailPage.js	(date 1698145763744)
@@ -1,28 +1,23 @@
 import React, { useState } from 'react';
 import TabBar from './TabBar';
 import MenuList from '../Menu/MenuList';
-import StoreInfoDetail from './StoreInfoDetail';
 import Button from '../MainPage/Button';
 import StoreInfo from './StoreInfo';
-import ReviewForm from '../Review/ReviewForm';
+import ReviewSection from '../Review/ReviewSection';
 import { useEffect } from 'react';
 import { useLocation } from 'react-router-dom';
-import {getAccessToken, sendAxiosRequest} from '../utility/common';
-import { MenuItem } from '@mui/material';
+import { sendAxiosRequest } from '../utility/common';
 import OrderModal from './OrderModal';
 import { useUser } from '../Auth/UserContext';
-import jwtDecode from "jwt-decode";
 
 
 function MarketDetailPage() {
-  let acc = sessionStorage.getItem('accessToken');
-  jwtDecode(acc);
 
+  
   const [activeTab, setActiveTab] = useState('info');
   const [modal, setModal] = useState(false);
   const [menuData, setMenuData] = useState([]); // 메뉴 데이터를 저장할 상태
-  const [storeDetail, setStoreDetail] = useState(null); // 처음에는 정보가 없으므로 null로 초기화합니다.
-
+  const accessToken = (sessionStorage.getItem('accessToken')) ? sessionStorage.getItem('accessToken'): null;
 
   const location = useLocation(); // 추가된 부분
   const store = location.state; // 추가된 부분
@@ -45,7 +40,7 @@
         if (response.data && response.data.length > 0) {
           console.log(response.data);
           setMenuData(response.data.map((menu) => ({
-            ...menu,
+            ...menu, 
             count: 0
           }))); // 받아온 데이터로 상태를 업데이트합니다.
           console.log(menuData);
@@ -58,24 +53,6 @@
 
 
 
-
-  // 가게 정보 및 메뉴 정보를 불러오는 부분
-  useEffect(() => {
-    if (store && store.storeNo) {
-      // 가게 정보를 불러오는 API 요청
-      sendAxiosRequest(`/api/store/${store.storeNo}`, 'GET', null, response => {
-        console.log("Store details fetched:", response.data);
-        setStoreDetail(response.data); // 받아온 데이터로 상태를 업데이트합니다.
-      }, error => {
-        console.error("An error occurred while fetching the store details:", error);
-      });
-
-      // 메뉴 정보를 불러오는 API 요청 (기존 로직 유지)
-      // ... (기존 메뉴 정보 요청 코드)
-    }
-  }, [store]); // store가 변경될 때마다 이 훅을 재실행합니다.
-
-
   const handleOrderClick = () => {
     // alert('주문하기 버튼 클릭!');
     setModal(true);
@@ -86,6 +63,7 @@
     setModal(false);
   };
 
+
   return (
     <div>
       <div style={infoContainerStyle}>
@@ -96,9 +74,9 @@
         {activeTab === 'menu' && <Button onClick={handleOrderClick} buttonText="주문하기" />}
         <OrderModal store={store} menus={menuData} isOpen={modal} onClose={closeModal} setMenuData={setMenuData} />
       </div>
-      {activeTab === 'info' && <StoreInfoDetail storeDetail={storeDetail}/>}
+      {activeTab === 'info' && <p>여기에 가게정보를 표시합니다.</p>}
       {activeTab === 'menu' && <MenuList menus={menuData}/>}
-      {activeTab === 'review' && <ReviewForm  store={store}/>}
+      {activeTab === 'review' && <ReviewSection />}
     </div>
 
   );
Index: src/components/Market/OrderModal.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState, useEffect } from 'react';\r\nimport './OrderModal.css';\r\nimport { useUser } from '../Auth/UserContext';\r\nimport OrderItem from './OrderItem';\r\nimport { sendAxiosRequest } from '../utility/common';\r\nimport Payment from '../Pay/Pay';\r\nimport { formToJSON } from 'axios';\r\n\r\nconst OrderModal = ({ store, menus, isOpen, onClose, setMenuData }) => {\r\n\r\n  \r\nconst {user, login, logout} = useUser();\r\n\r\nconst [order, setOrder] = useState({\r\n  orderType:'Q',\r\n  orderPrice:0,\r\n  orderRequest:'',\r\n  recipientPhone:'',\r\n  recipientName:'',\r\n  recipientZipcode:'',\r\n  recipientAddr:'',\r\n  recipientDetailAddr:'',\r\n  orderStatus:'',\r\n})\r\n\r\n  // OrderItem 변경 사항 적용\r\n    const updateMenuCount = (updateMenu)=> { \r\n      const updatedItems = menus?.map((menu) =>\r\n      menu.menuNo === updateMenu.menuNo ? updateMenu : menu\r\n    );\r\n      setMenuData(\r\n        updatedItems\r\n      )\r\n  };\r\n\r\n\r\n  const [orderMenus, setOrderMenus] = useState([])\r\n\r\n  let totalPrice = 0\r\n  let totalOrders = [];\r\n  \r\n \r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    setActiveSection('deliveryMethod');\r\n\r\n  }\r\n  \r\n\r\n  // 수령 방식 변경 사항을 저장\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setOrder(prevDetails => ({\r\n      ...prevDetails,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n\r\n  // order, orderMenu 생성 및 결제 진행\r\n  const handleOrder = (event) => {\r\n    event.preventDefault();\r\n    // console.log(orderMenus)\r\n\r\n\r\n   // orderMenu 생성\r\n    menus.filter((menu) => menu.count !== 0).map((menu) => {\r\n      \r\n      totalPrice += menu.count * menu.menuPrice\r\n\r\n      totalOrders.push({\r\n        menuNo: Number(menu.menuNo),\r\n        orderMenuCount: Number(menu.count),\r\n        // orderNo: 0,\r\n        // memberNo:0,\r\n      })\r\n    })\r\n    \r\n    setOrderMenus(totalOrders)\r\n\r\n\r\n\r\n    setOrder({\r\n      ...order, orderPrice: totalPrice\r\n    })\r\n\r\n    // console.log(orderMenus)\r\n    // console.log(typeof(orderMenus[0].menuNo))\r\n\r\n\r\n    // 주문 생성\r\n    sendAxiosRequest('/api/order/new', 'POST', order, response => {\r\n      if (response.data && response.data.length > 0) {\r\n        console.log(\"주문 생성에 성공했습니다:\", response.data);\r\n      }\r\n    }, error => {\r\n      console.error(\"주문 생성에 실패했습니다:\", error);\r\n    });\r\n\r\n    \r\n    //주문 메뉴 추가 생성\r\n    setTimeout(() => {\r\n      orderMenus.map((orderMenu) => {\r\n        console.log('orderMenu=> : ', orderMenu);\r\n\r\n        sendAxiosRequest('/api/ordermenu/new', 'POST', orderMenu, response => {\r\n          if (response.data && response.data.length > 0) {\r\n            console.log(\"주문메뉴 생성에 성공했습니다:\", response.data);\r\n            // console.log('orderMenu=> : ', orderMenu);\r\n            console.log(typeof(orderMenu.menuNo))\r\n          }\r\n        }, error => {\r\n          console.error(\"주문메뉴 생성에 실패했습니다:\", error);\r\n        });\r\n      })\r\n    }, 6000);\r\n\r\n    \r\n    \r\n  }\r\n\r\n\r\n  const [activeSection, setActiveSection] = useState('orderInfo'); // 현재 활성화된 섹션을 추적\r\n\r\n  const switchSection = (section) => {\r\n    setActiveSection(section);\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n\r\n  return (\r\n    <div className=\"orderModalBackground\">\r\n      <div className=\"orderModalContainer\">\r\n        <div className=\"orderModalHeader\">\r\n          <button className=\"closeButton\" onClick={onClose}>X</button>\r\n        </div>\r\n\r\n        <div className=\"sectionButtons\">\r\n          <button onClick={() => switchSection('orderInfo')}>주문 정보</button>\r\n          <button onClick={() => switchSection('deliveryMethod')}>수령 방식</button>\r\n        </div>\r\n\r\n        {activeSection === 'orderInfo' && (\r\n          <form onSubmit={handleSubmit}>\r\n            <h2>주문 정보</h2>\r\n\r\n            <div>\r\n              {menus?.map((menu) => \r\n                <OrderItem key={menu.menuNo} menu={menu}  update = {updateMenuCount} />\r\n              )}\r\n            </div>\r\n\r\n            <button type=\"submit\">주문 정보 제출</button>\r\n          </form>\r\n        )}\r\n\r\n\r\n\r\n        {activeSection === 'deliveryMethod' && (\r\n          <div>\r\n            {/* 수령 방식 선택 부분 */}\r\n            <h2>수령 방식</h2>\r\n\r\n            <div>\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"orderType\"\r\n                  value='Q'\r\n                  checked={order.orderType === 'Q'}\r\n                  onChange={handleInputChange}\r\n                />\r\n                퀵배송\r\n              </label>\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"orderType\"\r\n                  value='T'\r\n                  checked={order.orderType === 'T'}\r\n                  onChange={handleInputChange}\r\n                />\r\n                포장\r\n              </label>\r\n            </div>\r\n\r\n            <h2>수령 정보</h2>\r\n            <input\r\n            type=\"text\"\r\n            name=\"recipientName\"\r\n            placeholder=\"이름\"\r\n            value={order.recipientName}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"recipientPhone\"\r\n            placeholder=\"전화번호\"\r\n            value={order.recipientPhone}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"recipientZipcode\"\r\n            placeholder=\"우편번호\"\r\n            value={order.recipientZipcode}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"recipientAddr\"\r\n            placeholder=\"기본주소\"\r\n            value={order.recipientAddr}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"recipientDetailAddr\"\r\n            placeholder=\"상세주소\"\r\n            value={order.recipientDetailAddr}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            name=\"orderRequest\"\r\n            placeholder=\"요청사항\"\r\n            value={order.orderRequest}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n            <button onClick={handleOrder}>결제하기</button>\r\n            {/* <Payment onClick={handleOrder}>결제하기</Payment> */}\r\n          </div>\r\n        )}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n          \r\n\r\nexport default OrderModal;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Market/OrderModal.js b/src/components/Market/OrderModal.js
--- a/src/components/Market/OrderModal.js	(revision 7ebcd99127568e8ca66b2082e5c33510dda42c34)
+++ b/src/components/Market/OrderModal.js	(date 1698146101282)
@@ -10,6 +10,7 @@
 
   
 const {user, login, logout} = useUser();
+const accessToken = sessionStorage.getItem('accessToken');
 
 const [order, setOrder] = useState({
   orderType:'Q',
@@ -96,7 +97,7 @@
       }
     }, error => {
       console.error("주문 생성에 실패했습니다:", error);
-    });
+    }, null, accessToken);
 
     
     //주문 메뉴 추가 생성
@@ -112,7 +113,7 @@
           }
         }, error => {
           console.error("주문메뉴 생성에 실패했습니다:", error);
-        });
+        }, null, accessToken);
       })
     }, 6000);
 
